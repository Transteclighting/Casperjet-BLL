//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.832
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TEL.SMS.BO.BE {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("DSRollingForecast")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DSRollingForecast : System.Data.DataSet {
        
        private RollingForecastDBDataTable tableRollingForecastDB;
        
        private SCMonthBudgetDBDataTable tableSCMonthBudgetDB;
        
        private RollingForcastUIDataTable tableRollingForcastUI;
        
        private SupplierDataTable tableSupplier;
        
        private ProductDataTable tableProduct;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DSRollingForecast() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DSRollingForecast(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["RollingForecastDB"] != null)) {
                    base.Tables.Add(new RollingForecastDBDataTable(ds.Tables["RollingForecastDB"]));
                }
                if ((ds.Tables["SCMonthBudgetDB"] != null)) {
                    base.Tables.Add(new SCMonthBudgetDBDataTable(ds.Tables["SCMonthBudgetDB"]));
                }
                if ((ds.Tables["RollingForcastUI"] != null)) {
                    base.Tables.Add(new RollingForcastUIDataTable(ds.Tables["RollingForcastUI"]));
                }
                if ((ds.Tables["Supplier"] != null)) {
                    base.Tables.Add(new SupplierDataTable(ds.Tables["Supplier"]));
                }
                if ((ds.Tables["Product"] != null)) {
                    base.Tables.Add(new ProductDataTable(ds.Tables["Product"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RollingForecastDBDataTable RollingForecastDB {
            get {
                return this.tableRollingForecastDB;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SCMonthBudgetDBDataTable SCMonthBudgetDB {
            get {
                return this.tableSCMonthBudgetDB;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RollingForcastUIDataTable RollingForcastUI {
            get {
                return this.tableRollingForcastUI;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SupplierDataTable Supplier {
            get {
                return this.tableSupplier;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProductDataTable Product {
            get {
                return this.tableProduct;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            DSRollingForecast cln = ((DSRollingForecast)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["RollingForecastDB"] != null)) {
                    base.Tables.Add(new RollingForecastDBDataTable(ds.Tables["RollingForecastDB"]));
                }
                if ((ds.Tables["SCMonthBudgetDB"] != null)) {
                    base.Tables.Add(new SCMonthBudgetDBDataTable(ds.Tables["SCMonthBudgetDB"]));
                }
                if ((ds.Tables["RollingForcastUI"] != null)) {
                    base.Tables.Add(new RollingForcastUIDataTable(ds.Tables["RollingForcastUI"]));
                }
                if ((ds.Tables["Supplier"] != null)) {
                    base.Tables.Add(new SupplierDataTable(ds.Tables["Supplier"]));
                }
                if ((ds.Tables["Product"] != null)) {
                    base.Tables.Add(new ProductDataTable(ds.Tables["Product"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableRollingForecastDB = ((RollingForecastDBDataTable)(base.Tables["RollingForecastDB"]));
            if ((initTable == true)) {
                if ((this.tableRollingForecastDB != null)) {
                    this.tableRollingForecastDB.InitVars();
                }
            }
            this.tableSCMonthBudgetDB = ((SCMonthBudgetDBDataTable)(base.Tables["SCMonthBudgetDB"]));
            if ((initTable == true)) {
                if ((this.tableSCMonthBudgetDB != null)) {
                    this.tableSCMonthBudgetDB.InitVars();
                }
            }
            this.tableRollingForcastUI = ((RollingForcastUIDataTable)(base.Tables["RollingForcastUI"]));
            if ((initTable == true)) {
                if ((this.tableRollingForcastUI != null)) {
                    this.tableRollingForcastUI.InitVars();
                }
            }
            this.tableSupplier = ((SupplierDataTable)(base.Tables["Supplier"]));
            if ((initTable == true)) {
                if ((this.tableSupplier != null)) {
                    this.tableSupplier.InitVars();
                }
            }
            this.tableProduct = ((ProductDataTable)(base.Tables["Product"]));
            if ((initTable == true)) {
                if ((this.tableProduct != null)) {
                    this.tableProduct.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DSRollingForecast";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DSRollingForecast.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableRollingForecastDB = new RollingForecastDBDataTable();
            base.Tables.Add(this.tableRollingForecastDB);
            this.tableSCMonthBudgetDB = new SCMonthBudgetDBDataTable();
            base.Tables.Add(this.tableSCMonthBudgetDB);
            this.tableRollingForcastUI = new RollingForcastUIDataTable();
            base.Tables.Add(this.tableRollingForcastUI);
            this.tableSupplier = new SupplierDataTable();
            base.Tables.Add(this.tableSupplier);
            this.tableProduct = new ProductDataTable();
            base.Tables.Add(this.tableProduct);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRollingForecastDB() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSCMonthBudgetDB() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRollingForcastUI() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSupplier() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProduct() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            DSRollingForecast ds = new DSRollingForecast();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void RollingForecastDBRowChangeEventHandler(object sender, RollingForecastDBRowChangeEvent e);
        
        public delegate void SCMonthBudgetDBRowChangeEventHandler(object sender, SCMonthBudgetDBRowChangeEvent e);
        
        public delegate void RollingForcastUIRowChangeEventHandler(object sender, RollingForcastUIRowChangeEvent e);
        
        public delegate void SupplierRowChangeEventHandler(object sender, SupplierRowChangeEvent e);
        
        public delegate void ProductRowChangeEventHandler(object sender, ProductRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RollingForecastDBDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnSupplierID;
            
            private System.Data.DataColumn columnMonthDate;
            
            private System.Data.DataColumn columnProductID;
            
            private System.Data.DataColumn columnMonthN1ConfirmQty;
            
            private System.Data.DataColumn columnMonthN2ConfirmQty;
            
            private System.Data.DataColumn columnMonthN3ConfirmQty;
            
            private System.Data.DataColumn column3MonthBudgetQty;
            
            private System.Data.DataColumn columnYearCumBudgetQty;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RollingForecastDBDataTable() {
                this.TableName = "RollingForecastDB";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RollingForecastDBDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RollingForecastDBDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SupplierIDColumn {
                get {
                    return this.columnSupplierID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MonthDateColumn {
                get {
                    return this.columnMonthDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductIDColumn {
                get {
                    return this.columnProductID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MonthN1ConfirmQtyColumn {
                get {
                    return this.columnMonthN1ConfirmQty;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MonthN2ConfirmQtyColumn {
                get {
                    return this.columnMonthN2ConfirmQty;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MonthN3ConfirmQtyColumn {
                get {
                    return this.columnMonthN3ConfirmQty;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _3MonthBudgetQtyColumn {
                get {
                    return this.column3MonthBudgetQty;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn YearCumBudgetQtyColumn {
                get {
                    return this.columnYearCumBudgetQty;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RollingForecastDBRow this[int index] {
                get {
                    return ((RollingForecastDBRow)(this.Rows[index]));
                }
            }
            
            public event RollingForecastDBRowChangeEventHandler RollingForecastDBRowChanging;
            
            public event RollingForecastDBRowChangeEventHandler RollingForecastDBRowChanged;
            
            public event RollingForecastDBRowChangeEventHandler RollingForecastDBRowDeleting;
            
            public event RollingForecastDBRowChangeEventHandler RollingForecastDBRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRollingForecastDBRow(RollingForecastDBRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RollingForecastDBRow AddRollingForecastDBRow(int ID, int SupplierID, System.DateTime MonthDate, int ProductID, double MonthN1ConfirmQty, double MonthN2ConfirmQty, double MonthN3ConfirmQty, double _3MonthBudgetQty, double YearCumBudgetQty) {
                RollingForecastDBRow rowRollingForecastDBRow = ((RollingForecastDBRow)(this.NewRow()));
                rowRollingForecastDBRow.ItemArray = new object[] {
                        ID,
                        SupplierID,
                        MonthDate,
                        ProductID,
                        MonthN1ConfirmQty,
                        MonthN2ConfirmQty,
                        MonthN3ConfirmQty,
                        _3MonthBudgetQty,
                        YearCumBudgetQty};
                this.Rows.Add(rowRollingForecastDBRow);
                return rowRollingForecastDBRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                RollingForecastDBDataTable cln = ((RollingForecastDBDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new RollingForecastDBDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnSupplierID = base.Columns["SupplierID"];
                this.columnMonthDate = base.Columns["MonthDate"];
                this.columnProductID = base.Columns["ProductID"];
                this.columnMonthN1ConfirmQty = base.Columns["MonthN1ConfirmQty"];
                this.columnMonthN2ConfirmQty = base.Columns["MonthN2ConfirmQty"];
                this.columnMonthN3ConfirmQty = base.Columns["MonthN3ConfirmQty"];
                this.column3MonthBudgetQty = base.Columns["3MonthBudgetQty"];
                this.columnYearCumBudgetQty = base.Columns["YearCumBudgetQty"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnSupplierID = new System.Data.DataColumn("SupplierID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupplierID);
                this.columnMonthDate = new System.Data.DataColumn("MonthDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMonthDate);
                this.columnProductID = new System.Data.DataColumn("ProductID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductID);
                this.columnMonthN1ConfirmQty = new System.Data.DataColumn("MonthN1ConfirmQty", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMonthN1ConfirmQty);
                this.columnMonthN2ConfirmQty = new System.Data.DataColumn("MonthN2ConfirmQty", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMonthN2ConfirmQty);
                this.columnMonthN3ConfirmQty = new System.Data.DataColumn("MonthN3ConfirmQty", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMonthN3ConfirmQty);
                this.column3MonthBudgetQty = new System.Data.DataColumn("3MonthBudgetQty", typeof(double), null, System.Data.MappingType.Element);
                this.column3MonthBudgetQty.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_3MonthBudgetQty");
                this.column3MonthBudgetQty.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_3MonthBudgetQtyColumn");
                this.column3MonthBudgetQty.ExtendedProperties.Add("Generator_UserColumnName", "3MonthBudgetQty");
                base.Columns.Add(this.column3MonthBudgetQty);
                this.columnYearCumBudgetQty = new System.Data.DataColumn("YearCumBudgetQty", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnYearCumBudgetQty);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RollingForecastDBRow NewRollingForecastDBRow() {
                return ((RollingForecastDBRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new RollingForecastDBRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(RollingForecastDBRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RollingForecastDBRowChanged != null)) {
                    this.RollingForecastDBRowChanged(this, new RollingForecastDBRowChangeEvent(((RollingForecastDBRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RollingForecastDBRowChanging != null)) {
                    this.RollingForecastDBRowChanging(this, new RollingForecastDBRowChangeEvent(((RollingForecastDBRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RollingForecastDBRowDeleted != null)) {
                    this.RollingForecastDBRowDeleted(this, new RollingForecastDBRowChangeEvent(((RollingForecastDBRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RollingForecastDBRowDeleting != null)) {
                    this.RollingForecastDBRowDeleting(this, new RollingForecastDBRowChangeEvent(((RollingForecastDBRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRollingForecastDBRow(RollingForecastDBRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DSRollingForecast ds = new DSRollingForecast();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RollingForecastDBDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SCMonthBudgetDBDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSupplierID;
            
            private System.Data.DataColumn columnProductID;
            
            private System.Data.DataColumn columnMonthDate;
            
            private System.Data.DataColumn columnBudgetQty;
            
            private System.Data.DataColumn columnConfirmQty;
            
            private System.Data.DataColumn columnAchieveQty;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SCMonthBudgetDBDataTable() {
                this.TableName = "SCMonthBudgetDB";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SCMonthBudgetDBDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SCMonthBudgetDBDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SupplierIDColumn {
                get {
                    return this.columnSupplierID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductIDColumn {
                get {
                    return this.columnProductID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MonthDateColumn {
                get {
                    return this.columnMonthDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BudgetQtyColumn {
                get {
                    return this.columnBudgetQty;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ConfirmQtyColumn {
                get {
                    return this.columnConfirmQty;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AchieveQtyColumn {
                get {
                    return this.columnAchieveQty;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SCMonthBudgetDBRow this[int index] {
                get {
                    return ((SCMonthBudgetDBRow)(this.Rows[index]));
                }
            }
            
            public event SCMonthBudgetDBRowChangeEventHandler SCMonthBudgetDBRowChanging;
            
            public event SCMonthBudgetDBRowChangeEventHandler SCMonthBudgetDBRowChanged;
            
            public event SCMonthBudgetDBRowChangeEventHandler SCMonthBudgetDBRowDeleting;
            
            public event SCMonthBudgetDBRowChangeEventHandler SCMonthBudgetDBRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSCMonthBudgetDBRow(SCMonthBudgetDBRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SCMonthBudgetDBRow AddSCMonthBudgetDBRow(int SupplierID, int ProductID, System.DateTime MonthDate, double BudgetQty, double ConfirmQty, double AchieveQty) {
                SCMonthBudgetDBRow rowSCMonthBudgetDBRow = ((SCMonthBudgetDBRow)(this.NewRow()));
                rowSCMonthBudgetDBRow.ItemArray = new object[] {
                        SupplierID,
                        ProductID,
                        MonthDate,
                        BudgetQty,
                        ConfirmQty,
                        AchieveQty};
                this.Rows.Add(rowSCMonthBudgetDBRow);
                return rowSCMonthBudgetDBRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SCMonthBudgetDBDataTable cln = ((SCMonthBudgetDBDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SCMonthBudgetDBDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSupplierID = base.Columns["SupplierID"];
                this.columnProductID = base.Columns["ProductID"];
                this.columnMonthDate = base.Columns["MonthDate"];
                this.columnBudgetQty = base.Columns["BudgetQty"];
                this.columnConfirmQty = base.Columns["ConfirmQty"];
                this.columnAchieveQty = base.Columns["AchieveQty"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSupplierID = new System.Data.DataColumn("SupplierID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupplierID);
                this.columnProductID = new System.Data.DataColumn("ProductID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductID);
                this.columnMonthDate = new System.Data.DataColumn("MonthDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMonthDate);
                this.columnBudgetQty = new System.Data.DataColumn("BudgetQty", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudgetQty);
                this.columnConfirmQty = new System.Data.DataColumn("ConfirmQty", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnConfirmQty);
                this.columnAchieveQty = new System.Data.DataColumn("AchieveQty", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAchieveQty);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SCMonthBudgetDBRow NewSCMonthBudgetDBRow() {
                return ((SCMonthBudgetDBRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SCMonthBudgetDBRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SCMonthBudgetDBRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SCMonthBudgetDBRowChanged != null)) {
                    this.SCMonthBudgetDBRowChanged(this, new SCMonthBudgetDBRowChangeEvent(((SCMonthBudgetDBRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SCMonthBudgetDBRowChanging != null)) {
                    this.SCMonthBudgetDBRowChanging(this, new SCMonthBudgetDBRowChangeEvent(((SCMonthBudgetDBRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SCMonthBudgetDBRowDeleted != null)) {
                    this.SCMonthBudgetDBRowDeleted(this, new SCMonthBudgetDBRowChangeEvent(((SCMonthBudgetDBRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SCMonthBudgetDBRowDeleting != null)) {
                    this.SCMonthBudgetDBRowDeleting(this, new SCMonthBudgetDBRowChangeEvent(((SCMonthBudgetDBRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSCMonthBudgetDBRow(SCMonthBudgetDBRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DSRollingForecast ds = new DSRollingForecast();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SCMonthBudgetDBDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RollingForcastUIDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnMAG;
            
            private System.Data.DataColumn columnProductCode;
            
            private System.Data.DataColumn columnBrand;
            
            private System.Data.DataColumn columnProductName;
            
            private System.Data.DataColumn columnConfirmN1Box;
            
            private System.Data.DataColumn columnConfirmN1Unit;
            
            private System.Data.DataColumn columnConfirmN2Box;
            
            private System.Data.DataColumn columnConfirmN2Unit;
            
            private System.Data.DataColumn columnConfirmN3Box;
            
            private System.Data.DataColumn columnConfirmN3Unit;
            
            private System.Data.DataColumn columnTotalConfirmOrderedUnit;
            
            private System.Data.DataColumn columnTotalConfirmCalcutateBox;
            
            private System.Data.DataColumn columnTotalConfirmCalcutateUnit;
            
            private System.Data.DataColumn column3MonthBudgetUnit;
            
            private System.Data.DataColumn column3MonthDeviationUnit;
            
            private System.Data.DataColumn column3MonthDeviationUnitPercent;
            
            private System.Data.DataColumn column3MonthBudgetValue;
            
            private System.Data.DataColumn column3MonthForecastValue;
            
            private System.Data.DataColumn column3MonthDeviationValue;
            
            private System.Data.DataColumn column3MonthDeviationValuePercent;
            
            private System.Data.DataColumn columnYearBudgetUnit;
            
            private System.Data.DataColumn columnAchCumN2Unit;
            
            private System.Data.DataColumn columnAchN1Unit;
            
            private System.Data.DataColumn columnAchCumAllUnit;
            
            private System.Data.DataColumn columnYearDeviationUnit;
            
            private System.Data.DataColumn columnYearDeviationUnitPercent;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RollingForcastUIDataTable() {
                this.TableName = "RollingForcastUI";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RollingForcastUIDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RollingForcastUIDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MAGColumn {
                get {
                    return this.columnMAG;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductCodeColumn {
                get {
                    return this.columnProductCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BrandColumn {
                get {
                    return this.columnBrand;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductNameColumn {
                get {
                    return this.columnProductName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ConfirmN1BoxColumn {
                get {
                    return this.columnConfirmN1Box;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ConfirmN1UnitColumn {
                get {
                    return this.columnConfirmN1Unit;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ConfirmN2BoxColumn {
                get {
                    return this.columnConfirmN2Box;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ConfirmN2UnitColumn {
                get {
                    return this.columnConfirmN2Unit;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ConfirmN3BoxColumn {
                get {
                    return this.columnConfirmN3Box;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ConfirmN3UnitColumn {
                get {
                    return this.columnConfirmN3Unit;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TotalConfirmOrderedUnitColumn {
                get {
                    return this.columnTotalConfirmOrderedUnit;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TotalConfirmCalcutateBoxColumn {
                get {
                    return this.columnTotalConfirmCalcutateBox;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TotalConfirmCalcutateUnitColumn {
                get {
                    return this.columnTotalConfirmCalcutateUnit;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _3MonthBudgetUnitColumn {
                get {
                    return this.column3MonthBudgetUnit;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _3MonthDeviationUnitColumn {
                get {
                    return this.column3MonthDeviationUnit;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _3MonthDeviationUnitPercentColumn {
                get {
                    return this.column3MonthDeviationUnitPercent;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _3MonthBudgetValueColumn {
                get {
                    return this.column3MonthBudgetValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _3MonthForecastValueColumn {
                get {
                    return this.column3MonthForecastValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _3MonthDeviationValueColumn {
                get {
                    return this.column3MonthDeviationValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _3MonthDeviationValuePercentColumn {
                get {
                    return this.column3MonthDeviationValuePercent;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn YearBudgetUnitColumn {
                get {
                    return this.columnYearBudgetUnit;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AchCumN2UnitColumn {
                get {
                    return this.columnAchCumN2Unit;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AchN1UnitColumn {
                get {
                    return this.columnAchN1Unit;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AchCumAllUnitColumn {
                get {
                    return this.columnAchCumAllUnit;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn YearDeviationUnitColumn {
                get {
                    return this.columnYearDeviationUnit;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn YearDeviationUnitPercentColumn {
                get {
                    return this.columnYearDeviationUnitPercent;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RollingForcastUIRow this[int index] {
                get {
                    return ((RollingForcastUIRow)(this.Rows[index]));
                }
            }
            
            public event RollingForcastUIRowChangeEventHandler RollingForcastUIRowChanging;
            
            public event RollingForcastUIRowChangeEventHandler RollingForcastUIRowChanged;
            
            public event RollingForcastUIRowChangeEventHandler RollingForcastUIRowDeleting;
            
            public event RollingForcastUIRowChangeEventHandler RollingForcastUIRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRollingForcastUIRow(RollingForcastUIRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RollingForcastUIRow AddRollingForcastUIRow(
                        string MAG, 
                        string ProductCode, 
                        string Brand, 
                        string ProductName, 
                        string ConfirmN1Box, 
                        string ConfirmN1Unit, 
                        string ConfirmN2Box, 
                        string ConfirmN2Unit, 
                        string ConfirmN3Box, 
                        string ConfirmN3Unit, 
                        string TotalConfirmOrderedUnit, 
                        string TotalConfirmCalcutateBox, 
                        string TotalConfirmCalcutateUnit, 
                        string _3MonthBudgetUnit, 
                        string _3MonthDeviationUnit, 
                        string _3MonthDeviationUnitPercent, 
                        string _3MonthBudgetValue, 
                        string _3MonthForecastValue, 
                        string _3MonthDeviationValue, 
                        string _3MonthDeviationValuePercent, 
                        string YearBudgetUnit, 
                        string AchCumN2Unit, 
                        string AchN1Unit, 
                        string AchCumAllUnit, 
                        string YearDeviationUnit, 
                        string YearDeviationUnitPercent) {
                RollingForcastUIRow rowRollingForcastUIRow = ((RollingForcastUIRow)(this.NewRow()));
                rowRollingForcastUIRow.ItemArray = new object[] {
                        MAG,
                        ProductCode,
                        Brand,
                        ProductName,
                        ConfirmN1Box,
                        ConfirmN1Unit,
                        ConfirmN2Box,
                        ConfirmN2Unit,
                        ConfirmN3Box,
                        ConfirmN3Unit,
                        TotalConfirmOrderedUnit,
                        TotalConfirmCalcutateBox,
                        TotalConfirmCalcutateUnit,
                        _3MonthBudgetUnit,
                        _3MonthDeviationUnit,
                        _3MonthDeviationUnitPercent,
                        _3MonthBudgetValue,
                        _3MonthForecastValue,
                        _3MonthDeviationValue,
                        _3MonthDeviationValuePercent,
                        YearBudgetUnit,
                        AchCumN2Unit,
                        AchN1Unit,
                        AchCumAllUnit,
                        YearDeviationUnit,
                        YearDeviationUnitPercent};
                this.Rows.Add(rowRollingForcastUIRow);
                return rowRollingForcastUIRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                RollingForcastUIDataTable cln = ((RollingForcastUIDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new RollingForcastUIDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMAG = base.Columns["MAG"];
                this.columnProductCode = base.Columns["ProductCode"];
                this.columnBrand = base.Columns["Brand"];
                this.columnProductName = base.Columns["ProductName"];
                this.columnConfirmN1Box = base.Columns["ConfirmN1Box"];
                this.columnConfirmN1Unit = base.Columns["ConfirmN1Unit"];
                this.columnConfirmN2Box = base.Columns["ConfirmN2Box"];
                this.columnConfirmN2Unit = base.Columns["ConfirmN2Unit"];
                this.columnConfirmN3Box = base.Columns["ConfirmN3Box"];
                this.columnConfirmN3Unit = base.Columns["ConfirmN3Unit"];
                this.columnTotalConfirmOrderedUnit = base.Columns["TotalConfirmOrderedUnit"];
                this.columnTotalConfirmCalcutateBox = base.Columns["TotalConfirmCalcutateBox"];
                this.columnTotalConfirmCalcutateUnit = base.Columns["TotalConfirmCalcutateUnit"];
                this.column3MonthBudgetUnit = base.Columns["3MonthBudgetUnit"];
                this.column3MonthDeviationUnit = base.Columns["3MonthDeviationUnit"];
                this.column3MonthDeviationUnitPercent = base.Columns["3MonthDeviationUnitPercent"];
                this.column3MonthBudgetValue = base.Columns["3MonthBudgetValue"];
                this.column3MonthForecastValue = base.Columns["3MonthForecastValue"];
                this.column3MonthDeviationValue = base.Columns["3MonthDeviationValue"];
                this.column3MonthDeviationValuePercent = base.Columns["3MonthDeviationValuePercent"];
                this.columnYearBudgetUnit = base.Columns["YearBudgetUnit"];
                this.columnAchCumN2Unit = base.Columns["AchCumN2Unit"];
                this.columnAchN1Unit = base.Columns["AchN1Unit"];
                this.columnAchCumAllUnit = base.Columns["AchCumAllUnit"];
                this.columnYearDeviationUnit = base.Columns["YearDeviationUnit"];
                this.columnYearDeviationUnitPercent = base.Columns["YearDeviationUnitPercent"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMAG = new System.Data.DataColumn("MAG", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMAG);
                this.columnProductCode = new System.Data.DataColumn("ProductCode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductCode);
                this.columnBrand = new System.Data.DataColumn("Brand", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBrand);
                this.columnProductName = new System.Data.DataColumn("ProductName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductName);
                this.columnConfirmN1Box = new System.Data.DataColumn("ConfirmN1Box", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnConfirmN1Box);
                this.columnConfirmN1Unit = new System.Data.DataColumn("ConfirmN1Unit", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnConfirmN1Unit);
                this.columnConfirmN2Box = new System.Data.DataColumn("ConfirmN2Box", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnConfirmN2Box);
                this.columnConfirmN2Unit = new System.Data.DataColumn("ConfirmN2Unit", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnConfirmN2Unit);
                this.columnConfirmN3Box = new System.Data.DataColumn("ConfirmN3Box", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnConfirmN3Box);
                this.columnConfirmN3Unit = new System.Data.DataColumn("ConfirmN3Unit", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnConfirmN3Unit);
                this.columnTotalConfirmOrderedUnit = new System.Data.DataColumn("TotalConfirmOrderedUnit", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalConfirmOrderedUnit);
                this.columnTotalConfirmCalcutateBox = new System.Data.DataColumn("TotalConfirmCalcutateBox", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalConfirmCalcutateBox);
                this.columnTotalConfirmCalcutateUnit = new System.Data.DataColumn("TotalConfirmCalcutateUnit", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalConfirmCalcutateUnit);
                this.column3MonthBudgetUnit = new System.Data.DataColumn("3MonthBudgetUnit", typeof(string), null, System.Data.MappingType.Element);
                this.column3MonthBudgetUnit.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_3MonthBudgetUnit");
                this.column3MonthBudgetUnit.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_3MonthBudgetUnitColumn");
                this.column3MonthBudgetUnit.ExtendedProperties.Add("Generator_UserColumnName", "3MonthBudgetUnit");
                base.Columns.Add(this.column3MonthBudgetUnit);
                this.column3MonthDeviationUnit = new System.Data.DataColumn("3MonthDeviationUnit", typeof(string), null, System.Data.MappingType.Element);
                this.column3MonthDeviationUnit.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_3MonthDeviationUnit");
                this.column3MonthDeviationUnit.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_3MonthDeviationUnitColumn");
                this.column3MonthDeviationUnit.ExtendedProperties.Add("Generator_UserColumnName", "3MonthDeviationUnit");
                base.Columns.Add(this.column3MonthDeviationUnit);
                this.column3MonthDeviationUnitPercent = new System.Data.DataColumn("3MonthDeviationUnitPercent", typeof(string), null, System.Data.MappingType.Element);
                this.column3MonthDeviationUnitPercent.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_3MonthDeviationUnitPercent");
                this.column3MonthDeviationUnitPercent.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_3MonthDeviationUnitPercentColumn");
                this.column3MonthDeviationUnitPercent.ExtendedProperties.Add("Generator_UserColumnName", "3MonthDeviationUnitPercent");
                base.Columns.Add(this.column3MonthDeviationUnitPercent);
                this.column3MonthBudgetValue = new System.Data.DataColumn("3MonthBudgetValue", typeof(string), null, System.Data.MappingType.Element);
                this.column3MonthBudgetValue.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_3MonthBudgetValue");
                this.column3MonthBudgetValue.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_3MonthBudgetValueColumn");
                this.column3MonthBudgetValue.ExtendedProperties.Add("Generator_UserColumnName", "3MonthBudgetValue");
                base.Columns.Add(this.column3MonthBudgetValue);
                this.column3MonthForecastValue = new System.Data.DataColumn("3MonthForecastValue", typeof(string), null, System.Data.MappingType.Element);
                this.column3MonthForecastValue.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_3MonthForecastValue");
                this.column3MonthForecastValue.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_3MonthForecastValueColumn");
                this.column3MonthForecastValue.ExtendedProperties.Add("Generator_UserColumnName", "3MonthForecastValue");
                base.Columns.Add(this.column3MonthForecastValue);
                this.column3MonthDeviationValue = new System.Data.DataColumn("3MonthDeviationValue", typeof(string), null, System.Data.MappingType.Element);
                this.column3MonthDeviationValue.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_3MonthDeviationValue");
                this.column3MonthDeviationValue.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_3MonthDeviationValueColumn");
                this.column3MonthDeviationValue.ExtendedProperties.Add("Generator_UserColumnName", "3MonthDeviationValue");
                base.Columns.Add(this.column3MonthDeviationValue);
                this.column3MonthDeviationValuePercent = new System.Data.DataColumn("3MonthDeviationValuePercent", typeof(string), null, System.Data.MappingType.Element);
                this.column3MonthDeviationValuePercent.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_3MonthDeviationValuePercent");
                this.column3MonthDeviationValuePercent.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_3MonthDeviationValuePercentColumn");
                this.column3MonthDeviationValuePercent.ExtendedProperties.Add("Generator_UserColumnName", "3MonthDeviationValuePercent");
                base.Columns.Add(this.column3MonthDeviationValuePercent);
                this.columnYearBudgetUnit = new System.Data.DataColumn("YearBudgetUnit", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnYearBudgetUnit);
                this.columnAchCumN2Unit = new System.Data.DataColumn("AchCumN2Unit", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAchCumN2Unit);
                this.columnAchN1Unit = new System.Data.DataColumn("AchN1Unit", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAchN1Unit);
                this.columnAchCumAllUnit = new System.Data.DataColumn("AchCumAllUnit", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAchCumAllUnit);
                this.columnYearDeviationUnit = new System.Data.DataColumn("YearDeviationUnit", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnYearDeviationUnit);
                this.columnYearDeviationUnitPercent = new System.Data.DataColumn("YearDeviationUnitPercent", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnYearDeviationUnitPercent);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RollingForcastUIRow NewRollingForcastUIRow() {
                return ((RollingForcastUIRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new RollingForcastUIRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(RollingForcastUIRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RollingForcastUIRowChanged != null)) {
                    this.RollingForcastUIRowChanged(this, new RollingForcastUIRowChangeEvent(((RollingForcastUIRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RollingForcastUIRowChanging != null)) {
                    this.RollingForcastUIRowChanging(this, new RollingForcastUIRowChangeEvent(((RollingForcastUIRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RollingForcastUIRowDeleted != null)) {
                    this.RollingForcastUIRowDeleted(this, new RollingForcastUIRowChangeEvent(((RollingForcastUIRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RollingForcastUIRowDeleting != null)) {
                    this.RollingForcastUIRowDeleting(this, new RollingForcastUIRowChangeEvent(((RollingForcastUIRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRollingForcastUIRow(RollingForcastUIRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DSRollingForecast ds = new DSRollingForecast();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RollingForcastUIDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SupplierDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSupplierID;
            
            private System.Data.DataColumn columnSupplierCode;
            
            private System.Data.DataColumn columnSupplierName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SupplierDataTable() {
                this.TableName = "Supplier";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SupplierDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SupplierDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SupplierIDColumn {
                get {
                    return this.columnSupplierID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SupplierCodeColumn {
                get {
                    return this.columnSupplierCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SupplierNameColumn {
                get {
                    return this.columnSupplierName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SupplierRow this[int index] {
                get {
                    return ((SupplierRow)(this.Rows[index]));
                }
            }
            
            public event SupplierRowChangeEventHandler SupplierRowChanging;
            
            public event SupplierRowChangeEventHandler SupplierRowChanged;
            
            public event SupplierRowChangeEventHandler SupplierRowDeleting;
            
            public event SupplierRowChangeEventHandler SupplierRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSupplierRow(SupplierRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SupplierRow AddSupplierRow(int SupplierID, string SupplierCode, string SupplierName) {
                SupplierRow rowSupplierRow = ((SupplierRow)(this.NewRow()));
                rowSupplierRow.ItemArray = new object[] {
                        SupplierID,
                        SupplierCode,
                        SupplierName};
                this.Rows.Add(rowSupplierRow);
                return rowSupplierRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SupplierDataTable cln = ((SupplierDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SupplierDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSupplierID = base.Columns["SupplierID"];
                this.columnSupplierCode = base.Columns["SupplierCode"];
                this.columnSupplierName = base.Columns["SupplierName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSupplierID = new System.Data.DataColumn("SupplierID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupplierID);
                this.columnSupplierCode = new System.Data.DataColumn("SupplierCode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupplierCode);
                this.columnSupplierName = new System.Data.DataColumn("SupplierName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupplierName);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SupplierRow NewSupplierRow() {
                return ((SupplierRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SupplierRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SupplierRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SupplierRowChanged != null)) {
                    this.SupplierRowChanged(this, new SupplierRowChangeEvent(((SupplierRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SupplierRowChanging != null)) {
                    this.SupplierRowChanging(this, new SupplierRowChangeEvent(((SupplierRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SupplierRowDeleted != null)) {
                    this.SupplierRowDeleted(this, new SupplierRowChangeEvent(((SupplierRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SupplierRowDeleting != null)) {
                    this.SupplierRowDeleting(this, new SupplierRowChangeEvent(((SupplierRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSupplierRow(SupplierRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DSRollingForecast ds = new DSRollingForecast();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SupplierDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProductDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnProductID;
            
            private System.Data.DataColumn columnProductCode;
            
            private System.Data.DataColumn columnProductName;
            
            private System.Data.DataColumn columnBrand;
            
            private System.Data.DataColumn columnAG;
            
            private System.Data.DataColumn columnASG;
            
            private System.Data.DataColumn columnMAG;
            
            private System.Data.DataColumn columnMOQ;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductDataTable() {
                this.TableName = "Product";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProductDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProductDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductIDColumn {
                get {
                    return this.columnProductID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductCodeColumn {
                get {
                    return this.columnProductCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductNameColumn {
                get {
                    return this.columnProductName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BrandColumn {
                get {
                    return this.columnBrand;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AGColumn {
                get {
                    return this.columnAG;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ASGColumn {
                get {
                    return this.columnASG;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MAGColumn {
                get {
                    return this.columnMAG;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MOQColumn {
                get {
                    return this.columnMOQ;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow this[int index] {
                get {
                    return ((ProductRow)(this.Rows[index]));
                }
            }
            
            public event ProductRowChangeEventHandler ProductRowChanging;
            
            public event ProductRowChangeEventHandler ProductRowChanged;
            
            public event ProductRowChangeEventHandler ProductRowDeleting;
            
            public event ProductRowChangeEventHandler ProductRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProductRow(ProductRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow AddProductRow(string ProductID, string ProductCode, string ProductName, string Brand, string AG, string ASG, string MAG, string MOQ) {
                ProductRow rowProductRow = ((ProductRow)(this.NewRow()));
                rowProductRow.ItemArray = new object[] {
                        ProductID,
                        ProductCode,
                        ProductName,
                        Brand,
                        AG,
                        ASG,
                        MAG,
                        MOQ};
                this.Rows.Add(rowProductRow);
                return rowProductRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ProductDataTable cln = ((ProductDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ProductDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProductID = base.Columns["ProductID"];
                this.columnProductCode = base.Columns["ProductCode"];
                this.columnProductName = base.Columns["ProductName"];
                this.columnBrand = base.Columns["Brand"];
                this.columnAG = base.Columns["AG"];
                this.columnASG = base.Columns["ASG"];
                this.columnMAG = base.Columns["MAG"];
                this.columnMOQ = base.Columns["MOQ"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProductID = new System.Data.DataColumn("ProductID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductID);
                this.columnProductCode = new System.Data.DataColumn("ProductCode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductCode);
                this.columnProductName = new System.Data.DataColumn("ProductName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductName);
                this.columnBrand = new System.Data.DataColumn("Brand", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBrand);
                this.columnAG = new System.Data.DataColumn("AG", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAG);
                this.columnASG = new System.Data.DataColumn("ASG", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnASG);
                this.columnMAG = new System.Data.DataColumn("MAG", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMAG);
                this.columnMOQ = new System.Data.DataColumn("MOQ", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMOQ);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow NewProductRow() {
                return ((ProductRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ProductRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ProductRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProductRowChanged != null)) {
                    this.ProductRowChanged(this, new ProductRowChangeEvent(((ProductRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProductRowChanging != null)) {
                    this.ProductRowChanging(this, new ProductRowChangeEvent(((ProductRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProductRowDeleted != null)) {
                    this.ProductRowDeleted(this, new ProductRowChangeEvent(((ProductRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProductRowDeleting != null)) {
                    this.ProductRowDeleting(this, new ProductRowChangeEvent(((ProductRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProductRow(ProductRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DSRollingForecast ds = new DSRollingForecast();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProductDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RollingForecastDBRow : System.Data.DataRow {
            
            private RollingForecastDBDataTable tableRollingForecastDB;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RollingForecastDBRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRollingForecastDB = ((RollingForecastDBDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    try {
                        return ((int)(this[this.tableRollingForecastDB.IDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ID\' in table \'RollingForecastDB\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRollingForecastDB.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SupplierID {
                get {
                    try {
                        return ((int)(this[this.tableRollingForecastDB.SupplierIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SupplierID\' in table \'RollingForecastDB\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRollingForecastDB.SupplierIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime MonthDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableRollingForecastDB.MonthDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MonthDate\' in table \'RollingForecastDB\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRollingForecastDB.MonthDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProductID {
                get {
                    try {
                        return ((int)(this[this.tableRollingForecastDB.ProductIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProductID\' in table \'RollingForecastDB\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRollingForecastDB.ProductIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MonthN1ConfirmQty {
                get {
                    try {
                        return ((double)(this[this.tableRollingForecastDB.MonthN1ConfirmQtyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MonthN1ConfirmQty\' in table \'RollingForecastDB\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRollingForecastDB.MonthN1ConfirmQtyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MonthN2ConfirmQty {
                get {
                    try {
                        return ((double)(this[this.tableRollingForecastDB.MonthN2ConfirmQtyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MonthN2ConfirmQty\' in table \'RollingForecastDB\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRollingForecastDB.MonthN2ConfirmQtyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MonthN3ConfirmQty {
                get {
                    try {
                        return ((double)(this[this.tableRollingForecastDB.MonthN3ConfirmQtyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MonthN3ConfirmQty\' in table \'RollingForecastDB\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRollingForecastDB.MonthN3ConfirmQtyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double _3MonthBudgetQty {
                get {
                    try {
                        return ((double)(this[this.tableRollingForecastDB._3MonthBudgetQtyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'3MonthBudgetQty\' in table \'RollingForecastDB\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRollingForecastDB._3MonthBudgetQtyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double YearCumBudgetQty {
                get {
                    try {
                        return ((double)(this[this.tableRollingForecastDB.YearCumBudgetQtyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'YearCumBudgetQty\' in table \'RollingForecastDB\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRollingForecastDB.YearCumBudgetQtyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDNull() {
                return this.IsNull(this.tableRollingForecastDB.IDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDNull() {
                this[this.tableRollingForecastDB.IDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSupplierIDNull() {
                return this.IsNull(this.tableRollingForecastDB.SupplierIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSupplierIDNull() {
                this[this.tableRollingForecastDB.SupplierIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMonthDateNull() {
                return this.IsNull(this.tableRollingForecastDB.MonthDateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMonthDateNull() {
                this[this.tableRollingForecastDB.MonthDateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductIDNull() {
                return this.IsNull(this.tableRollingForecastDB.ProductIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductIDNull() {
                this[this.tableRollingForecastDB.ProductIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMonthN1ConfirmQtyNull() {
                return this.IsNull(this.tableRollingForecastDB.MonthN1ConfirmQtyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMonthN1ConfirmQtyNull() {
                this[this.tableRollingForecastDB.MonthN1ConfirmQtyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMonthN2ConfirmQtyNull() {
                return this.IsNull(this.tableRollingForecastDB.MonthN2ConfirmQtyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMonthN2ConfirmQtyNull() {
                this[this.tableRollingForecastDB.MonthN2ConfirmQtyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMonthN3ConfirmQtyNull() {
                return this.IsNull(this.tableRollingForecastDB.MonthN3ConfirmQtyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMonthN3ConfirmQtyNull() {
                this[this.tableRollingForecastDB.MonthN3ConfirmQtyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_3MonthBudgetQtyNull() {
                return this.IsNull(this.tableRollingForecastDB._3MonthBudgetQtyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_3MonthBudgetQtyNull() {
                this[this.tableRollingForecastDB._3MonthBudgetQtyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYearCumBudgetQtyNull() {
                return this.IsNull(this.tableRollingForecastDB.YearCumBudgetQtyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYearCumBudgetQtyNull() {
                this[this.tableRollingForecastDB.YearCumBudgetQtyColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SCMonthBudgetDBRow : System.Data.DataRow {
            
            private SCMonthBudgetDBDataTable tableSCMonthBudgetDB;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SCMonthBudgetDBRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSCMonthBudgetDB = ((SCMonthBudgetDBDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SupplierID {
                get {
                    try {
                        return ((int)(this[this.tableSCMonthBudgetDB.SupplierIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SupplierID\' in table \'SCMonthBudgetDB\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSCMonthBudgetDB.SupplierIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProductID {
                get {
                    try {
                        return ((int)(this[this.tableSCMonthBudgetDB.ProductIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProductID\' in table \'SCMonthBudgetDB\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSCMonthBudgetDB.ProductIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime MonthDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableSCMonthBudgetDB.MonthDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MonthDate\' in table \'SCMonthBudgetDB\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSCMonthBudgetDB.MonthDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double BudgetQty {
                get {
                    try {
                        return ((double)(this[this.tableSCMonthBudgetDB.BudgetQtyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BudgetQty\' in table \'SCMonthBudgetDB\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSCMonthBudgetDB.BudgetQtyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ConfirmQty {
                get {
                    try {
                        return ((double)(this[this.tableSCMonthBudgetDB.ConfirmQtyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ConfirmQty\' in table \'SCMonthBudgetDB\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSCMonthBudgetDB.ConfirmQtyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double AchieveQty {
                get {
                    try {
                        return ((double)(this[this.tableSCMonthBudgetDB.AchieveQtyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AchieveQty\' in table \'SCMonthBudgetDB\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSCMonthBudgetDB.AchieveQtyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSupplierIDNull() {
                return this.IsNull(this.tableSCMonthBudgetDB.SupplierIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSupplierIDNull() {
                this[this.tableSCMonthBudgetDB.SupplierIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductIDNull() {
                return this.IsNull(this.tableSCMonthBudgetDB.ProductIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductIDNull() {
                this[this.tableSCMonthBudgetDB.ProductIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMonthDateNull() {
                return this.IsNull(this.tableSCMonthBudgetDB.MonthDateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMonthDateNull() {
                this[this.tableSCMonthBudgetDB.MonthDateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBudgetQtyNull() {
                return this.IsNull(this.tableSCMonthBudgetDB.BudgetQtyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBudgetQtyNull() {
                this[this.tableSCMonthBudgetDB.BudgetQtyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConfirmQtyNull() {
                return this.IsNull(this.tableSCMonthBudgetDB.ConfirmQtyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConfirmQtyNull() {
                this[this.tableSCMonthBudgetDB.ConfirmQtyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAchieveQtyNull() {
                return this.IsNull(this.tableSCMonthBudgetDB.AchieveQtyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAchieveQtyNull() {
                this[this.tableSCMonthBudgetDB.AchieveQtyColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RollingForcastUIRow : System.Data.DataRow {
            
            private RollingForcastUIDataTable tableRollingForcastUI;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RollingForcastUIRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRollingForcastUI = ((RollingForcastUIDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MAG {
                get {
                    try {
                        return ((string)(this[this.tableRollingForcastUI.MAGColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MAG\' in table \'RollingForcastUI\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRollingForcastUI.MAGColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProductCode {
                get {
                    try {
                        return ((string)(this[this.tableRollingForcastUI.ProductCodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProductCode\' in table \'RollingForcastUI\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRollingForcastUI.ProductCodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Brand {
                get {
                    try {
                        return ((string)(this[this.tableRollingForcastUI.BrandColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Brand\' in table \'RollingForcastUI\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRollingForcastUI.BrandColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProductName {
                get {
                    try {
                        return ((string)(this[this.tableRollingForcastUI.ProductNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProductName\' in table \'RollingForcastUI\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRollingForcastUI.ProductNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConfirmN1Box {
                get {
                    try {
                        return ((string)(this[this.tableRollingForcastUI.ConfirmN1BoxColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ConfirmN1Box\' in table \'RollingForcastUI\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRollingForcastUI.ConfirmN1BoxColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConfirmN1Unit {
                get {
                    try {
                        return ((string)(this[this.tableRollingForcastUI.ConfirmN1UnitColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ConfirmN1Unit\' in table \'RollingForcastUI\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRollingForcastUI.ConfirmN1UnitColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConfirmN2Box {
                get {
                    try {
                        return ((string)(this[this.tableRollingForcastUI.ConfirmN2BoxColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ConfirmN2Box\' in table \'RollingForcastUI\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRollingForcastUI.ConfirmN2BoxColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConfirmN2Unit {
                get {
                    try {
                        return ((string)(this[this.tableRollingForcastUI.ConfirmN2UnitColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ConfirmN2Unit\' in table \'RollingForcastUI\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRollingForcastUI.ConfirmN2UnitColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConfirmN3Box {
                get {
                    try {
                        return ((string)(this[this.tableRollingForcastUI.ConfirmN3BoxColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ConfirmN3Box\' in table \'RollingForcastUI\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRollingForcastUI.ConfirmN3BoxColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConfirmN3Unit {
                get {
                    try {
                        return ((string)(this[this.tableRollingForcastUI.ConfirmN3UnitColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ConfirmN3Unit\' in table \'RollingForcastUI\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRollingForcastUI.ConfirmN3UnitColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalConfirmOrderedUnit {
                get {
                    try {
                        return ((string)(this[this.tableRollingForcastUI.TotalConfirmOrderedUnitColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TotalConfirmOrderedUnit\' in table \'RollingForcastUI\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableRollingForcastUI.TotalConfirmOrderedUnitColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalConfirmCalcutateBox {
                get {
                    try {
                        return ((string)(this[this.tableRollingForcastUI.TotalConfirmCalcutateBoxColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TotalConfirmCalcutateBox\' in table \'RollingForcastUI\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableRollingForcastUI.TotalConfirmCalcutateBoxColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalConfirmCalcutateUnit {
                get {
                    try {
                        return ((string)(this[this.tableRollingForcastUI.TotalConfirmCalcutateUnitColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TotalConfirmCalcutateUnit\' in table \'RollingForcastUI\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableRollingForcastUI.TotalConfirmCalcutateUnitColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _3MonthBudgetUnit {
                get {
                    try {
                        return ((string)(this[this.tableRollingForcastUI._3MonthBudgetUnitColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'3MonthBudgetUnit\' in table \'RollingForcastUI\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRollingForcastUI._3MonthBudgetUnitColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _3MonthDeviationUnit {
                get {
                    try {
                        return ((string)(this[this.tableRollingForcastUI._3MonthDeviationUnitColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'3MonthDeviationUnit\' in table \'RollingForcastUI\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableRollingForcastUI._3MonthDeviationUnitColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _3MonthDeviationUnitPercent {
                get {
                    try {
                        return ((string)(this[this.tableRollingForcastUI._3MonthDeviationUnitPercentColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'3MonthDeviationUnitPercent\' in table \'RollingForcastUI\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableRollingForcastUI._3MonthDeviationUnitPercentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _3MonthBudgetValue {
                get {
                    try {
                        return ((string)(this[this.tableRollingForcastUI._3MonthBudgetValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'3MonthBudgetValue\' in table \'RollingForcastUI\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRollingForcastUI._3MonthBudgetValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _3MonthForecastValue {
                get {
                    try {
                        return ((string)(this[this.tableRollingForcastUI._3MonthForecastValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'3MonthForecastValue\' in table \'RollingForcastUI\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableRollingForcastUI._3MonthForecastValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _3MonthDeviationValue {
                get {
                    try {
                        return ((string)(this[this.tableRollingForcastUI._3MonthDeviationValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'3MonthDeviationValue\' in table \'RollingForcastUI\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableRollingForcastUI._3MonthDeviationValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _3MonthDeviationValuePercent {
                get {
                    try {
                        return ((string)(this[this.tableRollingForcastUI._3MonthDeviationValuePercentColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'3MonthDeviationValuePercent\' in table \'RollingForcastUI\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableRollingForcastUI._3MonthDeviationValuePercentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string YearBudgetUnit {
                get {
                    try {
                        return ((string)(this[this.tableRollingForcastUI.YearBudgetUnitColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'YearBudgetUnit\' in table \'RollingForcastUI\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRollingForcastUI.YearBudgetUnitColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AchCumN2Unit {
                get {
                    try {
                        return ((string)(this[this.tableRollingForcastUI.AchCumN2UnitColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AchCumN2Unit\' in table \'RollingForcastUI\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRollingForcastUI.AchCumN2UnitColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AchN1Unit {
                get {
                    try {
                        return ((string)(this[this.tableRollingForcastUI.AchN1UnitColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AchN1Unit\' in table \'RollingForcastUI\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRollingForcastUI.AchN1UnitColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AchCumAllUnit {
                get {
                    try {
                        return ((string)(this[this.tableRollingForcastUI.AchCumAllUnitColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AchCumAllUnit\' in table \'RollingForcastUI\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRollingForcastUI.AchCumAllUnitColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string YearDeviationUnit {
                get {
                    try {
                        return ((string)(this[this.tableRollingForcastUI.YearDeviationUnitColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'YearDeviationUnit\' in table \'RollingForcastUI\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRollingForcastUI.YearDeviationUnitColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string YearDeviationUnitPercent {
                get {
                    try {
                        return ((string)(this[this.tableRollingForcastUI.YearDeviationUnitPercentColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'YearDeviationUnitPercent\' in table \'RollingForcastUI\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableRollingForcastUI.YearDeviationUnitPercentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMAGNull() {
                return this.IsNull(this.tableRollingForcastUI.MAGColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMAGNull() {
                this[this.tableRollingForcastUI.MAGColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductCodeNull() {
                return this.IsNull(this.tableRollingForcastUI.ProductCodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductCodeNull() {
                this[this.tableRollingForcastUI.ProductCodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBrandNull() {
                return this.IsNull(this.tableRollingForcastUI.BrandColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBrandNull() {
                this[this.tableRollingForcastUI.BrandColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductNameNull() {
                return this.IsNull(this.tableRollingForcastUI.ProductNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductNameNull() {
                this[this.tableRollingForcastUI.ProductNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConfirmN1BoxNull() {
                return this.IsNull(this.tableRollingForcastUI.ConfirmN1BoxColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConfirmN1BoxNull() {
                this[this.tableRollingForcastUI.ConfirmN1BoxColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConfirmN1UnitNull() {
                return this.IsNull(this.tableRollingForcastUI.ConfirmN1UnitColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConfirmN1UnitNull() {
                this[this.tableRollingForcastUI.ConfirmN1UnitColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConfirmN2BoxNull() {
                return this.IsNull(this.tableRollingForcastUI.ConfirmN2BoxColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConfirmN2BoxNull() {
                this[this.tableRollingForcastUI.ConfirmN2BoxColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConfirmN2UnitNull() {
                return this.IsNull(this.tableRollingForcastUI.ConfirmN2UnitColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConfirmN2UnitNull() {
                this[this.tableRollingForcastUI.ConfirmN2UnitColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConfirmN3BoxNull() {
                return this.IsNull(this.tableRollingForcastUI.ConfirmN3BoxColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConfirmN3BoxNull() {
                this[this.tableRollingForcastUI.ConfirmN3BoxColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConfirmN3UnitNull() {
                return this.IsNull(this.tableRollingForcastUI.ConfirmN3UnitColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConfirmN3UnitNull() {
                this[this.tableRollingForcastUI.ConfirmN3UnitColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalConfirmOrderedUnitNull() {
                return this.IsNull(this.tableRollingForcastUI.TotalConfirmOrderedUnitColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalConfirmOrderedUnitNull() {
                this[this.tableRollingForcastUI.TotalConfirmOrderedUnitColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalConfirmCalcutateBoxNull() {
                return this.IsNull(this.tableRollingForcastUI.TotalConfirmCalcutateBoxColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalConfirmCalcutateBoxNull() {
                this[this.tableRollingForcastUI.TotalConfirmCalcutateBoxColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalConfirmCalcutateUnitNull() {
                return this.IsNull(this.tableRollingForcastUI.TotalConfirmCalcutateUnitColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalConfirmCalcutateUnitNull() {
                this[this.tableRollingForcastUI.TotalConfirmCalcutateUnitColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_3MonthBudgetUnitNull() {
                return this.IsNull(this.tableRollingForcastUI._3MonthBudgetUnitColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_3MonthBudgetUnitNull() {
                this[this.tableRollingForcastUI._3MonthBudgetUnitColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_3MonthDeviationUnitNull() {
                return this.IsNull(this.tableRollingForcastUI._3MonthDeviationUnitColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_3MonthDeviationUnitNull() {
                this[this.tableRollingForcastUI._3MonthDeviationUnitColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_3MonthDeviationUnitPercentNull() {
                return this.IsNull(this.tableRollingForcastUI._3MonthDeviationUnitPercentColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_3MonthDeviationUnitPercentNull() {
                this[this.tableRollingForcastUI._3MonthDeviationUnitPercentColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_3MonthBudgetValueNull() {
                return this.IsNull(this.tableRollingForcastUI._3MonthBudgetValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_3MonthBudgetValueNull() {
                this[this.tableRollingForcastUI._3MonthBudgetValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_3MonthForecastValueNull() {
                return this.IsNull(this.tableRollingForcastUI._3MonthForecastValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_3MonthForecastValueNull() {
                this[this.tableRollingForcastUI._3MonthForecastValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_3MonthDeviationValueNull() {
                return this.IsNull(this.tableRollingForcastUI._3MonthDeviationValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_3MonthDeviationValueNull() {
                this[this.tableRollingForcastUI._3MonthDeviationValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_3MonthDeviationValuePercentNull() {
                return this.IsNull(this.tableRollingForcastUI._3MonthDeviationValuePercentColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_3MonthDeviationValuePercentNull() {
                this[this.tableRollingForcastUI._3MonthDeviationValuePercentColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYearBudgetUnitNull() {
                return this.IsNull(this.tableRollingForcastUI.YearBudgetUnitColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYearBudgetUnitNull() {
                this[this.tableRollingForcastUI.YearBudgetUnitColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAchCumN2UnitNull() {
                return this.IsNull(this.tableRollingForcastUI.AchCumN2UnitColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAchCumN2UnitNull() {
                this[this.tableRollingForcastUI.AchCumN2UnitColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAchN1UnitNull() {
                return this.IsNull(this.tableRollingForcastUI.AchN1UnitColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAchN1UnitNull() {
                this[this.tableRollingForcastUI.AchN1UnitColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAchCumAllUnitNull() {
                return this.IsNull(this.tableRollingForcastUI.AchCumAllUnitColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAchCumAllUnitNull() {
                this[this.tableRollingForcastUI.AchCumAllUnitColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYearDeviationUnitNull() {
                return this.IsNull(this.tableRollingForcastUI.YearDeviationUnitColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYearDeviationUnitNull() {
                this[this.tableRollingForcastUI.YearDeviationUnitColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYearDeviationUnitPercentNull() {
                return this.IsNull(this.tableRollingForcastUI.YearDeviationUnitPercentColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYearDeviationUnitPercentNull() {
                this[this.tableRollingForcastUI.YearDeviationUnitPercentColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SupplierRow : System.Data.DataRow {
            
            private SupplierDataTable tableSupplier;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SupplierRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSupplier = ((SupplierDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SupplierID {
                get {
                    try {
                        return ((int)(this[this.tableSupplier.SupplierIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SupplierID\' in table \'Supplier\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSupplier.SupplierIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SupplierCode {
                get {
                    try {
                        return ((string)(this[this.tableSupplier.SupplierCodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SupplierCode\' in table \'Supplier\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSupplier.SupplierCodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SupplierName {
                get {
                    try {
                        return ((string)(this[this.tableSupplier.SupplierNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SupplierName\' in table \'Supplier\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSupplier.SupplierNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSupplierIDNull() {
                return this.IsNull(this.tableSupplier.SupplierIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSupplierIDNull() {
                this[this.tableSupplier.SupplierIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSupplierCodeNull() {
                return this.IsNull(this.tableSupplier.SupplierCodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSupplierCodeNull() {
                this[this.tableSupplier.SupplierCodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSupplierNameNull() {
                return this.IsNull(this.tableSupplier.SupplierNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSupplierNameNull() {
                this[this.tableSupplier.SupplierNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProductRow : System.Data.DataRow {
            
            private ProductDataTable tableProduct;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProductRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProduct = ((ProductDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProductID {
                get {
                    try {
                        return ((string)(this[this.tableProduct.ProductIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProductID\' in table \'Product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduct.ProductIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProductCode {
                get {
                    try {
                        return ((string)(this[this.tableProduct.ProductCodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProductCode\' in table \'Product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduct.ProductCodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProductName {
                get {
                    try {
                        return ((string)(this[this.tableProduct.ProductNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProductName\' in table \'Product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduct.ProductNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Brand {
                get {
                    try {
                        return ((string)(this[this.tableProduct.BrandColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Brand\' in table \'Product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduct.BrandColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AG {
                get {
                    try {
                        return ((string)(this[this.tableProduct.AGColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AG\' in table \'Product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduct.AGColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ASG {
                get {
                    try {
                        return ((string)(this[this.tableProduct.ASGColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ASG\' in table \'Product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduct.ASGColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MAG {
                get {
                    try {
                        return ((string)(this[this.tableProduct.MAGColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MAG\' in table \'Product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduct.MAGColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MOQ {
                get {
                    try {
                        return ((string)(this[this.tableProduct.MOQColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MOQ\' in table \'Product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProduct.MOQColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductIDNull() {
                return this.IsNull(this.tableProduct.ProductIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductIDNull() {
                this[this.tableProduct.ProductIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductCodeNull() {
                return this.IsNull(this.tableProduct.ProductCodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductCodeNull() {
                this[this.tableProduct.ProductCodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductNameNull() {
                return this.IsNull(this.tableProduct.ProductNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductNameNull() {
                this[this.tableProduct.ProductNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBrandNull() {
                return this.IsNull(this.tableProduct.BrandColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBrandNull() {
                this[this.tableProduct.BrandColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAGNull() {
                return this.IsNull(this.tableProduct.AGColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAGNull() {
                this[this.tableProduct.AGColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsASGNull() {
                return this.IsNull(this.tableProduct.ASGColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetASGNull() {
                this[this.tableProduct.ASGColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMAGNull() {
                return this.IsNull(this.tableProduct.MAGColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMAGNull() {
                this[this.tableProduct.MAGColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMOQNull() {
                return this.IsNull(this.tableProduct.MOQColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMOQNull() {
                this[this.tableProduct.MOQColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RollingForecastDBRowChangeEvent : System.EventArgs {
            
            private RollingForecastDBRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RollingForecastDBRowChangeEvent(RollingForecastDBRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RollingForecastDBRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SCMonthBudgetDBRowChangeEvent : System.EventArgs {
            
            private SCMonthBudgetDBRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SCMonthBudgetDBRowChangeEvent(SCMonthBudgetDBRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SCMonthBudgetDBRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RollingForcastUIRowChangeEvent : System.EventArgs {
            
            private RollingForcastUIRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RollingForcastUIRowChangeEvent(RollingForcastUIRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RollingForcastUIRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SupplierRowChangeEvent : System.EventArgs {
            
            private SupplierRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SupplierRowChangeEvent(SupplierRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SupplierRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProductRowChangeEvent : System.EventArgs {
            
            private ProductRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRowChangeEvent(ProductRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591