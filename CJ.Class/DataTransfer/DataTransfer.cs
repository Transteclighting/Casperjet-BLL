// <summary>
// Compamy: Transcom Electronics Limited
// Author: Shyam Sundar Biswas
// Date: 
// Time :  
// Description: Class for Data Transfer.
// Modify Person And Date: Massive Changed by Md. Abdul Hakim (almost 90%)
// </summary>

using System;
using System.Data;
using System.Data.OleDb;

using CJ.Class.POS;
using CJ.Class.Promotion;
using CJ.Class.Warranty;
using CJ.Class.CLP;
using CJ.Class.BEIL;
using CJ.Class.Accounts;
using CJ.Class.Promotion;


namespace CJ.Class.DataTransfer
{
    public class DataTransfer
    {
        private string _TableName;
        private int _DataID;
        private int _WarehouseID;
        private int _TransferType;
        private int _IsDownload;


        /// <summary>
        /// Get set property for TableName
        /// </summary>
        public string TableName
        {
            get { return _TableName; }
            set { _TableName = value.Trim(); }
        }

        /// <summary>
        /// Get set property for DataID
        /// </summary>
        public int DataID
        {
            get { return _DataID; }
            set { _DataID = value; }
        }

        /// <summary>
        /// Get set property for WarehouseID
        /// </summary>
        public int WarehouseID
        {
            get { return _WarehouseID; }
            set { _WarehouseID = value; }
        }

        /// <summary>
        /// Get set property for TransferType
        /// </summary>
        public int TransferType
        {
            get { return _TransferType; }
            set { _TransferType = value; }
        }

        /// <summary>
        /// Get set property for IsDownload
        /// </summary>
        public int IsDownload
        {
            get { return _IsDownload; }
            set { _IsDownload = value; }
        }
        public void Insert()
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            try
            {
                sSql = "INSERT INTO t_DataTransfer VALUES(?,?,?,?,?)";
                cmd.CommandText = sSql;
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.AddWithValue("TableName", _TableName);
                cmd.Parameters.AddWithValue("DataID", _DataID);
                cmd.Parameters.AddWithValue("WarehouseID", _WarehouseID);
                cmd.Parameters.AddWithValue("TransferType", _TransferType);
                cmd.Parameters.AddWithValue("IsDownload", _IsDownload);

                cmd.ExecuteNonQuery();
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
        }
        public bool CheckData()
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            int nCount = 0;
            try
            {
                cmd.CommandText = "SELECT * FROM t_DataTransfer where TableName =? and DataID=? and WarehouseID=? and TransferType=?";
                cmd.Parameters.AddWithValue("TableName", _TableName);
                cmd.Parameters.AddWithValue("DataID", _DataID);
                cmd.Parameters.AddWithValue("WarehouseID", _WarehouseID);
                cmd.Parameters.AddWithValue("TransferType", _TransferType);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                if (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0) return true;
            else return false;
        }

        public bool CheckPromoDiscountData(string sTableName, int nID)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            int nCount = 0;
            try
            {
                if (sTableName == "t_PromoDiscountBank")
                {
                    cmd.CommandText = "Select * From t_PromoDiscountBank where BankDiscountID=" + nID + "";
                }
                else if (sTableName == "t_PromoDiscountASGBrandEMI")
                {
                    cmd.CommandText = "Select * From t_PromoDiscountASGBrandEMI where ID=" + nID + "";
                }
                else if (sTableName == "t_PromoDiscountB2B")
                {
                    cmd.CommandText = "Select * From t_PromoDiscountB2B where B2BDiscountID=" + nID + "";
                }
                else if (sTableName == "t_PromoDiscountMAGBrand")
                {
                    cmd.CommandText = "Select * From t_PromoDiscountMAGBrand where DiscountID=" + nID + "";
                }
                else if (sTableName == "t_EMITenure")
                {
                    cmd.CommandText = "Select * From t_EMITenure where EMITenureID=" + nID + "";
                }
                else if (sTableName == "t_EMIExtendedCharge")
                {
                    cmd.CommandText = "Select * From t_EMIExtendedCharge where ID=" + nID + "";
                }
                else if (sTableName == "t_EMIBankMapping")
                {
                    cmd.CommandText = "Select * From t_EMIBankMapping where ID=" + nID + "";
                }
                else if (sTableName == "t_SalesInvoiceDiscountType")
                {
                    cmd.CommandText = "Select * From t_SalesInvoiceDiscountType where DiscountTypeID=" + nID + "";
                }
                else if (sTableName == "t_PromoDiscountContributor")
                {
                    cmd.CommandText = "Select * From t_PromoDiscountContributor where DiscountContributorID=" + nID + "";
                }

                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                if (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0) return true;
            else return false;
        }
        SPromotions oSPromotions;
        Warranties oWarranties;
        ProductGroups oProductGroups;
        Brands oBrands;
        CLPEligibilities oCLPEligibilities;
        CLPPointList oCLPPointList;
        CLPEligibility oCLPEligibility;
        CLPPoint oCLPPoint;
        CLPPointSlab oCLPPointSlab;

        #region Data Get


        ///
        // Stock Requisition/Stock Requisition Item
        ///
        public DSRequisition GetDSRequisition(DSRequisition oDSRequisition, int nWarehouseID)
        {
            oDSRequisition = new DSRequisition();
            DSRequisition oDSRequisitionItem = new DSRequisition();
            DSRequisition oDSProductStockTran = new DSRequisition();
            DSRequisition oDSProductStockTranItem = new DSRequisition();
            DSRequisition oDSProductTransferProductSerial = new DSRequisition();



            if (!DBController.Instance.CheckConnection())
            {
                DBController.Instance.OpenNewConnection();
            }

            OleDbCommand cmd = DBController.Instance.GetCommand();

            string sSql = "select b.*, TransferType from t_DataTransfer a, t_StockRequisition b Where a.DataID=b.StockRequisitionID " +
                            "and TableName='t_StockRequisition' and IsDownload=? and WarehouseID=? ";

            cmd.Parameters.AddWithValue("IsDownload", (int)Dictionary.IsDownload.No);
            cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

            int nStockRequisitionID = 0;
            try
            {
                cmd.CommandText = sSql;
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {

                    DSRequisition.StockRequisitionRow oStockRequisitionRow = oDSRequisition.StockRequisition.NewStockRequisitionRow();

                    if (nStockRequisitionID != int.Parse(reader["StockRequisitionID"].ToString()))
                    {

                        oStockRequisitionRow.StockRequisitionID = int.Parse(reader["StockRequisitionID"].ToString());
                        nStockRequisitionID = oStockRequisitionRow.StockRequisitionID;
                        oStockRequisitionRow.RequisitionNo = (string)reader["RequisitionNo"];
                        oStockRequisitionRow.RequisitionDate = Convert.ToDateTime(reader["RequisitionDate"].ToString());
                        oStockRequisitionRow.RequisitionType = int.Parse(reader["RequisitionType"].ToString());
                        oStockRequisitionRow.FromWHID = int.Parse(reader["FromWHID"].ToString());
                        oStockRequisitionRow.ToWHID = int.Parse(reader["ToWHID"].ToString());
                        oStockRequisitionRow.CreateUserID = int.Parse(reader["CreateUserID"].ToString());
                        oStockRequisitionRow.CreateDate = Convert.ToDateTime(reader["CreateDate"].ToString());
                        if (reader["Remarks"] != DBNull.Value)
                        {
                            oStockRequisitionRow.Remarks = (string)reader["Remarks"];
                        }
                        else
                        {
                            oStockRequisitionRow.Remarks = "";
                        }
                        if (reader["AuthorizedBy"] != DBNull.Value)
                        {
                            oStockRequisitionRow.AuthorizedBy = int.Parse(reader["AuthorizedBy"].ToString());
                        }
                        else
                        {
                            oStockRequisitionRow.AuthorizedBy = -1;
                        }
                        if (reader["AuthorizeDate"] != DBNull.Value)
                        {
                            oStockRequisitionRow.AuthorizeDate = Convert.ToDateTime(reader["AuthorizeDate"].ToString());
                        }
                        if (reader["AuthorizeRemarks"] != DBNull.Value)
                        {
                            oStockRequisitionRow.AuthorizeRemarks = (string)reader["AuthorizeRemarks"];
                        }
                        else
                        {
                            oStockRequisitionRow.AuthorizeRemarks = "";
                        }
                        if (reader["StockTranID"] != DBNull.Value)
                        {
                            oStockRequisitionRow.StockTranID = int.Parse(reader["StockTranID"].ToString());
                        }
                        else
                        {
                            oStockRequisitionRow.StockTranID = -1;
                        }
                        if (reader["TransferedBy"] != DBNull.Value)
                        {
                            oStockRequisitionRow.TransferedBy = int.Parse(reader["TransferedBy"].ToString());
                        }
                        else
                        {
                            oStockRequisitionRow.TransferedBy = -1;
                        }
                        if (reader["TransferDate"] != DBNull.Value)
                        {
                            oStockRequisitionRow.TransferDate = Convert.ToDateTime(reader["TransferDate"].ToString());
                        }
                        else
                        {
                            //oStockRequisitionRow.TransferDate = null;
                        }
                        if (reader["TransferRemarks"] != DBNull.Value)
                        {
                            oStockRequisitionRow.TransferRemarks = (string)reader["TransferRemarks"];
                        }
                        else
                        {
                            oStockRequisitionRow.TransferRemarks = "";
                        }
                        if (reader["ReceivedBy"] != DBNull.Value)
                        {
                            oStockRequisitionRow.ReceivedBy = int.Parse(reader["ReceivedBy"].ToString());
                        }
                        else
                        {
                            oStockRequisitionRow.ReceivedBy = -1;
                        }
                        if (reader["ReceiveDate"] != DBNull.Value)
                        {
                            oStockRequisitionRow.ReceiveDate = Convert.ToDateTime(reader["ReceiveDate"].ToString());
                        }

                        if (reader["ReceiveRemarks"] != DBNull.Value)
                        {
                            oStockRequisitionRow.ReceiveRemarks = (string)reader["ReceiveRemarks"];
                        }
                        else
                        {
                            oStockRequisitionRow.ReceiveRemarks = "";
                        }

                        oStockRequisitionRow.TransferType = int.Parse(reader["TransferType"].ToString());
                        oStockRequisitionRow.Status = int.Parse(reader["Status"].ToString());
                        oStockRequisitionRow.Terminal = int.Parse(reader["Terminal"].ToString());

                        oDSRequisition.StockRequisition.AddStockRequisitionRow(oStockRequisitionRow);
                        oDSRequisition.StockRequisition.AcceptChanges();

                        POSRequisition oPOSRequisition = new POSRequisition();
                        oPOSRequisition.GetRequisitionItemByReqID(oStockRequisitionRow.StockRequisitionID, int.Parse(reader["FromWHID"].ToString()));

                        foreach (POSRequisitionItem oPOSRequisitionItem in oPOSRequisition)
                        {
                            DSRequisition.StockRequisitionItemRow oStockRequisitionItemRow = oDSRequisitionItem.StockRequisitionItem.NewStockRequisitionItemRow();

                            oStockRequisitionItemRow.StockRequisitionID = oPOSRequisitionItem.RequisitionID;
                            oStockRequisitionItemRow.ProductID = oPOSRequisitionItem.ProductID;
                            oStockRequisitionItemRow.RequisitingQty = oPOSRequisitionItem.RequisitionQty;
                            oStockRequisitionItemRow.AuthorizeQty = oPOSRequisitionItem.AuthorizeQty;

                            oStockRequisitionItemRow.DutyTranNo = oPOSRequisitionItem.DutyTranNo;
                            oStockRequisitionItemRow.DutyPrice = oPOSRequisitionItem.DutyPrice;
                            oStockRequisitionItemRow.DutyRate = oPOSRequisitionItem.DutyRate;


                            oDSRequisitionItem.StockRequisitionItem.AddStockRequisitionItemRow(oStockRequisitionItemRow);
                            oDSRequisitionItem.StockRequisitionItem.AcceptChanges();
                        }

                        if (oStockRequisitionRow.RequisitionType != (int)Dictionary.StockRequisitionType.Requisition)
                        {
                            if (oStockRequisitionRow.FromWHID != Utility.CentralRetailWarehouse)
                            {
                                if (reader["StockTranID"] != DBNull.Value)
                                {
                                    ProductTransactions oProductTransactions = new ProductTransactions();
                                    oProductTransactions.GetTransactionByTranID(oStockRequisitionRow.StockTranID);
                                    int nProductStockTranID = 0;
                                    foreach (ProductTransaction oProductTransaction in oProductTransactions)
                                    {

                                        DSRequisition.ProductStockTranRow oProductStockTranRow = oDSProductStockTran.ProductStockTran.NewProductStockTranRow();

                                        oProductStockTranRow.TranID = oProductTransaction.TranID;
                                        oProductStockTranRow.CreateDate = oProductTransaction.CreateDate;
                                        oProductStockTranRow.TranNo = oProductTransaction.TranNo;
                                        oProductStockTranRow.TranDate = oProductTransaction.TranDate;
                                        oProductStockTranRow.TranTypeID = oProductTransaction.TranTypeID;
                                        oProductStockTranRow.ToWHID = oProductTransaction.ToWHID;
                                        oProductStockTranRow.ToChannelID = oProductTransaction.ToChannelID;
                                        oProductStockTranRow.FromWHID = oProductTransaction.FromWHID;
                                        oProductStockTranRow.FromChannelID = oProductTransaction.FromChannelID;
                                        oProductStockTranRow.UserID = oProductTransaction.UserID;
                                        oProductStockTranRow.Status = Convert.ToInt16(oProductTransaction.Status);
                                        oProductStockTranRow.Remarks = oProductTransaction.Remarks;
                                        //if (reader["LastUpdateUserId"] != DBNull.Value)
                                        oProductStockTranRow.LastUpdateUserID = oProductTransaction.LastUpdateUserID;
                                        //else oProductStockTranRow.LastUpdateUserID = -1;
                                        oProductStockTranRow.LastUpdateDate = oProductTransaction.LastUpdateDate;

                                        nProductStockTranID = oProductTransaction.TranID;



                                        oDSProductStockTran.ProductStockTran.AddProductStockTranRow(oProductStockTranRow);
                                        oDSProductStockTran.AcceptChanges();

                                    }
                                    ProductTransaction _oProductTransaction = new ProductTransaction();
                                    _oProductTransaction.TranID = nProductStockTranID;
                                    _oProductTransaction.RefreshItemForDownload();
                                    foreach (ProductTransactionDetail oProductTransactionDetail in _oProductTransaction)
                                    {
                                        DSRequisition.ProductStockTranItemRow oProductStockTranItemRow = oDSProductStockTranItem.ProductStockTranItem.NewProductStockTranItemRow();

                                        oProductStockTranItemRow.TranID = int.Parse(oProductTransactionDetail.TranID.ToString());
                                        oProductStockTranItemRow.ProductID = int.Parse(oProductTransactionDetail.ProductID.ToString());
                                        oProductStockTranItemRow.Qty = oProductTransactionDetail.Qty;
                                        oProductStockTranItemRow.StockPrice = oProductTransactionDetail.StockPrice;

                                        oProductStockTranItemRow.DutyTranNo = oProductTransactionDetail.DutyTranNo;
                                        oProductStockTranItemRow.DutyPrice = oProductTransactionDetail.DutyPrice;
                                        oProductStockTranItemRow.DutyRate = oProductTransactionDetail.DutyRate;

                                        oDSProductStockTranItem.ProductStockTranItem.AddProductStockTranItemRow(oProductStockTranItemRow);
                                        oDSProductStockTranItem.AcceptChanges();
                                    }

                                    ProductTransferProductSerials oProductTransferProductSerials = new ProductTransferProductSerials();
                                    oProductTransferProductSerials.GetProductTransferProductSerial(nProductStockTranID);

                                    foreach (ProductTransferProductSerial oProductTransferProductSerial in oProductTransferProductSerials)
                                    {
                                        DSRequisition.ProductTransferProductSerialRow oProductTransferProductSerialRow = oDSProductTransferProductSerial.ProductTransferProductSerial.NewProductTransferProductSerialRow();

                                        oProductTransferProductSerialRow.TranID = int.Parse(oProductTransferProductSerial.TranID.ToString());
                                        oProductTransferProductSerialRow.ProductID = int.Parse(oProductTransferProductSerial.ProductID.ToString());
                                        oProductTransferProductSerialRow.SerialNo = int.Parse(oProductTransferProductSerial.SerialNo.ToString());
                                        oProductTransferProductSerialRow.ProductSerialNo = oProductTransferProductSerial.ProductSerialNo;
                                        oProductTransferProductSerialRow.TradePrice = oProductTransferProductSerial.TradePrice;
                                        oProductTransferProductSerialRow.VAT = oProductTransferProductSerial.VAT;
                                        oProductTransferProductSerialRow.IsVATPaidProduct = oProductTransferProductSerial.IsVATPaidProduct;


                                        oDSProductTransferProductSerial.ProductTransferProductSerial.AddProductTransferProductSerialRow(oProductTransferProductSerialRow);
                                        oDSProductTransferProductSerial.AcceptChanges();

                                    }
                                }
                            }
                        }

                    }
                }
                reader.Close();

                AppLogger.LogInfo("Successfully Get t_StockRequisition Where WarehouseID=" + nWarehouseID + "");


                oDSRequisition.Merge(oDSRequisitionItem);
                oDSRequisition.Merge(oDSProductStockTran);
                oDSRequisition.Merge(oDSProductStockTranItem);
                oDSRequisition.Merge(oDSProductTransferProductSerial);

            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting t_StockRequisition Where WarehouseID=" + nWarehouseID + " and Actual Error=/" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSRequisition;
        }

        /// <summary>
        /// Get Product Details
        /// </summary>
        /// <param name="oDSProductDetail"></param>
        /// <returns></returns>
        /// 
        public DSProduct GetPtoduct(DSProduct oDSProduct, int nWarehouseID)
        {
            oDSProduct = new DSProduct();
            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }

                OleDbCommand cmd = DBController.Instance.GetCommand();
                cmd.CommandText = "select * from t_Product a inner join t_DataTransfer b on b.DataID=a.ProductID "
                              + "  where b.TableName='t_Product' and "
                              + "  b.IsDownload=1 and WarehouseID= '" + nWarehouseID + "' ";


                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSProduct.ProductRow oProductRow = oDSProduct.Product.NewProductRow();

                    oProductRow.ProductID = (int)reader["ProductID"];
                    oProductRow.ProductName = (string)reader["ProductName"];
                    oProductRow.ProductCode = (string)reader["ProductCode"];
                    oProductRow.ProductDesc = reader["ProductDesc"].ToString();
                    oProductRow.ProductModel = reader["ProductModel"].ToString();
                    oProductRow.SmallUnitOfMeasure = reader["SmallUnitOfMeasure"].ToString();
                    oProductRow.LargeUnitOfMeasure = reader["LargeUnitOfMeasure"].ToString();
                    oProductRow.UOMConversionFactor = Convert.ToDouble(reader["UOMConversionFactor"].ToString());
                    oProductRow.EntryDate = Convert.ToDateTime(reader["EntryDate"].ToString());
                    oProductRow.ProductType = (int)reader["ProductType"];
                    oProductRow.ProductGroupID = (int)reader["ProductGroupID"];
                    oProductRow.BrandID = (int)reader["BrandID"];
                    oProductRow.IsActive = int.Parse(reader["IsActive"].ToString());
                    if (reader["HSCodeID"] != DBNull.Value)
                        oProductRow.HSCodeID = (int)reader["HSCodeID"];
                    else oProductRow.HSCodeID = -1;
                    oProductRow.MidUnitOfMeasure = reader["MidUnitOfMeasure"].ToString();
                    if (reader["LSRatio"] != DBNull.Value)
                        oProductRow.LSRatio = (int)reader["LSRatio"];
                    else oProductRow.LSRatio = -1;
                    if (reader["MSRatio"] != DBNull.Value)
                        oProductRow.MSRatio = (int)reader["MSRatio"];
                    else oProductRow.MSRatio = -1;
                    if (reader["SupplyType"] != DBNull.Value)
                        oProductRow.SupplyType = (int)reader["SupplyType"];
                    else oProductRow.SupplyType = -1;
                    if (reader["VatApplicable"] != DBNull.Value)
                        oProductRow.VatApplicable = (int)reader["VatApplicable"];
                    else oProductRow.VatApplicable = -1;
                    oProductRow.ProductSBUs = reader["ProductSBUs"].ToString();
                    if (reader["InventoryCategory"] != DBNull.Value)
                        oProductRow.InventoryCategory = int.Parse(reader["InventoryCategory"].ToString());
                    else oProductRow.InventoryCategory = -1;
                    if (reader["ItemCategory"] != DBNull.Value)
                        oProductRow.ItemCategory = int.Parse(reader["ItemCategory"].ToString());
                    else oProductRow.ItemCategory = -1;
                    oProductRow.TransferType = (int)reader["TransferType"];
                    oProductRow.IsBarcodeItem = int.Parse(reader["IsBarcodeItem"].ToString());

                    if (reader["FeatureTypeID"] != DBNull.Value)
                        oProductRow.FeatureTypeID = (int)reader["FeatureTypeID"];
                    else oProductRow.FeatureTypeID = -1;

                    int nVATType = 0;
                    if (oProductRow.SupplyType == (int)Dictionary.SupplyType.IMPORTED)
                    {
                        nVATType = (int)Dictionary.VATType.IMPORTED_15;
                    }
                    else
                    {
                        nVATType = (int)Dictionary.VATType.LOCAL_5;
                    }
                    if (reader["VATType"] != DBNull.Value)
                        oProductRow.VATType = (int)reader["VATType"];
                    else oProductRow.VATType = nVATType;

                    if (reader["PetName"] != DBNull.Value)
                        oProductRow.PetName = (string)reader["PetName"];
                    else oProductRow.PetName = "";

                    if (reader["IsVatApplicableonNetPrice"] != DBNull.Value)
                        oProductRow.IsVatApplicableonNetPrice = (int)reader["IsVatApplicableonNetPrice"];
                    else oProductRow.IsVatApplicableonNetPrice = (int)Dictionary.IsVatApplicableonNetPrice.NO;

                    oDSProduct.Product.AddProductRow(oProductRow);
                    oDSProduct.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Product");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Product /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSProduct;
        }

        public DSProduct GetPtoductFactory(DSProduct oDSProduct, int nLocationID)
        {
            oDSProduct = new DSProduct();
            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }

                OleDbCommand cmd = DBController.Instance.GetCommand();
                cmd.CommandText = "SELECT a.ProductID, a.ProductCode, a.ProductName, a.ProductDesc, ISNULL(a.ProductModel, '') AS ProductModel, " +
                                "a.ProductType, a.IsActive, a.SupplyType, a.VATApplicable, a.InventoryCategory, ISNULL(a.ItemCategory,1) ItemCategory, a.IsBarcodeItem,  " +
                                "p.VATType, ISNULL(p.PetName, '') AS PetName, a.AGID, a.AGName, a.ASGID, a.ASGName, a.MAGID, a.MAGName, a.PGID,  " +
                                "a.PGName, a.BrandID, a.BrandDesc, ISNULL(a.CostPrice, 0) AS CostPrice, ISNULL(a.NSP, 0) AS NSP, " +
                                "ISNULL(a.RSP, 0) AS RSP, ISNULL(a.VAT, 0) AS VAT, ISNULL(a.TradePrice, 0) AS TradePrice " +
                                "FROM v_ProductDetails AS a " +
                                "INNER JOIN  t_Product p on a.ProductID=p.ProductID  " +
                                "INNER JOIN " +
                                "t_DataTransferFactory AS b ON a.ProductID = b.DataID " +
                                "WHERE(b.LocationID = "+ nLocationID + ") AND(b.IsDownload = 1) AND(b.TableName = 't_Product')";


                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSProduct.ProductRow oProductRow = oDSProduct.Product.NewProductRow();

                    oProductRow.ProductID = (int)reader["ProductID"];
                    oProductRow.ProductName = (string)reader["ProductName"];
                    oProductRow.ProductCode = (string)reader["ProductCode"];
                    oProductRow.ProductDesc = reader["ProductDesc"].ToString();
                    oProductRow.ProductModel = reader["ProductModel"].ToString();
                    oProductRow.ProductType = (int)reader["ProductType"];
                    oProductRow.IsActive = int.Parse(reader["IsActive"].ToString());
                    if (reader["SupplyType"] != DBNull.Value)
                        oProductRow.SupplyType = (int)reader["SupplyType"];
                    else oProductRow.SupplyType = -1;
                    if (reader["VatApplicable"] != DBNull.Value)
                        oProductRow.VatApplicable = (int)reader["VatApplicable"];
                    else oProductRow.VatApplicable = -1;
                    if (reader["InventoryCategory"] != DBNull.Value)
                        oProductRow.InventoryCategory = int.Parse(reader["InventoryCategory"].ToString());
                    else oProductRow.InventoryCategory = -1;
                    if (reader["ItemCategory"] != DBNull.Value)
                        oProductRow.ItemCategory = int.Parse(reader["ItemCategory"].ToString());
                    else oProductRow.ItemCategory = -1;
                    oProductRow.IsBarcodeItem = int.Parse(reader["IsBarcodeItem"].ToString());


                    int nVATType = 0;
                    if (oProductRow.SupplyType == (int)Dictionary.SupplyType.IMPORTED)
                    {
                        nVATType = (int)Dictionary.VATType.IMPORTED_15;
                    }
                    else
                    {
                        nVATType = (int)Dictionary.VATType.LOCAL_5;
                    }
                    if (reader["VATType"] != DBNull.Value)
                        oProductRow.VATType = (int)reader["VATType"];
                    else oProductRow.VATType = nVATType;
                    if (reader["PetName"] != DBNull.Value)
                        oProductRow.PetName = (string)reader["PetName"];
                    else oProductRow.PetName = "";


                    oProductRow.AGID = (int)reader["AGID"];
                    oProductRow.AGName = (string)reader["AGName"];
                    oProductRow.ASGID = (int)reader["ASGID"];
                    oProductRow.ASGName = (string)reader["ASGName"];
                    oProductRow.MAGID = (int)reader["MAGID"];
                    oProductRow.MAGName = (string)reader["MAGName"];
                    oProductRow.PGID = (int)reader["PGID"];
                    oProductRow.PGName = (string)reader["PGName"];
                    oProductRow.BrandID = (int)reader["BrandID"];
                    oProductRow.BrandDesc = (string)reader["BrandDesc"];

                    oProductRow.CostPrice = (double)reader["CostPrice"];
                    oProductRow.NSP = (double)reader["NSP"];
                    oProductRow.RSP = (double)reader["RSP"];
                    oProductRow.VAT = (double)reader["VAT"];
                    oProductRow.TradePrice = (double)reader["TradePrice"];


                    oDSProduct.Product.AddProductRow(oProductRow);
                    oDSProduct.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Product");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Product /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSProduct;
        }

        public DSProduct GetProductFeatureType(DSProduct oDSProductFeatureType, int nWarehouseID)
        {
            oDSProductFeatureType = new DSProduct();
            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }

                OleDbCommand cmd = DBController.Instance.GetCommand();
                cmd.CommandText = "select * from t_ProductFeatureType a inner join t_DataTransfer b on b.DataID=a.FeatureTypeID "
                              + "  where b.TableName='t_ProductFeatureType' and "
                              + "  b.IsDownload=1 and WarehouseID= '" + nWarehouseID + "' ";


                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSProduct.ProductFeatureTypeRow oProductFeatureTypeRow = oDSProductFeatureType.ProductFeatureType.NewProductFeatureTypeRow();

                    oProductFeatureTypeRow.FeatureTypeID = (int)reader["FeatureTypeID"];
                    oProductFeatureTypeRow.FeatureTypeName = (string)reader["FeatureTypeName"];
                    oProductFeatureTypeRow.IsActive = (int)reader["IsActive"];
                    oProductFeatureTypeRow.CreateDate = Convert.ToDateTime(reader["CreateDate"].ToString());
                    oProductFeatureTypeRow.CreateUserID = (int)reader["CreateUserID"];
                    if (reader["UpdateDate"] != DBNull.Value)
                    {
                        oProductFeatureTypeRow.UpdateDate = Convert.ToDateTime(reader["UpdateDate"].ToString());
                    }
                    if (reader["UpdateUserID"] != DBNull.Value)
                    {
                        oProductFeatureTypeRow.UpdateUserID = (int)reader["UpdateUserID"];
                    }

                    oDSProductFeatureType.ProductFeatureType.AddProductFeatureTypeRow(oProductFeatureTypeRow);
                    oDSProductFeatureType.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Product Feature Type");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Product Feature Type/" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSProductFeatureType;
        }

        public DSBasicData GetNewVatActivation(DSBasicData oDSNewVatActivation, int nWarehouseID)
        {
            oDSNewVatActivation = new DSBasicData();
            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }

                OleDbCommand cmd = DBController.Instance.GetCommand();
                cmd.CommandText = "select * from t_NewVatActivation a  " +
                                "inner join t_DataTransfer b on b.DataID=a.ID   " +
                                "where b.TableName='t_NewVatActivation' and   " +
                                "b.IsDownload=1 and WarehouseID= " + nWarehouseID + "";


                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSBasicData.NewVatActivationRow oNewVatActivationRow = oDSNewVatActivation.NewVatActivation.NewNewVatActivationRow();

                    oNewVatActivationRow.ID = (int)reader["ID"];
                    oNewVatActivationRow.IsNewVat = (int)reader["IsNewVat"];

                    oDSNewVatActivation.NewVatActivation.AddNewVatActivationRow(oNewVatActivationRow);
                    oDSNewVatActivation.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get New Vat Activation Data");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting New Vat Activation Data/" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSNewVatActivation;
        }

        public DSBank GetBankGuaranty(DSBank oDSBankGuaranty, int nWarehouseID)
        {
            oDSBankGuaranty = new DSBank();
            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }

                OleDbCommand cmd = DBController.Instance.GetCommand();
                cmd.CommandText = "select * from t_CustomerBankGuaranty a  " +
                                "inner join t_DataTransfer b on b.DataID=a.BGID   " +
                                "where b.TableName='t_CustomerBankGuaranty' and   " +
                                "b.IsDownload=1 and WarehouseID= " + nWarehouseID + "";


                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSBank.BankGuarantyRow oBankGuarantyRow = oDSBankGuaranty.BankGuaranty.NewBankGuarantyRow();

                    oBankGuarantyRow.BGID = (int)reader["BGID"];
                    oBankGuarantyRow.CustomerID = (int)reader["CustomerID"];
                    oBankGuarantyRow.BankID = (int)reader["BankID"];
                    oBankGuarantyRow.EffectiveDate = Convert.ToDateTime(reader["EffectiveDate"].ToString());
                    oBankGuarantyRow.ExpiryDate = Convert.ToDateTime(reader["ExpiryDate"].ToString());
                    oBankGuarantyRow.BGAmount = Convert.ToDouble(reader["BGAmount"].ToString());
                    oBankGuarantyRow.IsActive = (int)reader["IsActive"];
                    oBankGuarantyRow.CreateuserID = (int)reader["CreateUserID"];
                    oBankGuarantyRow.CreateDate = Convert.ToDateTime(reader["CreateDate"].ToString());
                    if (reader["Remarks"] != DBNull.Value)
                    {
                        oBankGuarantyRow.Remarks = (string)reader["Remarks"];
                    }
                    if (reader["UpdateDate"] != DBNull.Value)
                    {
                        oBankGuarantyRow.UpdateDate = Convert.ToDateTime(reader["UpdateDate"].ToString());
                    }
                    if (reader["UpdateUserID"] != DBNull.Value)
                    {
                        oBankGuarantyRow.UpdateUserID = (int)reader["UpdateUserID"];
                    }

                    oDSBankGuaranty.BankGuaranty.AddBankGuarantyRow(oBankGuarantyRow);
                    oDSBankGuaranty.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Customer Bank Guaranty Data");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Customer Bank Guaranty Data/" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSBankGuaranty;
        }
        public DSCustomer GetCustomerAccount(DSCustomer oDSCustomerAccount, int nWarehouseID)
        {
            oDSCustomerAccount = new DSCustomer();
            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }

                OleDbCommand cmd = DBController.Instance.GetCommand();
                cmd.CommandText = "select * from t_CustomerAccount a  " +
                                "inner join t_DataTransfer b on b.DataID=a.CustomerID   " +
                                "where b.TableName='t_CustomerAccount' and   " +
                                "b.IsDownload=1 and WarehouseID= " + nWarehouseID + "";


                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSCustomer.CustomerRow oCustomerRow = oDSCustomerAccount.Customer.NewCustomerRow();

                    oCustomerRow.CustomerID = (int)reader["CustomerID"];
                    oCustomerRow.CurrentBalance = Convert.ToDouble(reader["CurrentBalance"].ToString());


                    oDSCustomerAccount.Customer.AddCustomerRow(oCustomerRow);
                    oDSCustomerAccount.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Customer Account Data");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Customer Account Data/" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSCustomerAccount;
        }

        public DateTime GetServerDatetime()
        {
            DateTime _dt = DateTime.Now;
            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }

                OleDbCommand cmd = DBController.Instance.GetCommand();
                cmd.CommandText = "select getdate() as ServerDateTime";


                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {

                    _dt = (DateTime)reader["ServerDateTime"];

                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Datetime");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting  Datetime/" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return _dt;
        }

        public int GetIsCheckServerDateTime(int nWarehouseID)
        {
            int _IsCheckServerDateTime = 0;
            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }

                OleDbCommand cmd = DBController.Instance.GetCommand();
                cmd.CommandText = "select isnull(IsCheckServerDateTime,0) IsCheckServerDateTime from t_Showroom where WarehouseID=" + nWarehouseID + "";


                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {

                    _IsCheckServerDateTime = (int)reader["IsCheckServerDateTime"];

                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Is Check Server Date Time.  WarehouseID=" + nWarehouseID + "");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting  Is Check Server Date Time. WarehouseID=" + nWarehouseID + "/" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return _IsCheckServerDateTime;
        }

        public DSBasicData GetTDActivationData(DSBasicData oDSTDActivation, int nWarehouseID)
        {
            oDSTDActivation = new DSBasicData();
            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }

                OleDbCommand cmd = DBController.Instance.GetCommand();
                cmd.CommandText = "select * from t_TDActivation a  " +
                                "inner join t_DataTransfer b on b.DataID=a.ActivationID   " +
                                "where b.TableName='t_TDActivation' and   " +
                                "b.IsDownload=1 and WarehouseID= " + nWarehouseID + "";


                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSBasicData.TDActivationRow oTDActivationRow = oDSTDActivation.TDActivation.NewTDActivationRow();

                    oTDActivationRow.ActivationID = (int)reader["ActivationID"];
                    oTDActivationRow.ActivationName = (string)reader["ActivationName"];
                    oTDActivationRow.StartDate = Convert.ToDateTime(reader["StartDate"].ToString());
                    oTDActivationRow.EndDate = Convert.ToDateTime(reader["EndDate"].ToString());
                    oTDActivationRow.CreateDate = Convert.ToDateTime(reader["CreateDate"].ToString());
                    oTDActivationRow.CreateUserID = (int)reader["CreateUserID"];
                    oTDActivationRow.IsActive = (int)reader["IsActive"];



                    oDSTDActivation.TDActivation.AddTDActivationRow(oTDActivationRow);
                    oDSTDActivation.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get TDActivation Data");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting TDActivation Data/" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSTDActivation;
        }


        public DSBasicData GetPettyCashExpenseHead(DSBasicData oDSPettyCashExpenseHead, int nWarehouseID)
        {
            oDSPettyCashExpenseHead = new DSBasicData();
            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }

                OleDbCommand cmd = DBController.Instance.GetCommand();
                cmd.CommandText = "select * from t_PettyCashExpenseHead a  " +
                                "inner join t_DataTransfer b on b.DataID=a.ExpenseHeadID   " +
                                "where b.TableName='t_PettyCashExpenseHead' and   " +
                                "b.IsDownload=1 and WarehouseID= " + nWarehouseID + "";


                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSBasicData.PettyCashExpenseHeadRow oPettyCashExpenseHeadRow = oDSPettyCashExpenseHead.PettyCashExpenseHead.NewPettyCashExpenseHeadRow();

                    oPettyCashExpenseHeadRow.ExpenseHeadID = (int)reader["ExpenseHeadID"];
                    oPettyCashExpenseHeadRow.Description = (string)reader["Description"];
                    oPettyCashExpenseHeadRow.CreateDate = Convert.ToDateTime(reader["CreateDate"].ToString());
                    oPettyCashExpenseHeadRow.CreateUserID = (int)reader["CreateUserID"];
                    oPettyCashExpenseHeadRow.IsActive = (int)reader["IsActive"];

                    oDSPettyCashExpenseHead.PettyCashExpenseHead.AddPettyCashExpenseHeadRow(oPettyCashExpenseHeadRow);
                    oDSPettyCashExpenseHead.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Petty Cash Expense Head Data");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Petty Cash Expense Head Data/" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSPettyCashExpenseHead;
        }


        public DSBasicData GetPromoDiscountSpecialAuthority(DSBasicData oDSPromoDiscountSpecialAuthority, int nWarehouseID)
        {
            oDSPromoDiscountSpecialAuthority = new DSBasicData();
            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }

                OleDbCommand cmd = DBController.Instance.GetCommand();
                cmd.CommandText = "select * from t_PromoDiscountSpecialAuthority a  " +
                                "inner join t_DataTransfer b on b.DataID=a.AuthorityID   " +
                                "where b.TableName='t_PromoDiscountSpecialAuthority' and   " +
                                "b.IsDownload=1 and WarehouseID= " + nWarehouseID + "";


                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSBasicData.PromoDiscountSpecialAuthorityRow oPromoDiscountSpecialAuthorityRow = oDSPromoDiscountSpecialAuthority.PromoDiscountSpecialAuthority.NewPromoDiscountSpecialAuthorityRow();

                    oPromoDiscountSpecialAuthorityRow.AuthorityID = (int)reader["AuthorityID"];
                    oPromoDiscountSpecialAuthorityRow.EmployeeID = (int)reader["EmployeeID"];
                    oPromoDiscountSpecialAuthorityRow.EmployeeName = (string)reader["EmployeeName"];
                    oPromoDiscountSpecialAuthorityRow.CreateDate = Convert.ToDateTime(reader["CreateDate"].ToString());
                    oPromoDiscountSpecialAuthorityRow.CreateUserID = (int)reader["CreateUserID"];
                    oPromoDiscountSpecialAuthorityRow.IsActive = (int)reader["IsActive"];
                    oPromoDiscountSpecialAuthorityRow.Sort = (int)reader["Sort"];



                    oDSPromoDiscountSpecialAuthority.PromoDiscountSpecialAuthority.AddPromoDiscountSpecialAuthorityRow(oPromoDiscountSpecialAuthorityRow);
                    oDSPromoDiscountSpecialAuthority.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Promo Discount Special Authority Data");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Promo Discount Special Authority Data/" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSPromoDiscountSpecialAuthority;
        }


        public DSPromotion GetPromoDiscountAllData(DSPromotion oDSPromoDiscount, int nWarehouseID, string sTableName)
        {
            oDSPromoDiscount = new DSPromotion();
            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }
                OleDbCommand cmd = DBController.Instance.GetCommand();
                if (sTableName == "t_PromoDiscountBank")
                {
                    cmd.CommandText = "Select * From t_PromoDiscountBank a,t_Datatransfer b " +
                                    "where a.BankDiscountID = b.DataID and TableName = 't_PromoDiscountBank' " +
                                    "and IsDownload = 1 and WarehouseID = " + nWarehouseID + "";
                }
                else if (sTableName == "t_PromoDiscountASGBrandEMI")
                {
                    cmd.CommandText = "Select * From t_PromoDiscountASGBrandEMI a,t_Datatransfer b " +
                                    "where a.ID = b.DataID and TableName = 't_PromoDiscountASGBrandEMI' " +
                                    "and IsDownload = 1 and WarehouseID = " + nWarehouseID + "";
                }
                else if (sTableName == "t_PromoDiscountB2B")
                {
                    cmd.CommandText = "Select * From t_PromoDiscountB2B a,t_Datatransfer b " +
                                    "where a.B2BDiscountID = b.DataID and TableName = 't_PromoDiscountB2B' " +
                                    "and IsDownload = 1 and WarehouseID = " + nWarehouseID + "";
                }
                else if (sTableName == "t_PromoDiscountMAGBrand")
                {
                    cmd.CommandText = "Select * From t_PromoDiscountMAGBrand a,t_Datatransfer b " +
                                    "where a.DiscountID = b.DataID and TableName = 't_PromoDiscountMAGBrand' " +
                                    "and IsDownload = 1 and WarehouseID = " + nWarehouseID + "";
                }
                else if (sTableName == "t_EMITenure")
                {
                    cmd.CommandText = "Select * From t_EMITenure a,t_Datatransfer b " +
                                    "where a.EMITenureID = b.DataID and TableName = 't_EMITenure' " +
                                    "and IsDownload = 1 and WarehouseID = " + nWarehouseID + "";
                }
                else if (sTableName == "t_EMIExtendedCharge")
                {
                    cmd.CommandText = "Select * From t_EMIExtendedCharge a,t_Datatransfer b " +
                                    "where a.ID = b.DataID and TableName = 't_EMIExtendedCharge' " +
                                    "and IsDownload = 1 and WarehouseID = " + nWarehouseID + "";
                }
                else if (sTableName == "t_EMIBankMapping")
                {
                    cmd.CommandText = "Select * From t_EMIBankMapping a,t_Datatransfer b " +
                                    "where a.ID = b.DataID and TableName = 't_EMIBankMapping' " +
                                    "and IsDownload = 1 and WarehouseID = " + nWarehouseID + "";
                }
                else if (sTableName == "t_PromoDiscountSpecial")
                {
                    cmd.CommandText = "Select * From t_PromoDiscountSpecial a,t_Datatransfer b " +
                                    "where a.SpecialDiscountID = b.DataID and a.WarehouseID=b.WarehouseID and TableName = 't_PromoDiscountSpecial' " +
                                    "and IsDownload = 1 and b.WarehouseID = " + nWarehouseID + "";
                }
                else if (sTableName == "t_SalesInvoiceDiscountType")
                {
                    cmd.CommandText = "Select * From t_SalesInvoiceDiscountType a,t_Datatransfer b " +
                                    "where a.DiscountTypeID = b.DataID and TableName = 't_SalesInvoiceDiscountType' " +
                                    "and IsDownload = 1 and b.WarehouseID = " + nWarehouseID + "";
                }
                else if (sTableName == "t_PromoDiscountContributor")
                {
                    cmd.CommandText = "Select * From t_PromoDiscountContributor a,t_Datatransfer b " +
                                    "where a.DiscountContributorID = b.DataID and TableName = 't_PromoDiscountContributor' " +
                                    "and IsDownload = 1 and b.WarehouseID = " + nWarehouseID + "";
                }

                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSPromotion.PromoDiscountRow oPromoDiscountRow = oDSPromoDiscount.PromoDiscount.NewPromoDiscountRow();
                  
                    if (sTableName == "t_PromoDiscountBank")
                    {
                        DSPromotion oDSPromoDiscountContribution = new DSPromotion();

                        oPromoDiscountRow.DiscountID = (int)reader["BankDiscountID"];
                        oPromoDiscountRow.BankID = (int)reader["BankID"];
                        oPromoDiscountRow.AGID = (int)reader["AGID"];
                        oPromoDiscountRow.BrandID = (int)reader["BrandID"];
                        oPromoDiscountRow.DiscountPercent = Convert.ToDouble(reader["DiscountPercent"].ToString());
                        oPromoDiscountRow.IsActive = (int)reader["IsActive"];
                        oPromoDiscountRow.Status = (int)reader["Status"];
                        oPromoDiscountRow.FromDate = Convert.ToDateTime(reader["FromDate"].ToString());
                        oPromoDiscountRow.ToDate = Convert.ToDateTime(reader["ToDate"].ToString());
                        oPromoDiscountRow.CreateUserID = (int)reader["CreateUserID"];
                        oPromoDiscountRow.CreateDate = Convert.ToDateTime(reader["CreateDate"].ToString());
                        if (reader["ApproveUserID"] != DBNull.Value)
                        {
                            oPromoDiscountRow.ApproveUserID = (int)reader["ApproveUserID"];
                        }
                        else
                        {
                            oPromoDiscountRow.ApproveUserID = -1;
                        }
                        if (reader["ApproveDate"] != DBNull.Value)
                        {
                            oPromoDiscountRow.ApproveDate = Convert.ToDateTime(reader["ApproveDate"].ToString());
                        }

                        if (reader["UpdateUserID"] != DBNull.Value)
                        {
                            oPromoDiscountRow.UpdateUserID = (int)reader["UpdateUserID"];
                        }
                        else
                        {
                            oPromoDiscountRow.UpdateUserID = -1;
                        }
                        if (reader["UpdateDate"] != DBNull.Value)
                        {
                            oPromoDiscountRow.UpdateDate = Convert.ToDateTime(reader["UpdateDate"].ToString());
                        }
                        if (reader["PaymentModeID"] != DBNull.Value)
                        {
                            oPromoDiscountRow.PaymentModeID = Convert.ToInt32(reader["PaymentModeID"].ToString());
                        }
                        else
                        {
                            oPromoDiscountRow.PaymentModeID = -1;
                        }
                        if (reader["MaxDiscountAmount"] != DBNull.Value)
                        {
                            oPromoDiscountRow.MaxDiscountAmount= Convert.ToDouble(reader["MaxDiscountAmount"].ToString());
                        }
                        else
                        {
                            oPromoDiscountRow.MaxDiscountAmount = -1;
                        }
                        if (reader["IsBankDiscount"] != DBNull.Value)
                        {
                            oPromoDiscountRow.IsBankDiscount = Convert.ToInt32(reader["IsBankDiscount"].ToString());
                        }
                        else
                        {
                            oPromoDiscountRow.IsBankDiscount = -1;
                        }

                        if (reader["CardType"] != DBNull.Value)
                        {
                            oPromoDiscountRow.CardType = Convert.ToInt32(reader["CardType"].ToString());
                        }
                        else
                        {
                            oPromoDiscountRow.CardType = -1;
                        }

                        //try
                        //{
                        //    //Promo Discount Bank Contribution
                        //    if (!DBController.Instance.CheckConnection())
                        //    {
                        //        DBController.Instance.OpenNewConnection();
                        //    }
                        //    PromoDiscountContributors oPromoDiscountContributors = new PromoDiscountContributors();
                        //    oPromoDiscountContributors.GetDiscountContribution(oPromoDiscountRow.DiscountID.ToString(), sTableName);
                        //    AppLogger.LogInfo("Successfully Get Discount Contribution  (" + sTableName + ") and WarehouseID=" + nWarehouseID + "");
                        //    foreach (PromoDiscountContributor oPromoDiscountContributor in oPromoDiscountContributors)
                        //    {
                        //        DSPromotion.PromoDiscountContributionRow oPromoDiscountContributionRow = oDSPromoDiscountContribution.PromoDiscountContribution.NewPromoDiscountContributionRow();

                        //        oPromoDiscountContributionRow.ConsumerPromoID = oPromoDiscountContributor.ConsumerPromoID;
                        //        oPromoDiscountContributionRow.DiscountContributorID = oPromoDiscountContributor.DiscountContributorID;
                        //        oPromoDiscountContributionRow.Amount = oPromoDiscountContributor.Amount;
                        //        oDSPromoDiscountContribution.PromoDiscountContribution.AddPromoDiscountContributionRow(oPromoDiscountContributionRow);
                        //        oDSPromoDiscountContribution.AcceptChanges();
                        //    }
                        //}
                        //catch (Exception ex)
                        //{
                        //    AppLogger.LogInfo("Error Getting Discount Contribution  (" + sTableName + ") and WarehouseID=" + nWarehouseID + "" + ex.Message);
                        //    throw (ex);
                        //}

                    }
                    else if (sTableName == "t_PromoDiscountASGBrandEMI")
                    {
                        oPromoDiscountRow.DiscountID = (int)reader["ID"];
                        oPromoDiscountRow.AGID = (int)reader["AGID"];
                        oPromoDiscountRow.BrandID = (int)reader["BrandID"];
                        oPromoDiscountRow.EMITenureID = (int)reader["EMITenureID"];
                        oPromoDiscountRow.IsActive = (int)reader["IsActive"];
                        oPromoDiscountRow.Status = (int)reader["Status"];
                        oPromoDiscountRow.EffectiveDate = Convert.ToDateTime(reader["EffectiveDate"].ToString());
                        oPromoDiscountRow.CreateUserID = (int)reader["CreateUserID"];
                        oPromoDiscountRow.CreateDate = Convert.ToDateTime(reader["CreateDate"].ToString());
                        if (reader["ApproveUserID"] != DBNull.Value)
                        {
                            oPromoDiscountRow.ApproveUserID = (int)reader["ApproveUserID"];
                        }
                        else
                        {
                            oPromoDiscountRow.ApproveUserID = -1;
                        }
                        if (reader["ApproveDate"] != DBNull.Value)
                        {
                            oPromoDiscountRow.ApproveDate = Convert.ToDateTime(reader["ApproveDate"].ToString());
                        }

                        if (reader["UpdateUserID"] != DBNull.Value)
                        {
                            oPromoDiscountRow.UpdateUserID = (int)reader["UpdateUserID"];
                        }
                        else
                        {
                            oPromoDiscountRow.UpdateUserID = -1;
                        }
                        if (reader["UpdateDate"] != DBNull.Value)
                        {
                            oPromoDiscountRow.UpdateDate = Convert.ToDateTime(reader["UpdateDate"].ToString());
                        }
                    }
                    else if (sTableName == "t_PromoDiscountB2B")
                    {
                        oPromoDiscountRow.DiscountID = (int)reader["B2BDiscountID"];
                        oPromoDiscountRow.CustomerID = (int)reader["CustomerID"];
                        oPromoDiscountRow.DiscountPercent = Convert.ToDouble(reader["DiscountPercent"].ToString());
                        oPromoDiscountRow.IsActive = (int)reader["IsActive"];
                        oPromoDiscountRow.Status = (int)reader["Status"];
                        oPromoDiscountRow.EffectiveDate = Convert.ToDateTime(reader["EffectiveDate"].ToString());
                        oPromoDiscountRow.CreateUserID = (int)reader["CreateUserID"];
                        oPromoDiscountRow.CreateDate = Convert.ToDateTime(reader["CreateDate"].ToString());
                        if (reader["ApproveUserID"] != DBNull.Value)
                        {
                            oPromoDiscountRow.ApproveUserID = (int)reader["ApproveUserID"];
                        }
                        else
                        {
                            oPromoDiscountRow.ApproveUserID = -1;
                        }
                        if (reader["ApproveDate"] != DBNull.Value)
                        {
                            oPromoDiscountRow.ApproveDate = Convert.ToDateTime(reader["ApproveDate"].ToString());
                        }

                        if (reader["UpdateUserID"] != DBNull.Value)
                        {
                            oPromoDiscountRow.UpdateUserID = (int)reader["UpdateUserID"];
                        }
                        else
                        {
                            oPromoDiscountRow.UpdateUserID = -1;
                        }
                        if (reader["UpdateDate"] != DBNull.Value)
                        {
                            oPromoDiscountRow.UpdateDate = Convert.ToDateTime(reader["UpdateDate"].ToString());
                        }
                    }
                    else if (sTableName == "t_PromoDiscountMAGBrand")
                    {
                        oPromoDiscountRow.DiscountID = (int)reader["DiscountID"];
                        oPromoDiscountRow.SalesType = (int)reader["SalesType"];
                        oPromoDiscountRow.MAGID = (int)reader["MAGID"];
                        oPromoDiscountRow.BrandID = (int)reader["BrandID"];
                        oPromoDiscountRow.DiscountPercent = Convert.ToDouble(reader["DiscountPercent"].ToString());
                        oPromoDiscountRow.IsActive = (int)reader["IsActive"];
                        oPromoDiscountRow.Status = (int)reader["Status"];
                        oPromoDiscountRow.EffectiveDate = Convert.ToDateTime(reader["EffectiveDate"].ToString());
                        oPromoDiscountRow.CreateUserID = (int)reader["CreateUserID"];
                        oPromoDiscountRow.CreateDate = Convert.ToDateTime(reader["CreateDate"].ToString());
                        if (reader["ApproveUserID"] != DBNull.Value)
                        {
                            oPromoDiscountRow.ApproveUserID = (int)reader["ApproveUserID"];
                        }
                        else
                        {
                            oPromoDiscountRow.ApproveUserID = -1;
                        }
                        if (reader["ApproveDate"] != DBNull.Value)
                        {
                            oPromoDiscountRow.ApproveDate = Convert.ToDateTime(reader["ApproveDate"].ToString());
                        }

                        if (reader["UpdateUserID"] != DBNull.Value)
                        {
                            oPromoDiscountRow.UpdateUserID = (int)reader["UpdateUserID"];
                        }
                        else
                        {
                            oPromoDiscountRow.UpdateUserID = -1;
                        }
                        if (reader["UpdateDate"] != DBNull.Value)
                        {
                            oPromoDiscountRow.UpdateDate = Convert.ToDateTime(reader["UpdateDate"].ToString());
                        }
                        if (reader["Remarks"] != DBNull.Value)
                        {
                            oPromoDiscountRow.Remarks = reader["Remarks"].ToString();
                        }
                        else
                        {
                            oPromoDiscountRow.Remarks = "";
                        }
                    }
                    else if (sTableName == "t_EMITenure")
                    {
                        oPromoDiscountRow.DiscountID = (int)reader["EMITenureID"];
                        oPromoDiscountRow.Tenure = (int)reader["Tenure"];
                        oPromoDiscountRow.Status = (int)reader["Status"];
                        oPromoDiscountRow.CreateUserID = (int)reader["CreateUserID"];
                        oPromoDiscountRow.CreateDate = Convert.ToDateTime(reader["CreateDate"].ToString());
                        if (reader["ApproveUserID"] != DBNull.Value)
                        {
                            oPromoDiscountRow.ApproveUserID = (int)reader["ApproveUserID"];
                        }
                        else
                        {
                            oPromoDiscountRow.ApproveUserID = -1;
                        }
                        if (reader["ApproveDate"] != DBNull.Value)
                        {
                            oPromoDiscountRow.ApproveDate = Convert.ToDateTime(reader["ApproveDate"].ToString());
                        }

                    }
                    else if (sTableName == "t_EMIExtendedCharge")
                    {
                        oPromoDiscountRow.DiscountID = (int)reader["ID"];
                        oPromoDiscountRow.EMITenureID = (int)reader["EMITenureID"];
                        oPromoDiscountRow.ChargePercent = Convert.ToDouble(reader["ChargePercent"].ToString());
                        if (reader["BankID"] != DBNull.Value)
                        {
                            oPromoDiscountRow.BankID = Convert.ToInt32(reader["BankID"].ToString());
                        }
                        else
                        {
                            oPromoDiscountRow.BankID = -1;
                        }
                    }
                    else if (sTableName == "t_EMIBankMapping")
                    {
                        oPromoDiscountRow.DiscountID = (int)reader["ID"];
                        oPromoDiscountRow.BankID = (int)reader["BankID"];
                        oPromoDiscountRow.EMITenureID = (int)reader["EMITenureID"];

                    }

                    else if (sTableName == "t_PromoDiscountSpecial")
                    {
                        oPromoDiscountRow.DiscountID = (int)reader["SpecialDiscountID"];
                        oPromoDiscountRow.ApprovalNumber = (string)reader["ApprovalNumber"];
                        oPromoDiscountRow.SalesType = (int)reader["SalesType"];
                        oPromoDiscountRow.CustomerID = (int)reader["CustomerID"];
                        oPromoDiscountRow.Type = (int)reader["Type"];
                        if (reader["ConsumerID"] != DBNull.Value)
                        {
                            oPromoDiscountRow.ConsumerID = (int)reader["ConsumerID"];
                        }
                        else
                        {
                            oPromoDiscountRow.ConsumerID = -1;
                        }
                        oPromoDiscountRow.WarehouseID = (int)reader["WarehouseID"];
                        oPromoDiscountRow.Amount = (double)reader["Amount"];
                        oPromoDiscountRow.IsApplicableB2BDiscount = (int)reader["IsApplicableB2BDiscount"];
                        oPromoDiscountRow.Status = (int)reader["Status"];

                        oPromoDiscountRow.CreateUserID = (int)reader["CreateUserID"];
                        oPromoDiscountRow.CreateDate = Convert.ToDateTime(reader["CreateDate"].ToString());
                        if (reader["ApproveUserID"] != DBNull.Value)
                        {
                            oPromoDiscountRow.ApproveUserID = (int)reader["ApproveUserID"];
                        }
                        else
                        {
                            oPromoDiscountRow.ApproveUserID = -1;
                        }
                        if (reader["ApproveDate"] != DBNull.Value)
                        {
                            oPromoDiscountRow.ApproveDate = Convert.ToDateTime(reader["ApproveDate"].ToString());
                        }
                        if (reader["Reason"] != DBNull.Value)
                        {
                            oPromoDiscountRow.Reason = (string)reader["Reason"];
                        }
                        else
                        {
                            oPromoDiscountRow.Reason = "";
                        }
                        if (reader["ApproveRemarks"] != DBNull.Value)
                        {
                            oPromoDiscountRow.ApproveRemarks = (string)reader["ApproveRemarks"];
                        }
                        else
                        {
                            oPromoDiscountRow.ApproveRemarks = "";
                        }



                        if (reader["DiscountType"] != DBNull.Value)
                        {
                            oPromoDiscountRow.DiscountType = (string)reader["DiscountType"];
                        }
                        else
                        {
                            oPromoDiscountRow.DiscountType = "Amount";
                        }

                        if (reader["ProductID"] != DBNull.Value)
                        {
                            oPromoDiscountRow.ProductID = (int)reader["ProductID"];
                        }
                        else
                        {
                            oPromoDiscountRow.ProductID = -1;
                        }

                        if (reader["EMITenureID"] != DBNull.Value)
                        {
                            oPromoDiscountRow.EMITenureID = (int)reader["EMITenureID"];
                        }
                        else
                        {
                            oPromoDiscountRow.EMITenureID = -1;
                        }
                        if (reader["Terminal"] != DBNull.Value)
                        {
                            oPromoDiscountRow.Terminal = (int)reader["Terminal"];
                        }
                        else
                        {
                            oPromoDiscountRow.Terminal = 2;
                        }
                        oPromoDiscountRow.AuthorityID = (int)reader["AuthorityID"];


                    }
                    else if (sTableName == "t_SalesInvoiceDiscountType")
                    {
                        oPromoDiscountRow.DiscountID = (int)reader["DiscountTypeID"];
                        oPromoDiscountRow.DiscountTypeName = (string)reader["DiscountTypeName"];
                        oPromoDiscountRow.Type = (int)reader["Type"];
                        oPromoDiscountRow.SalesTypeDiscountType = (string)reader["SalesType"];
                        oPromoDiscountRow.IsActive = (int)reader["IsActive"];
                        oPromoDiscountRow.IsSystem = (int)reader["IsSystem"];
                        oPromoDiscountRow.CreateUserID = (int)reader["CreateUserID"];
                        oPromoDiscountRow.CreateDate = Convert.ToDateTime(reader["CreateDate"].ToString());
                        if (reader["UpdateUserID"] != DBNull.Value)
                        {
                            oPromoDiscountRow.UpdateUserID = (int)reader["UpdateUserID"];
                        }
                        else
                        {
                            oPromoDiscountRow.UpdateUserID = -1;
                        }
                        if (reader["UpdateDate"] != DBNull.Value)
                        {
                            oPromoDiscountRow.UpdateDate = Convert.ToDateTime(reader["UpdateDate"].ToString());
                        }

                        if(reader["IsMandatoryInstrumentNo"] != DBNull.Value)
                        {
                            oPromoDiscountRow.IsMandatoryInstrumentNo = (int)reader["IsMandatoryInstrumentNo"];
                        }
                        else
                        {
                            oPromoDiscountRow.IsMandatoryInstrumentNo = -1;
                        }

                    }

                    else if (sTableName == "t_PromoDiscountContributor")
                    {
                        oPromoDiscountRow.DiscountID = (int)reader["DiscountContributorID"];
                        oPromoDiscountRow.DiscountContributorName = (string)reader["DiscountContributorName"];
                        oPromoDiscountRow.CreateUserID = (int)reader["CreateUserID"];
                        oPromoDiscountRow.CreateDate = Convert.ToDateTime(reader["CreateDate"].ToString());

                    }
                    oDSPromoDiscount.PromoDiscount.AddPromoDiscountRow(oPromoDiscountRow);
                    oDSPromoDiscount.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Promo Discount Data (TableName=" + sTableName + " and WHID=" + nWarehouseID + ") ");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Promo Discount Data (TableName=" + sTableName + " and WHID=" + nWarehouseID + ")" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSPromoDiscount;
        }
        /// <summary>
        /// Get Product Price
        /// </summary>
        /// <param name="oDSProductDetail"></param>
        /// <returns></returns>
        /// 
        public DSFinishedGoodsPrice GetPtoductPrice(DSFinishedGoodsPrice oDSFinishedGoodsPrice, int nWarehouseID)
        {
            oDSFinishedGoodsPrice = new DSFinishedGoodsPrice();
            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }

                OleDbCommand cmd = DBController.Instance.GetCommand();
                cmd.CommandText = "select * from t_FinishedGoodsPrice a inner join t_DataTransfer b on b.DataID=a.PriceID "
                              + "  where b.TableName='t_FinishedGoodsPrice' and "
                              + "  b.IsDownload=1 and WarehouseID= '" + nWarehouseID + "' ";


                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSFinishedGoodsPrice.PriceRow oPriceRow = oDSFinishedGoodsPrice.Price.NewPriceRow();

                    oPriceRow.PriceID = (int)reader["PriceID"];
                    oPriceRow.ProductID = (int)reader["ProductID"];
                    oPriceRow.EffectiveDate = (DateTime)reader["EffectiveDate"];
                    oPriceRow.CostPrice = Convert.ToDouble(reader["CostPrice"].ToString());
                    if (reader["TradePrice"] != DBNull.Value)
                        oPriceRow.TradePrice = Convert.ToDouble(reader["TradePrice"].ToString());
                    else oPriceRow.TradePrice = -1;
                    oPriceRow.NSP = Convert.ToDouble(reader["NSP"].ToString());
                    oPriceRow.RSP = Convert.ToDouble(reader["RSP"].ToString());
                    if (reader["DistributorPrice"] != DBNull.Value)
                        oPriceRow.DistributorPrice = Convert.ToDouble(reader["DistributorPrice"].ToString());
                    else oPriceRow.DistributorPrice = -1;
                    if (reader["SpecialPrice"] != DBNull.Value)
                        oPriceRow.SpecialPrice = Convert.ToDouble(reader["SpecialPrice"].ToString());
                    else oPriceRow.SpecialPrice = -1;
                    if (reader["VAT"] != DBNull.Value)
                        oPriceRow.VAT = Convert.ToDouble(reader["VAT"].ToString());
                    else oPriceRow.VAT = -1;
                    if (reader["IsCurrent"] != DBNull.Value)
                        oPriceRow.IsCurrent = int.Parse(reader["IsCurrent"].ToString());
                    else oPriceRow.IsCurrent = -1;

                    if (reader["VATCP"] != DBNull.Value)
                        oPriceRow.VATCP = Convert.ToDouble(reader["VATCP"].ToString());
                    else oPriceRow.VATCP = 0;

                    oDSFinishedGoodsPrice.Price.AddPriceRow(oPriceRow);
                    oDSFinishedGoodsPrice.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Product Price ");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Product Price /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();

            return oDSFinishedGoodsPrice;
        }


        public DSCustomer GetCustomerCreditLimit(DSCustomer oDSCustomerCreditLimit, int nWarehouseID)
        {
            oDSCustomerCreditLimit = new DSCustomer();
            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }

                OleDbCommand cmd = DBController.Instance.GetCommand();
                cmd.CommandText = "Select CreditLimitID,CustomerID,isnull(MinCreditLimit,0) MinCreditLimit,EffectiveDate,ExpiryDate,UserID,isnull(MaxCreditLimit,0) MaxCreditLimit From t_CustomerCreditLimit a,t_DataTransfer b " +
                                "where a.CreditLimitID = b.DataID and b.TableName = 't_CustomerCreditLimit' " +
                                "and b.IsDownload = 1 and WarehouseID = " + nWarehouseID + "";


                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSCustomer.CustomerCreditLimitRow oCustomerCreditLimitRow = oDSCustomerCreditLimit.CustomerCreditLimit.NewCustomerCreditLimitRow();

                    oCustomerCreditLimitRow.CreditLimitID = (int)reader["CreditLimitID"];
                    oCustomerCreditLimitRow.CustomerID = (int)reader["CustomerID"];
                    oCustomerCreditLimitRow.MinCreditLimit = Convert.ToDouble(reader["MinCreditLimit"].ToString());
                    oCustomerCreditLimitRow.EffectiveDate = Convert.ToDateTime(reader["EffectiveDate"].ToString());
                    oCustomerCreditLimitRow.ExpiryDate = Convert.ToDateTime(reader["ExpiryDate"].ToString());
                    oCustomerCreditLimitRow.UserID = Convert.ToInt32(reader["UserID"].ToString());
                    oCustomerCreditLimitRow.MaxCreditLimit = Convert.ToDouble(reader["MaxCreditLimit"].ToString());


                    oDSCustomerCreditLimit.CustomerCreditLimit.AddCustomerCreditLimitRow(oCustomerCreditLimitRow);
                    oDSCustomerCreditLimit.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Customer Credit Limit");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Customer Credit Limit /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();

            return oDSCustomerCreditLimit;
        }

        /// <summary>
        /// Get Product Group
        /// </summary>
        /// 
        public DSProductGroups GetPtoductGroup(DSProductGroups oDSProductGroups, int nWarehouseID)
        {
            if (!DBController.Instance.CheckConnection())
            {
                DBController.Instance.OpenNewConnection();
            }

            oProductGroups = new ProductGroups();
            oDSProductGroups = new DSProductGroups();
            oProductGroups.GetAllGroupForPOS(nWarehouseID);
            DBController.Instance.CloseConnection();

            try
            {
                foreach (ProductGroup oProductGroup in oProductGroups)
                {
                    DSProductGroups.ProductGroupRow oProductGroupRow = oDSProductGroups.ProductGroup.NewProductGroupRow();

                    oProductGroupRow.PdtGroupName = oProductGroup.PdtGroupName;
                    oProductGroupRow.PdtGroupId = oProductGroup.PdtGroupID;
                    oProductGroupRow.PdtGroupCode = oProductGroup.PdtGroupCode;
                    oProductGroupRow.PdtGroupType = (short)oProductGroup.PdtGroupType;
                    oProductGroupRow.ParentId = (short)oProductGroup.ParentID;
                    oProductGroupRow.IsActive = (short)oProductGroup.IsActive;
                    oProductGroupRow.Pos = (short)oProductGroup.POS;
                    oProductGroupRow.TransferType = oProductGroup.TransferType;

                    oDSProductGroups.ProductGroup.AddProductGroupRow(oProductGroupRow);
                    oDSProductGroups.AcceptChanges();
                }
                AppLogger.LogInfo("Successfully Get Product Group ");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Product Group /" + ex.Message);
                throw (ex);
            }
            return oDSProductGroups;
        }

        /// <summary>
        /// Get Product Brand
        /// </summary>
        /// 
        public DSBrand GetPtoductBrand(DSBrand oDSBrand, int nWarehouseID)
        {
            if (!DBController.Instance.CheckConnection())
            {
                DBController.Instance.OpenNewConnection();
            }

            oBrands = new Brands();
            oDSBrand = new DSBrand();
            oBrands.GetALlBrandForPOS(nWarehouseID);
            DBController.Instance.CloseConnection();

            try
            {
                foreach (Brand oBrand in oBrands)
                {
                    DSBrand.BrandRow oBrandRow = oDSBrand.Brand.NewBrandRow();

                    oBrandRow.BrandID = oBrand.BrandID;
                    oBrandRow.BrandCode = oBrand.BrandCode;
                    oBrandRow.BrandDesc = oBrand.BrandDesc;
                    oBrandRow.IsActive = oBrand.IsActive.ToString();
                    oBrandRow.ParentID = oBrand.ParentID;
                    oBrandRow.BrandPos = oBrand.BrandPos;
                    oBrandRow.BrandLevel = oBrand.BrandLevel;
                    oBrandRow.TransferType = oBrand.TransferType;

                    oDSBrand.Brand.AddBrandRow(oBrandRow);
                    oDSBrand.AcceptChanges();
                }
                AppLogger.LogInfo("Successfully Get Brand ");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Brand /" + ex.Message);
                throw (ex);
            }
            return oDSBrand;
        }

        /// <summary>
        /// Get This System
        /// </summary>
        /// 
        public DSThisSystem GetThisSystem(DSThisSystem oDSThisSystem, int nWarehouseID)
        {
            oDSThisSystem = new DSThisSystem();
            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }

                OleDbCommand cmd = DBController.Instance.GetCommand();
                cmd.CommandText = "select * from t_ThisSystem a inner join t_DataTransfer b on b.DataID=a.ID "
                              + "  where b.TableName='t_ThisSystem' and "
                              + "  b.IsDownload=1 and WarehouseID= '" + nWarehouseID + "' ";


                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSThisSystem.ThisSystemRow oThisSystemRow = oDSThisSystem.ThisSystem.NewThisSystemRow();

                    oThisSystemRow.HCMobileNo = (string)reader["HCMobileNo"];
                    oThisSystemRow.HCPhoneNo = (string)reader["HCPhoneNo"];
                    oThisSystemRow.HCEmail = (string)reader["HCEmail"];
                    oThisSystemRow.VATRegistrationNo = reader["VATRegistrationNo"].ToString();
                    oThisSystemRow.POSVersionNo = reader["POSVersionNo"].ToString();

                    if (reader["IsNewVat"] != DBNull.Value)
                        oThisSystemRow.IsNewVat = int.Parse(reader["IsNewVat"].ToString());
                    else oThisSystemRow.IsNewVat = 0;

                    if (reader["NewVatActivationDate"] != DBNull.Value)
                        oThisSystemRow.NewVatActivationDate = Convert.ToDateTime(reader["NewVatActivationDate"].ToString());

                    if (reader["IsActiveSalesOrder"] != DBNull.Value)
                        oThisSystemRow.IsActiveSalesOrder = Convert.ToInt32(reader["IsActiveSalesOrder"].ToString());
                    else oThisSystemRow.IsActiveSalesOrder = 0;

                    if (reader["CentralRegisteredPersonAddress"] != DBNull.Value)
                        oThisSystemRow.CentralRegisteredPersonAddress = reader["CentralRegisteredPersonAddress"].ToString();
                    else oThisSystemRow.CentralRegisteredPersonAddress = "";

                    if (reader["IsThermalPrintEnable"] != DBNull.Value)
                        oThisSystemRow.IsThermalPrintEnable = Convert.ToInt32(reader["IsThermalPrintEnable"].ToString());
                    else oThisSystemRow.IsThermalPrintEnable = 0;



                    oDSThisSystem.ThisSystem.AddThisSystemRow(oThisSystemRow);
                    oDSThisSystem.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get This System Info");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting This System Info /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSThisSystem;
        }

        ///
        // Employee
        ///
        public DSEmployee GetEmployee(DSEmployee oDSEmployee, int nWarehouseID)
        {
            if (!DBController.Instance.CheckConnection())
            {
                DBController.Instance.OpenNewConnection();
            }

            OleDbCommand cmd = DBController.Instance.GetCommand();
            oDSEmployee = new DSEmployee();
            try
            {
                cmd.CommandText = "SELECT * FROM TELSysDB.dbo.v_EmployeeDetails a inner join t_DataTransfer b on b.DataID=a.EmployeeID "
                          + " where b.TableName=? and "
                          + " b.IsDownload= ? and WarehouseID= ? ";

                cmd.Parameters.AddWithValue("TableName", "v_EmployeeDetails");
                cmd.Parameters.AddWithValue("IsDownload", (int)Dictionary.IsDownload.No);
                cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSEmployee.EmployeeRow oEmployeeRow = oDSEmployee.Employee.NewEmployeeRow();

                    oEmployeeRow.EmployeeID = (int)reader["EmployeeID"];
                    oEmployeeRow.EmployeeCode = (string)reader["EmployeeCode"];
                    oEmployeeRow.EmployeeName = (string)reader["EmployeeName"];
                    if (reader["LocationID"] != DBNull.Value)
                        oEmployeeRow.LocationID = (int)reader["LocationID"];
                    oEmployeeRow.LocationName = reader["JobLocationName"].ToString();
                    oEmployeeRow.CompanyID = (int)reader["CompanyID"];
                    oEmployeeRow.CompanyName = (string)reader["CompanyName"];
                    oEmployeeRow.DesignationName = reader["DesignationName"].ToString();
                    oEmployeeRow.Status = Convert.ToInt32(reader["EMPStatus"].ToString());
                    oEmployeeRow.TransferType = (int)reader["TransferType"];

                    oDSEmployee.Employee.AddEmployeeRow(oEmployeeRow);
                    oDSEmployee.AcceptChanges();
                }

                reader.Close();
                AppLogger.LogInfo("Successfully Get Employee ");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Employee /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSEmployee;
        }

        ///
        // Warehouse
        ///
        public DSWarehouse GetWarehouse(DSWarehouse oDSWarehouse, int nWarehouseID)
        {
            DBController.Instance.OpenNewConnection();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            oDSWarehouse = new DSWarehouse();
            try
            {
                cmd.CommandText = "Select a.WarehouseID,WarehouseCode,WarehouseName,WarehouseParentID, " +
                                "StockType,IsActive,ChannelID,WarehouseType,isnull(ViewPosition, 0) ViewPosition,ThanaID, " +
                                "isnull(Remark, '') Remark,isnull(LocationID, -1) LocationID,isnull(ShortCode, '') ShortCode " +
                                "From t_Warehouse a, t_Datatransfer b " +
                                "where a.WarehouseID = b.DataID and b.WarehouseID = " + nWarehouseID + " and IsDownload = 1 " +
                                "and TableName = 't_Warehouse'";


                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSWarehouse.WarehouseRow oWarehouseRow = oDSWarehouse.Warehouse.NewWarehouseRow();

                    oWarehouseRow.WarehouseID = (int)reader["WarehouseID"];
                    oWarehouseRow.WarehouseCode = (string)reader["WarehouseCode"];
                    oWarehouseRow.WarehouseName = (string)reader["WarehouseName"];
                    oWarehouseRow.WarehouseParentID = (int)reader["WarehouseParentID"];
                    oWarehouseRow.StockType = (int)reader["StockType"];
                    oWarehouseRow.IsActive = (int)reader["IsActive"];
                    oWarehouseRow.ChannelID = (int)reader["ChannelID"];
                    oWarehouseRow.WarehouseType = (int)reader["WarehouseType"];
                    oWarehouseRow.ViewPosition = (int)reader["ViewPosition"];
                    oWarehouseRow.ThanaID = (int)reader["ThanaID"];
                    oWarehouseRow.Remark = (string)reader["Remark"];
                    oWarehouseRow.LocationID = (int)reader["LocationID"];
                    oWarehouseRow.ShortCode = reader["ShortCode"].ToString();


                    oDSWarehouse.Warehouse.AddWarehouseRow(oWarehouseRow);
                    oDSWarehouse.AcceptChanges();
                }

                reader.Close();
                AppLogger.LogInfo("Successfully Get Warehouse ");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Warehouse /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSWarehouse;
        }




        public DSTargetvsActual GetMAGWeekPositionTargetvsActual(DSTargetvsActual oDSTargetvsActual, int nWarehouseID,int TMonth,int TYear,int WeekNo,string sSalesPersonCode,string sType)
        {
            DBController.Instance.OpenNewConnection();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            oDSTargetvsActual = new DSTargetvsActual();
            string sSQL = "";
            try
            {
                //sSQL = "Select SE.EmployeeCode as SECode,Se.EmployeeName as SEName,isnull(ABM.ABMCode,'N/A') ABMCode, " +
                //                "isnull(ABM.ABMName,'N/A') ABMName,isnull(BM.BMCode,'N/A') BMCode,isnull(BM.BMName,'N/A') BMName,WeekNo,CMonth,CYear, " +
                //                "main.ShowroomCode,Channel as ChannelName,PGName,MAGName, " +
                //                "BrandDesc as BrandName,sum(TargetQty) TargetQty,sum(TargetAmount) TargetValue, " +
                //                "sum(SalesQty) SalesQty,sum(NetSales) NetSales From  " +
                //                "( " +
                //                "Select a.Channel,WeekNo,CMonth,CYear,ShowroomCode,a.WarehouseID,MAGID,e.ParentID as BrandID,SalesPersonID,0 TargetQty,0 TargetAmount, " +
                //                "SalesQty,NetSales " +
                //                "From DWDB.dbo.t_InvoiceWiseSalesDetail a " +
                //                "join TELSYSDB.DBO.t_Showroom b on a.WarehouseID=b.WarehouseID  " +
                //                "join TELSYSDB.DBO.t_Product c on a.ProductID=c.ProductID " +
                //                "join TELSysDB.dbo.v_ProductGroup d on c.ProductGroupID=d.AGID " +
                //                "join TElSYSdb.dbo.t_Brand e on c.BrandID=e.BrandID " +
                //                "join TELSysDB.dbo.t_CalendarWeek f on a.InvoiceDate between f.FromDate and f.ToDate " +
                //                "where Company='TEL' and BUID=2 " +
                //                "Union All " +
                //                "Select c.ChannelShortName,WeekNo,TMonth,TYear,ShowroomCode,b.WarehouseID,MAGID,BrandID,SalesPersonID,TargetQty,TargetAmount,0 as SalesQty,0 as NetSales " +
                //                "From TELSysDB.dbo.t_PlanExecutiveLeadTarget a " +
                //                "join TELSysDB.dbo.t_Showroom b on a.CustomerID=b.CustomerID " +
                //                "join TElSYSdb.dbo.t_Channel c on a.Channel=c.ChannelID " +
                //                "where TargetType=6 and a.Channel in (4,13) " +
                //                ") main " +
                //                "join TELSysDB.dbo.t_Employee SE on main.SalesPersonID=se.EmployeeID " +
                //                "join  " +
                //                "( " +
                //                "Select mag.PdtGroupID as MAGID,mag.PdtGroupName as MAGName,pg.PdtGroupID as PGID,pg.PdtGroupName as PGname  " +
                //                "From TELSysDB.dbo.t_ProductGroup MAG " +
                //                "join TELSysDB.dbo.t_ProductGroup PG  " +
                //                "on mag.PdtGroupType=2 and mag.ParentID=pg.PdtGroupID " +
                //                ") MAGPG on main.MAGID=MAGPG.MAGID " +
                //                "join TELSysDB.dbo.t_Brand Brand on main.BrandID=Brand.BrandID " +
                //                "left outer join  " +
                //                "( " +
                //                "select WarehouseID,ShowroomCode,b.EmployeeID as BMID,b.EmployeeCode as BMCode, " +
                //                "b.EmployeeName as BMName " +
                //                "from TELSysDB.dbo.t_HRPosition  a " +
                //                "join TELSysDB.dbo.t_Employee b on a.EmployeeID=b.employeeid " +
                //                "join TElSYSDB.dbo.t_Showroom c on b.LocationID=c.LocationID " +
                //                "where role=11 and sbuid=2 " +
                //                ") BM on main.WarehouseID=BM.WarehouseID " +
                //                "Left outer join  " +
                //                "( " +
                //                "Select SE.EmployeeID as SalesPersonID,EMP.EmployeeID as ABMID, " +
                //                "emp.EmployeeCode as ABMCode,emp.EmployeeName as ABMName,SE.ProductGroupID as PGID " +
                //                "From TELSysDB.dbo.t_HRPosition SE " +
                //                "join TELSysDB.dbo.t_HRPosition ABM on se.ParentID=ABM.PositionID " +
                //                "join TELSysDB.dbo.t_Employee EMP on ABM.EmployeeID=emp.EmployeeID " +
                //                "where SE.role=12  " +
                //                ") ABM on main.SalesPersonID=ABM.SalesPersonID and MAGPG.PGID=ABM.PGID " +
                //                "where CMonth=" + TMonth + " and CYear=" + TYear + " and main.WarehouseID=" + nWarehouseID + "";

                sSQL = String.Format(@"Select PGName,PGCategory,sum(TargetQty) TargetQty,sum(TargetAmount) TargetValue, 
                    sum(SalesQty) SalesQty,sum(NetSales) NetSales,GETDATE() as SystemDate From  ( 

                    Select a.Channel,WeekNo,CMonth,
                    CYear,ShowroomCode,a.WarehouseID,MAGID,e.ParentID as BrandID,SalesPersonID,0 TargetQty,
                    0 TargetAmount, SalesQty,NetSales From DWDB.dbo.t_InvoiceWiseSalesDetail a join 
                    TELSYSDB.DBO.t_Showroom b on a.WarehouseID=b.WarehouseID  join TELSYSDB.DBO.t_Product c 
                    on a.ProductID=c.ProductID join TELSysDB.dbo.v_ProductGroup d on c.ProductGroupID=d.AGID 
                    join TElSYSdb.dbo.t_Brand e on c.BrandID=e.BrandID join TELSysDB.dbo.t_CalendarWeek f
                    on a.InvoiceDate between f.FromDate and f.ToDate where Company='TEL' and BUID=2 


                    Union All 


                    Select c.ChannelShortName,WeekNo,TMonth,TYear,ShowroomCode,b.WarehouseID,
                    MAGID,BrandID,SalesPersonID,TargetQty,TargetAmount,0 as SalesQty,0 as NetSales 
                    From TELSysDB.dbo.t_PlanExecutiveLeadTarget a join TELSysDB.dbo.t_Showroom b 
                    on a.CustomerID=b.CustomerID join TElSYSdb.dbo.t_Channel c on a.Channel=c.ChannelID 
                    where TargetType=6 and a.Channel in (4,13) 


                    ) main join TELSysDB.dbo.t_Employee SE 
                    on main.SalesPersonID=se.EmployeeID --and TargetQty+TargetAmount +SalesQty+NetSales>0
                    join  
                    ( Select mag.PdtGroupID as MAGID,mag.PdtGroupName 
                    as MAGName,pg.PdtGroupID as PGID,pg.PdtGroupName as PGname ,pg.PGCategory,PG.POS  
                    From TELSysDB.dbo.t_ProductGroup MAG join TELSysDB.dbo.t_ProductGroup PG  
                    on mag.PdtGroupType=2 and mag.ParentID=pg.PdtGroupID ) MAGPG on main.MAGID=MAGPG.MAGID
 
                    join TELSysDB.dbo.t_Brand Brand on main.BrandID=Brand.BrandID 
                    left outer join  
                    ( select WarehouseID,ShowroomCode,b.EmployeeID as BMID,b.EmployeeCode as BMCode, 
                    b.EmployeeName as BMName from TELSysDB.dbo.t_HRPosition  a join TELSysDB.dbo.t_Employee b 
                    on a.EmployeeID=b.employeeid join TElSYSDB.dbo.t_Showroom c on b.LocationID=c.LocationID 
                    where role=11 and sbuid=2 ) BM on main.WarehouseID=BM.WarehouseID 
                    Left outer join  
                    ( Select distinct EMP.EmployeeID as ABMID, emp.EmployeeCode 
                    as ABMCode,emp.EmployeeName as ABMName,SE.ProductGroupID as PGID, WarehouseID From 
                    TELSysDB.dbo.t_HRPosition SE join TELSysDB.dbo.t_HRPosition ABM on 
                    se.ParentID=ABM.PositionID join TELSysDB.dbo.t_Employee EMP on 
                    ABM.EmployeeID=emp.EmployeeID
                    join t_showroom sr on(emp.LocationID=sr.LocationID) where SE.role=12 ) ABM 
                    on MAGPG.PGID=ABM.PGID and main.WarehouseID=abm.WarehouseID where CMonth={0} and CYear={1} and main.WarehouseID={2} ", TMonth, TYear, nWarehouseID);


                // "where CMonth=2 and CYear=2022 and main.WarehouseID=47  " +
                if (WeekNo != -1)
                {
                    sSQL = sSQL + " and WeekNo=" + WeekNo + "";
                }
                //if (sSalesPersonCode != "")
                //{
                //    if (sType == "SE")
                //        sSQL = sSQL + " and SE.EmployeeCode=" + sSalesPersonCode + "";
                //    else if (sType == "ABM") sSQL = sSQL + " and ABM.ABMCode=" + sSalesPersonCode + "";
                //}

                //sSQL = sSQL + " group by WeekNo,CMonth,CYear,main.ShowroomCode,Channel,MAGName,PGname, " +
                // "BrandDesc, SE.EmployeeCode,Se.EmployeeName,ABM.ABMCode,ABM.ABMName, " +
                // "BM.BMCode,BM.BMName";

                sSQL = sSQL + " group by PGname,PGCategory, POS order by PGCategory,POS";


                cmd.CommandText = sSQL;
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSTargetvsActual.MAGWeekPositionTargetvsActualRow oMAGWeekPositionTargetvsActualRow = oDSTargetvsActual.MAGWeekPositionTargetvsActual.NewMAGWeekPositionTargetvsActualRow();

                    //oMAGWeekPositionTargetvsActualRow.SECode = (string)reader["SECode"];
                    //oMAGWeekPositionTargetvsActualRow.SEName = (string)reader["SEName"];
                    //oMAGWeekPositionTargetvsActualRow.ABMCode = (string)reader["ABMCode"];
                    //oMAGWeekPositionTargetvsActualRow.ABMName = (string)reader["ABMName"];
                    //oMAGWeekPositionTargetvsActualRow.BMCode = (string)reader["BMCode"];
                    //oMAGWeekPositionTargetvsActualRow.BMName = (string)reader["BMName"];
                    //oMAGWeekPositionTargetvsActualRow.Week = (int)reader["WeekNo"];
                    //oMAGWeekPositionTargetvsActualRow.Month = (int)reader["CMonth"];
                    //oMAGWeekPositionTargetvsActualRow.Year = (int)reader["CYear"];
                    oMAGWeekPositionTargetvsActualRow.PGName = (string)reader["PGname"];
                    oMAGWeekPositionTargetvsActualRow.PGCategory = (string)reader["PGCategory"];
                    //oMAGWeekPositionTargetvsActualRow.MAGName = (string)reader["MAGName"];
                    //oMAGWeekPositionTargetvsActualRow.BrandName = (string)reader["BrandName"];
                    //oMAGWeekPositionTargetvsActualRow.ChannelName = (string)reader["ChannelName"];
                    //oMAGWeekPositionTargetvsActualRow.ShowroomCode = (string)reader["ShowroomCode"];
                    oMAGWeekPositionTargetvsActualRow.TargetQty = (int)reader["TargetQty"];
                    oMAGWeekPositionTargetvsActualRow.SalesQty = (int)reader["SalesQty"];
                    oMAGWeekPositionTargetvsActualRow.TargetValue = (double)reader["TargetValue"];
                    oMAGWeekPositionTargetvsActualRow.NetSales = (double)reader["NetSales"];
                    oMAGWeekPositionTargetvsActualRow.SystemDate = (DateTime)reader["SystemDate"];

                    oDSTargetvsActual.MAGWeekPositionTargetvsActual.AddMAGWeekPositionTargetvsActualRow(oMAGWeekPositionTargetvsActualRow);
                    oDSTargetvsActual.AcceptChanges();
                }

                reader.Close();
                AppLogger.LogInfo("Successfully Get MAG,Week,Position Target vs Actual Data.WarehouseID=" + nWarehouseID + "  ");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Successfully Get MAG,Week,Position Target vs Actual Data .WarehouseID=" + nWarehouseID + " /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSTargetvsActual;
        }

        ///
        // Promotion TD
        ///
        public DSPromotion GetPromotion(DSPromotion oDSPromotion, int nWarehouseID)
        {
            DSPromotion oDSSalesPromotion = new DSPromotion();
            DSPromotion oDSSPChannel = new DSPromotion();
            DSPromotion oDSSPWarehouse = new DSPromotion();
            DSPromotion oDSSPProduct = new DSPromotion();
            DSPromotion oDSSPSlab = new DSPromotion();
            DSPromotion oDSSPSlabReatio = new DSPromotion();
            DSPromotion oDSSPFreeProduct = new DSPromotion();
            DSPromotion oDSSPDiscount = new DSPromotion();
            DSPromotion oDSSPType = new DSPromotion();


            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }

                oSPromotions = new SPromotions();
                oSPromotions.RefreshAll(nWarehouseID);
                DBController.Instance.CloseConnection();
                oDSPromotion = new DSPromotion();
                foreach (SPromotion oSPromotion in oSPromotions)
                {
                    DSPromotion.SalesPromotionRow oSalesPromotionRow = oDSSalesPromotion.SalesPromotion.NewSalesPromotionRow();

                    oSalesPromotionRow.SalesPromotionID = oSPromotion.SalesPromotionID;
                    oSalesPromotionRow.SalesPromotionNo = oSPromotion.SalesPromotionNo;
                    oSalesPromotionRow.SalesPromotionName = oSPromotion.SalesPromotionName;
                    oSalesPromotionRow.FromDate = oSPromotion.FromDate;
                    oSalesPromotionRow.Todate = oSPromotion.ToDate;
                    oSalesPromotionRow.IsActive = oSPromotion.IsActive;
                    oSalesPromotionRow.TransferType = oSPromotion.TransferType;

                    oDSSalesPromotion.SalesPromotion.AddSalesPromotionRow(oSalesPromotionRow);
                    oDSSalesPromotion.AcceptChanges();

                    foreach (SPChannel oSPChannel in oSPromotion.SPChannels)
                    {
                        DSPromotion.SPChannelRow oSPChannelRow = oDSSPChannel.SPChannel.NewSPChannelRow();

                        oSPChannelRow.SalesPromotionID = oSPromotion.SalesPromotionID;
                        oSPChannelRow.ChannelID = oSPChannel.ChannelID;

                        oDSSPChannel.SPChannel.AddSPChannelRow(oSPChannelRow);
                        oDSSPChannel.AcceptChanges();
                    }
                    foreach (SPWarehouse oSPWarehouse in oSPromotion.SPWarehouses)
                    {
                        DSPromotion.SPWarehouseRow oSPWarehouseRow = oDSSPWarehouse.SPWarehouse.NewSPWarehouseRow();

                        oSPWarehouseRow.SalesPromotionID = oSPromotion.SalesPromotionID;
                        oSPWarehouseRow.WarehouseID = oSPWarehouse.WarehouseID;

                        oDSSPWarehouse.SPWarehouse.AddSPWarehouseRow(oSPWarehouseRow);
                        oDSSPWarehouse.AcceptChanges();
                    }
                    foreach (SPProduct oSPProduct in oSPromotion.SPProducts)
                    {
                        DSPromotion.SPProductRow oSPProductRow = oDSSPProduct.SPProduct.NewSPProductRow();

                        oSPProductRow.SalesPromotionID = oSPromotion.SalesPromotionID;
                        oSPProductRow.ProductID = oSPProduct.ProductID;
                        oSPProductRow.Qty = oSPProduct.Qty;

                        oDSSPProduct.SPProduct.AddSPProductRow(oSPProductRow);
                        oDSSPProduct.AcceptChanges();
                    }
                    foreach (SPProductGroup oSPProductGroup in oSPromotion.SPProductGroups)
                    {
                        DSPromotion.SPDiscountRow oSPDiscountRow = oDSSPDiscount.SPDiscount.NewSPDiscountRow();

                        oSPDiscountRow.SalesPromoDiscountID = oSPProductGroup.SalesPromoDiscountID;
                        oSPDiscountRow.SalesPromotionID = oSPProductGroup.SalesPromotionID;
                        oSPDiscountRow.ProductGroupType = oSPProductGroup.ProductGroupType;
                        oSPDiscountRow.ProductGroupID = oSPProductGroup.ProductGroupID;
                        oSPDiscountRow.DiscountType = oSPProductGroup.DiscountType;
                        oSPDiscountRow.DiscountPercentage = oSPProductGroup.DiscountPercentage;

                        oDSSPDiscount.SPDiscount.AddSPDiscountRow(oSPDiscountRow);
                        oDSSPDiscount.AcceptChanges();
                    }
                    foreach (SalesPromotionSlab oSalesPromotionSlab in oSPromotion)
                    {
                        DSPromotion.SPSlabRow oSPSlabRow = oDSSPSlab.SPSlab.NewSPSlabRow();

                        oSPSlabRow.CPSID = oSalesPromotionSlab.CPSID;
                        oSPSlabRow.SalesPromotionID = oSPromotion.SalesPromotionID;
                        oSPSlabRow.SlabNo = oSalesPromotionSlab.SlabNo;
                        oSPSlabRow.SlabName = oSalesPromotionSlab.SlabName;
                        oSPSlabRow.IsActive = oSalesPromotionSlab.IsActive;
                        oSPSlabRow.DiscountType = oSalesPromotionSlab.DiscountType;
                        oSPSlabRow.Discount = oSalesPromotionSlab.Discount;

                        oDSSPSlab.SPSlab.AddSPSlabRow(oSPSlabRow);
                        oDSSPSlab.AcceptChanges();

                        foreach (SPSlabRatio oSPSlabRatio in oSalesPromotionSlab.SPSlabAllRatio)
                        {
                            DSPromotion.SPSlabReatioRow oSPSlabReatioRow = oDSSPSlabReatio.SPSlabReatio.NewSPSlabReatioRow();

                            oSPSlabReatioRow.CPSID = oSalesPromotionSlab.CPSID;
                            oSPSlabReatioRow.ProductID = oSPSlabRatio.ProductID;
                            oSPSlabReatioRow.Qty = oSPSlabRatio.Qty;

                            oDSSPSlabReatio.SPSlabReatio.AddSPSlabReatioRow(oSPSlabReatioRow);
                            oDSSPSlabReatio.AcceptChanges();
                        }
                        foreach (SPFreeProduct oSPFreeProduct in oSalesPromotionSlab.SPFreeProducts)
                        {
                            DSPromotion.SPFreeProductRow oSPFreeProductRow = oDSSPFreeProduct.SPFreeProduct.NewSPFreeProductRow();

                            oSPFreeProductRow.CPSID = oSalesPromotionSlab.CPSID;
                            oSPFreeProductRow.ProductID = oSPFreeProduct.ProductID;
                            oSPFreeProductRow.Qty = oSPFreeProduct.Qty;

                            oDSSPFreeProduct.SPFreeProduct.AddSPFreeProductRow(oSPFreeProductRow);
                            oDSSPFreeProduct.AcceptChanges();
                        }

                    }

                    foreach (SPType oSPType in oSPromotion.SPTypes)
                    {
                        DSPromotion.SPTypeRow oSPTypeRow = oDSSPType.SPType.NewSPTypeRow();

                        oSPTypeRow.SalesPromotionID = oSPromotion.SalesPromotionID;
                        oSPTypeRow.SalesPromotionTypeID = oSPType.SalesPromotionTypeID;

                        oDSSPType.SPType.AddSPTypeRow(oSPTypeRow);
                        oDSSPType.AcceptChanges();
                    }
                }
                AppLogger.LogInfo("Successfully Get Product Promotion ");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Product Promotion /" + ex.Message);
                throw (ex);
            }

            oDSPromotion.Merge(oDSSalesPromotion);
            oDSPromotion.Merge(oDSSPChannel);
            oDSPromotion.Merge(oDSSPWarehouse);
            oDSPromotion.Merge(oDSSPProduct);
            oDSPromotion.Merge(oDSSPSlab);
            oDSPromotion.Merge(oDSSPSlabReatio);
            oDSPromotion.Merge(oDSSPFreeProduct);
            oDSPromotion.Merge(oDSSPDiscount);
            oDSPromotion.Merge(oDSSPType);
            oDSPromotion.AcceptChanges();

            return oDSPromotion;
        }

        public DSPromotion GetSalesPromotionNew1(DSPromotion oDSPromotion, int nWarehouseID, string sTableName)
        {

            DSPromotion oDSPromo = new DSPromotion();
            DSPromotion oDSPromoProductFor = new DSPromotion();
            DSPromotion oDSPromoWarehouse = new DSPromotion();
            DSPromotion oDSPromoType = new DSPromotion();
            DSPromotion oDSPromoSalesType = new DSPromotion();
            DSPromotion oDSPromoSlab = new DSPromotion();
            DSPromotion oDSPromoSlabReatio = new DSPromotion();
            DSPromotion oDSPromoOffer = new DSPromotion();
            DSPromotion oDSPromoOfferDetail = new DSPromotion();
            DSPromotion oDSPromoDiscountContribution = new DSPromotion();

            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }
                ConsumerPromotions oConsumerPromotions = new ConsumerPromotions();
                oConsumerPromotions.GetSalesPromoByWH(nWarehouseID, sTableName);
                AppLogger.LogInfo("Successfully Get All header data Promo (" + sTableName + ") ");
                oDSPromotion = new DSPromotion();
                foreach (ConsumerPromotion oConsumerPromotion in oConsumerPromotions)
                {
                    int nPromoID = 0;
                    DSPromotion.PromoRow oPromoRow = oDSPromo.Promo.NewPromoRow();
                    oPromoRow.ConsumerPromoID = oConsumerPromotion.ConsumerPromoID;
                    nPromoID = oConsumerPromotion.ConsumerPromoID;
                    oPromoRow.ConsumerPromoNo = oConsumerPromotion.ConsumerPromoNo;
                    oPromoRow.ConsumerPromoName = oConsumerPromotion.ConsumerPromoName;
                    oPromoRow.FromDate = oConsumerPromotion.FromDate;
                    oPromoRow.ToDate = oConsumerPromotion.ToDate;
                    oPromoRow.CreateDate = oConsumerPromotion.CreateDate;
                    oPromoRow.CreateUserID = oConsumerPromotion.CreateUserID;
                    oPromoRow.Remarks = oConsumerPromotion.Remarks;
                    oPromoRow.IsActive = oConsumerPromotion.IsActive;
                    oPromoRow.UpdateUserID = oConsumerPromotion.UpdateUserID;
                    oPromoRow.Status = oConsumerPromotion.Status;
                    if (oConsumerPromotion.UpdateDate != null)
                    {
                        oPromoRow.UpdateDate = Convert.ToDateTime(oConsumerPromotion.UpdateDate).Date;
                    }
                    oPromoRow.ApprovedUserID = oConsumerPromotion.ApprovedUserID;
                    if (oConsumerPromotion.ApprovedDate != null)
                    {
                        oPromoRow.ApprovedDate = Convert.ToDateTime(oConsumerPromotion.ApprovedDate).Date;
                    }
                    oDSPromo.Promo.AddPromoRow(oPromoRow);
                    oDSPromo.AcceptChanges();



                    if (!DBController.Instance.CheckConnection())
                    {
                        DBController.Instance.OpenNewConnection();
                    }
                    //For Product
                    ConsumerPromotionProductFors oConsumerPromotionProductFors = new ConsumerPromotionProductFors();
                    oConsumerPromotionProductFors.Refresh(nPromoID, sTableName);
                    foreach (ConsumerPromotionProductFor oConsumerPromotionProductFor in oConsumerPromotionProductFors)
                    {
                        DSPromotion.PromoProductForRow oPromoProductForRow = oDSPromoProductFor.PromoProductFor.NewPromoProductForRow();

                        oPromoProductForRow.ConsumerPromoID = oConsumerPromotionProductFor.ConsumerPromoID;
                        oPromoProductForRow.GroupTypeID = oConsumerPromotionProductFor.GroupTypeID;
                        if (sTableName == "t_PromoCP")
                        {
                            oPromoProductForRow.ProductID = oConsumerPromotionProductFor.ProductID;
                        }
                        if (sTableName == "t_PromoTP")
                        {
                            oPromoProductForRow.ProductGroupID = oConsumerPromotionProductFor.ProductGroupID;
                            oPromoProductForRow.BrandID = oConsumerPromotionProductFor.BrandID;
                        }
                        oPromoProductForRow.TargetQty = oConsumerPromotionProductFor.TGTQty;
                        oPromoProductForRow.RegularSalesQty = oConsumerPromotionProductFor.RegularSalesQty;
                        oPromoProductForRow.DiscountRatio = oConsumerPromotionProductFor.DiscountRatio;
                        oDSPromoProductFor.PromoProductFor.AddPromoProductForRow(oPromoProductForRow);
                        oDSPromoProductFor.AcceptChanges();
                    }

                    //Warehouse
                    if (!DBController.Instance.CheckConnection())
                    {
                        DBController.Instance.OpenNewConnection();
                    }
                    ConsumerPromotions oPromoWarehouse = new ConsumerPromotions();
                    oPromoWarehouse.GetPromoWHByPromoID(nPromoID, sTableName);
                    foreach (ConsumerPromotion oPromoWH in oPromoWarehouse)
                    {
                        DSPromotion.PromoWarehouseRow oPromoWarehouseRow = oDSPromoWarehouse.PromoWarehouse.NewPromoWarehouseRow();
                        oPromoWarehouseRow.ConsumerPromoID = oPromoWH.ConsumerPromoID;
                        oPromoWarehouseRow.WarehouseID = oPromoWH.WarehouseID;
                        oDSPromoWarehouse.PromoWarehouse.AddPromoWarehouseRow(oPromoWarehouseRow);
                        oDSPromoWarehouse.AcceptChanges();
                    }

                    //Sales Type
                    if (!DBController.Instance.CheckConnection())
                    {
                        DBController.Instance.OpenNewConnection();
                    }
                    SPChannels oPromoSalesTypes = new SPChannels();
                    oPromoSalesTypes.Refresh(nPromoID, sTableName);

                    foreach (SPChannel oSPChannel in oPromoSalesTypes)
                    {
                        DSPromotion.PromoSalesTypeRow oPromoSalesTypeRow = oDSPromoSalesType.PromoSalesType.NewPromoSalesTypeRow();

                        oPromoSalesTypeRow.ConsumerPromoID = oSPChannel.SalesPromotionID;
                        oPromoSalesTypeRow.SalesType = oSPChannel.ChannelID;

                        oDSPromoSalesType.PromoSalesType.AddPromoSalesTypeRow(oPromoSalesTypeRow);
                        oDSPromoSalesType.AcceptChanges();
                    }
                    //Promo Type
                    if (!DBController.Instance.CheckConnection())
                    {
                        DBController.Instance.OpenNewConnection();
                    }
                    SPTypes oPromoTypes = new SPTypes();
                    oPromoTypes.Refresh(nPromoID, sTableName);
                    foreach (SPType oSPType in oPromoTypes)
                    {
                        DSPromotion.PromoTypeRow oPromoTypeRow = oDSPromoType.PromoType.NewPromoTypeRow();

                        oPromoTypeRow.ConsumerPromoID = oSPType.SalesPromotionID;
                        oPromoTypeRow.ConsumerPromoTypeID = oSPType.SalesPromotionTypeID;

                        oDSPromoType.PromoType.AddPromoTypeRow(oPromoTypeRow);
                        oDSPromoType.AcceptChanges();
                    }

                    //Promo Discount Contribution
                    if (!DBController.Instance.CheckConnection())
                    {
                        DBController.Instance.OpenNewConnection();
                    }
                    PromoDiscountContributors oPromoDiscountContributors = new PromoDiscountContributors();
                    oPromoDiscountContributors.Refresh(nPromoID, sTableName);
                    foreach (PromoDiscountContributor oPromoDiscountContributor in oPromoDiscountContributors)
                    {
                        DSPromotion.PromoDiscountContributionRow oPromoDiscountContributionRow = oDSPromoDiscountContribution.PromoDiscountContribution.NewPromoDiscountContributionRow();

                        oPromoDiscountContributionRow.ConsumerPromoID = oPromoDiscountContributor.ConsumerPromoID;
                        oPromoDiscountContributionRow.DiscountContributorID = oPromoDiscountContributor.DiscountContributorID;
                        oPromoDiscountContributionRow.Amount = oPromoDiscountContributor.Amount;
                        oDSPromoDiscountContribution.PromoDiscountContribution.AddPromoDiscountContributionRow(oPromoDiscountContributionRow);
                        oDSPromoDiscountContribution.AcceptChanges();
                    }
                    //Promo Slab
                    if (!DBController.Instance.CheckConnection())
                    {
                        DBController.Instance.OpenNewConnection();
                    }
                    ConsumerPromotions oSlab = new ConsumerPromotions();
                    oSlab.GetSlabByPromoID(nPromoID, sTableName);
                    foreach (ConsumerPromotionSlab oConsumerPromotionSlab in oSlab)
                    {
                        DSPromotion.PromoSlabRow oPromoSlabRow = oDSPromoSlab.PromoSlab.NewPromoSlabRow();
                        oPromoSlabRow.ConsumerPromoID = oConsumerPromotionSlab.ConsumerPromoID;
                        oPromoSlabRow.SlabID = oConsumerPromotionSlab.SlabID;
                        oPromoSlabRow.SlabName = oConsumerPromotionSlab.SlabName;
                        oPromoSlabRow.IsActive = oConsumerPromotionSlab.IsActive;
                        oPromoSlabRow.CreateDate = Convert.ToDateTime(oConsumerPromotionSlab.CreateDate);
                        oPromoSlabRow.CreateUserID = oConsumerPromotionSlab.CreateUserID;
                        if (oConsumerPromotionSlab.UpdateDate != null)
                            oPromoSlabRow.UpdateDate = Convert.ToDateTime(oConsumerPromotionSlab.UpdateDate).Date;
                        oPromoSlabRow.UpdateUserID = oConsumerPromotionSlab.UpdateUserID;
                        if (sTableName == "t_PromoTP")
                            oPromoSlabRow.MinInvoiceQty = oConsumerPromotionSlab.MinInvoiceQty;

                        oDSPromoSlab.PromoSlab.AddPromoSlabRow(oPromoSlabRow);
                        oDSPromoSlab.AcceptChanges();

                        //Promotion Slab Ratio
                        if (!DBController.Instance.CheckConnection())
                        {
                            DBController.Instance.OpenNewConnection();
                        }
                        ConsumerPromotionSlabRatios oConsumerPromotionSlabRatios = new ConsumerPromotionSlabRatios();
                        oConsumerPromotionSlabRatios.Refresh(nPromoID, oPromoSlabRow.SlabID, sTableName);
                        foreach (ConsumerPromotionSlabRatio oConsumerPromotionSlabRatio in oConsumerPromotionSlabRatios)
                        {
                            DSPromotion.PromoSlabRatioRow oPromoSlabRatioRow = oDSPromoSlabReatio.PromoSlabRatio.NewPromoSlabRatioRow();
                            oPromoSlabRatioRow.ConsumerPromoID = oConsumerPromotionSlabRatio.ConsumerPromoID;
                            oPromoSlabRatioRow.SlabID = oConsumerPromotionSlabRatio.SlabID;
                            if (sTableName == "t_PromoCP")
                            {
                                oPromoSlabRatioRow.ProductID = oConsumerPromotionSlabRatio.ProductID;
                                oPromoSlabRatioRow.Qty = oConsumerPromotionSlabRatio.Qty;
                            }
                            else if (sTableName == "t_PromoTP")
                            {
                                oPromoSlabRatioRow.ProductGroupID = oConsumerPromotionSlabRatio.ProductGroupID;
                                oPromoSlabRatioRow.GroupTypeID = oConsumerPromotionSlabRatio.GroupTypeID;
                                oPromoSlabRatioRow.BrandID = oConsumerPromotionSlabRatio.BrandID;
                                oPromoSlabRatioRow.MinQty = oConsumerPromotionSlabRatio.Qty;
                            }
                            oDSPromoSlabReatio.PromoSlabRatio.AddPromoSlabRatioRow(oPromoSlabRatioRow);
                            oDSPromoSlabReatio.AcceptChanges();
                        }

                        //Promotion Offer
                        if (!DBController.Instance.CheckConnection())
                        {
                            DBController.Instance.OpenNewConnection();
                        }
                        ConsumerPromotionOffers oConsumerPromotionOffers = new ConsumerPromotionOffers();
                        oConsumerPromotionOffers.Refresh(nPromoID, oPromoSlabRow.SlabID, sTableName);
                        foreach (ConsumerPromotionOffer oConsumerPromotionOffer in oConsumerPromotionOffers)
                        {
                            DSPromotion.PromoOfferRow oPromoOfferRow = oDSPromoOffer.PromoOffer.NewPromoOfferRow();
                            oPromoOfferRow.ConsumerPromoID = oConsumerPromotionOffer.ConsumerPromoID;
                            oPromoOfferRow.OfferID = oConsumerPromotionOffer.OfferID;
                            oPromoOfferRow.SlabID = oConsumerPromotionOffer.SlabID;
                            oPromoOfferRow.OfferName = oConsumerPromotionOffer.OfferName;
                            oPromoOfferRow.Description = oConsumerPromotionOffer.Description;
                            oPromoOfferRow.CreateDate = oConsumerPromotionOffer.CreateDate;
                            oPromoOfferRow.CreateUserID = oConsumerPromotionOffer.CreateUserID;
                            oPromoOfferRow.IsActive = oConsumerPromotionOffer.IsActive;
                            oDSPromoOffer.PromoOffer.AddPromoOfferRow(oPromoOfferRow);
                            oDSPromoOffer.AcceptChanges();

                            //Promotion OfferDetail
                            if (!DBController.Instance.CheckConnection())
                            {
                                DBController.Instance.OpenNewConnection();
                            }
                            ConsumerPromotionOffer oConsumerPromotionOfferDetail = new ConsumerPromotionOffer();
                            oConsumerPromotionOfferDetail.RefreshOfferDetail(nPromoID, oConsumerPromotionOffer.SlabID, oConsumerPromotionOffer.OfferID, sTableName);

                            foreach (ConsumerPromotionOfferDetail oDetail in oConsumerPromotionOfferDetail)
                            {
                                DSPromotion.PromoOfferDetailRow oPromoOfferDetailRow = oDSPromoOfferDetail.PromoOfferDetail.NewPromoOfferDetailRow();
                                oPromoOfferDetailRow.ConsumerPromoID = oDetail.ConsumerPromoID;
                                oPromoOfferDetailRow.OfferID = oDetail.OfferID;
                                oPromoOfferDetailRow.SlabID = oDetail.SlabID;
                                oPromoOfferDetailRow.OfferType = oDetail.OfferType;
                                oPromoOfferDetailRow.OfferProductID = oDetail.OfferProductID;
                                oPromoOfferDetailRow.OfferQty = oDetail.OfferQty;
                                oPromoOfferDetailRow.Discount = oDetail.Discount;
                                if (sTableName == "t_PromoCP")
                                {
                                    oPromoOfferDetailRow.EMITenureID = oDetail.EMITenureID;
                                }
                                oDSPromoOfferDetail.PromoOfferDetail.AddPromoOfferDetailRow(oPromoOfferDetailRow);
                                oDSPromoOfferDetail.AcceptChanges();

                            }
                        }

                    }
                }
                if (sTableName == "t_PromoCP")
                {
                    AppLogger.LogInfo("Successfully Get Promo CP ");
                }
                else if (sTableName == "t_PromoTP")
                {
                    AppLogger.LogInfo("Successfully Get Promo TP ");
                }
            }
            catch (Exception ex)
            {
                if (sTableName == "t_PromoCP")
                {
                    AppLogger.LogError("Error Getting Promo CP /" + ex.Message);
                }
                else if (sTableName == "t_PromoTP")
                {
                    AppLogger.LogError("Error Getting Promo CP /" + ex.Message);
                }

                throw (ex);
            }

            oDSPromotion.Merge(oDSPromo);
            oDSPromotion.Merge(oDSPromoProductFor);
            oDSPromotion.Merge(oDSPromoWarehouse);
            oDSPromotion.Merge(oDSPromoType);
            oDSPromotion.Merge(oDSPromoSalesType);
            oDSPromotion.Merge(oDSPromoSlab);
            oDSPromotion.Merge(oDSPromoSlabReatio);
            oDSPromotion.Merge(oDSPromoOffer);
            oDSPromotion.Merge(oDSPromoOfferDetail);
            oDSPromotion.Merge(oDSPromoDiscountContribution);
            oDSPromotion.AcceptChanges();

            return oDSPromotion;
        }
        public DSPromotion GetSalesPromotionNewxxxxx(DSPromotion oDSPromotion, int nWarehouseID, string sTableName)
        {

            DSPromotion oDSPromo = new DSPromotion();
            DSPromotion oDSPromoProductFor = new DSPromotion();
            DSPromotion oDSPromoWarehouse = new DSPromotion();
            DSPromotion oDSPromoType = new DSPromotion();
            DSPromotion oDSPromoSalesType = new DSPromotion();
            DSPromotion oDSPromoSlab = new DSPromotion();
            DSPromotion oDSPromoSlabReatio = new DSPromotion();
            DSPromotion oDSPromoOffer = new DSPromotion();
            DSPromotion oDSPromoOfferDetail = new DSPromotion();
            DSPromotion oDSPromoDiscountContribution = new DSPromotion();

            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }
                ConsumerPromotions oConsumerPromotions = new ConsumerPromotions();
                oConsumerPromotions.GetSalesPromoByWH(nWarehouseID, sTableName);
                AppLogger.LogInfo("Successfully Get All header data Promo (" + sTableName + ") ");
                oDSPromotion = new DSPromotion();
                foreach (ConsumerPromotion oConsumerPromotion in oConsumerPromotions)
                {
                    int nPromoID = 0;
                    DSPromotion.PromoRow oPromoRow = oDSPromo.Promo.NewPromoRow();
                    oPromoRow.ConsumerPromoID = oConsumerPromotion.ConsumerPromoID;
                    nPromoID = oConsumerPromotion.ConsumerPromoID;
                    oPromoRow.ConsumerPromoNo = oConsumerPromotion.ConsumerPromoNo;
                    oPromoRow.ConsumerPromoName = oConsumerPromotion.ConsumerPromoName;
                    oPromoRow.FromDate = oConsumerPromotion.FromDate;
                    oPromoRow.ToDate = oConsumerPromotion.ToDate;
                    oPromoRow.CreateDate = oConsumerPromotion.CreateDate;
                    oPromoRow.CreateUserID = oConsumerPromotion.CreateUserID;
                    oPromoRow.Remarks = oConsumerPromotion.Remarks;
                    oPromoRow.IsActive = oConsumerPromotion.IsActive;
                    oPromoRow.UpdateUserID = oConsumerPromotion.UpdateUserID;
                    oPromoRow.Status = oConsumerPromotion.Status;
                    if (oConsumerPromotion.UpdateDate != null)
                    {
                        oPromoRow.UpdateDate = Convert.ToDateTime(oConsumerPromotion.UpdateDate).Date;
                    }
                    oPromoRow.ApprovedUserID = oConsumerPromotion.ApprovedUserID;
                    if (oConsumerPromotion.ApprovedDate != null)
                    {
                        oPromoRow.ApprovedDate = Convert.ToDateTime(oConsumerPromotion.ApprovedDate).Date;
                    }
                    oPromoRow.TransferType = oConsumerPromotion.TransferType;
                    oPromoRow.IsApplicableOnOfferPrice = oConsumerPromotion.IsApplicableOnOfferPrice;



                    oDSPromo.Promo.AddPromoRow(oPromoRow);
                    oDSPromo.AcceptChanges();
                    if (oConsumerPromotion.TransferType == (int)Dictionary.DataTransferType.Add)
                    {
                        //For Product
                        if (!DBController.Instance.CheckConnection())
                        {
                            DBController.Instance.OpenNewConnection();
                        }
                        ConsumerPromotionProductFors oConsumerPromotionProductFors = new ConsumerPromotionProductFors();
                        oConsumerPromotionProductFors.Refresh(nPromoID, sTableName);
                        foreach (ConsumerPromotionProductFor oConsumerPromotionProductFor in oConsumerPromotionProductFors)
                        {
                            DSPromotion.PromoProductForRow oPromoProductForRow = oDSPromoProductFor.PromoProductFor.NewPromoProductForRow();

                            oPromoProductForRow.ConsumerPromoID = oConsumerPromotionProductFor.ConsumerPromoID;
                            oPromoProductForRow.GroupTypeID = oConsumerPromotionProductFor.GroupTypeID;
                            if (sTableName == "t_PromoCP")
                            {
                                oPromoProductForRow.ProductID = oConsumerPromotionProductFor.ProductID;
                            }
                            if (sTableName == "t_PromoTP")
                            {
                                oPromoProductForRow.ProductGroupID = oConsumerPromotionProductFor.ProductGroupID;
                                oPromoProductForRow.BrandID = oConsumerPromotionProductFor.BrandID;
                            }
                            oPromoProductForRow.TargetQty = oConsumerPromotionProductFor.TGTQty;
                            oPromoProductForRow.RegularSalesQty = oConsumerPromotionProductFor.RegularSalesQty;
                            oPromoProductForRow.DiscountRatio = oConsumerPromotionProductFor.DiscountRatio;

                            oPromoProductForRow.IsApplicableOnAllSKU = oConsumerPromotionProductFor.IsApplicableOnAllSKU;
                            oPromoProductForRow.ApplicableProductID = oConsumerPromotionProductFor.ApplicableProductID;

                            oDSPromoProductFor.PromoProductFor.AddPromoProductForRow(oPromoProductForRow);
                            oDSPromoProductFor.AcceptChanges();
                        }

                        //Warehouse
                        if (!DBController.Instance.CheckConnection())
                        {
                            DBController.Instance.OpenNewConnection();
                        }
                        ConsumerPromotions oPromoWarehouse = new ConsumerPromotions();
                        oPromoWarehouse.GetPromoWHByPromoID(nPromoID, sTableName);
                        foreach (ConsumerPromotion oPromoWH in oPromoWarehouse)
                        {
                            DSPromotion.PromoWarehouseRow oPromoWarehouseRow = oDSPromoWarehouse.PromoWarehouse.NewPromoWarehouseRow();
                            oPromoWarehouseRow.ConsumerPromoID = oPromoWH.ConsumerPromoID;
                            oPromoWarehouseRow.WarehouseID = oPromoWH.WarehouseID;
                            oDSPromoWarehouse.PromoWarehouse.AddPromoWarehouseRow(oPromoWarehouseRow);
                            oDSPromoWarehouse.AcceptChanges();
                        }

                        //Sales Type
                        if (!DBController.Instance.CheckConnection())
                        {
                            DBController.Instance.OpenNewConnection();
                        }
                        SPChannels oPromoSalesTypes = new SPChannels();
                        oPromoSalesTypes.Refresh(nPromoID, sTableName);

                        foreach (SPChannel oSPChannel in oPromoSalesTypes)
                        {
                            DSPromotion.PromoSalesTypeRow oPromoSalesTypeRow = oDSPromoSalesType.PromoSalesType.NewPromoSalesTypeRow();

                            oPromoSalesTypeRow.ConsumerPromoID = oSPChannel.SalesPromotionID;
                            oPromoSalesTypeRow.SalesType = oSPChannel.ChannelID;
                            oPromoSalesTypeRow.CustomerType = oSPChannel.CustType;
                            oDSPromoSalesType.PromoSalesType.AddPromoSalesTypeRow(oPromoSalesTypeRow);
                            oDSPromoSalesType.AcceptChanges();
                        }
                        //Promo Type
                        if (!DBController.Instance.CheckConnection())
                        {
                            DBController.Instance.OpenNewConnection();
                        }
                        SPTypes oPromoTypes = new SPTypes();
                        oPromoTypes.Refresh(nPromoID, sTableName);
                        foreach (SPType oSPType in oPromoTypes)
                        {
                            DSPromotion.PromoTypeRow oPromoTypeRow = oDSPromoType.PromoType.NewPromoTypeRow();

                            oPromoTypeRow.ConsumerPromoID = oSPType.SalesPromotionID;
                            oPromoTypeRow.ConsumerPromoTypeID = oSPType.SalesPromotionTypeID;

                            oDSPromoType.PromoType.AddPromoTypeRow(oPromoTypeRow);
                            oDSPromoType.AcceptChanges();
                        }

                        //Promo Discount Contribution
                        if (!DBController.Instance.CheckConnection())
                        {
                            DBController.Instance.OpenNewConnection();
                        }
                        PromoDiscountContributors oPromoDiscountContributors = new PromoDiscountContributors();
                        oPromoDiscountContributors.Refresh(nPromoID, sTableName);
                        foreach (PromoDiscountContributor oPromoDiscountContributor in oPromoDiscountContributors)
                        {
                            DSPromotion.PromoDiscountContributionRow oPromoDiscountContributionRow = oDSPromoDiscountContribution.PromoDiscountContribution.NewPromoDiscountContributionRow();

                            oPromoDiscountContributionRow.ConsumerPromoID = oPromoDiscountContributor.ConsumerPromoID;
                            oPromoDiscountContributionRow.DiscountContributorID = oPromoDiscountContributor.DiscountContributorID;
                            oPromoDiscountContributionRow.Amount = oPromoDiscountContributor.Amount;
                            oDSPromoDiscountContribution.PromoDiscountContribution.AddPromoDiscountContributionRow(oPromoDiscountContributionRow);
                            oDSPromoDiscountContribution.AcceptChanges();
                        }
                        //Promo Slab
                        if (!DBController.Instance.CheckConnection())
                        {
                            DBController.Instance.OpenNewConnection();
                        }
                        ConsumerPromotions oSlab = new ConsumerPromotions();
                        oSlab.GetSlabByPromoID(nPromoID, sTableName);
                        foreach (ConsumerPromotionSlab oConsumerPromotionSlab in oSlab)
                        {
                            DSPromotion.PromoSlabRow oPromoSlabRow = oDSPromoSlab.PromoSlab.NewPromoSlabRow();
                            oPromoSlabRow.ConsumerPromoID = oConsumerPromotionSlab.ConsumerPromoID;
                            oPromoSlabRow.SlabID = oConsumerPromotionSlab.SlabID;
                            oPromoSlabRow.SlabName = oConsumerPromotionSlab.SlabName;
                            oPromoSlabRow.IsActive = oConsumerPromotionSlab.IsActive;
                            oPromoSlabRow.CreateDate = Convert.ToDateTime(oConsumerPromotionSlab.CreateDate);
                            oPromoSlabRow.CreateUserID = oConsumerPromotionSlab.CreateUserID;
                            if (oConsumerPromotionSlab.UpdateDate != null)
                                oPromoSlabRow.UpdateDate = Convert.ToDateTime(oConsumerPromotionSlab.UpdateDate).Date;
                            oPromoSlabRow.UpdateUserID = oConsumerPromotionSlab.UpdateUserID;
                            if (sTableName == "t_PromoTP")
                                oPromoSlabRow.MinInvoiceQty = oConsumerPromotionSlab.MinInvoiceQty;

                            oDSPromoSlab.PromoSlab.AddPromoSlabRow(oPromoSlabRow);
                            oDSPromoSlab.AcceptChanges();

                            //Promotion Slab Ratio
                            if (!DBController.Instance.CheckConnection())
                            {
                                DBController.Instance.OpenNewConnection();
                            }
                            ConsumerPromotionSlabRatios oConsumerPromotionSlabRatios = new ConsumerPromotionSlabRatios();
                            oConsumerPromotionSlabRatios.Refresh(nPromoID, oPromoSlabRow.SlabID, sTableName);
                            foreach (ConsumerPromotionSlabRatio oConsumerPromotionSlabRatio in oConsumerPromotionSlabRatios)
                            {
                                DSPromotion.PromoSlabRatioRow oPromoSlabRatioRow = oDSPromoSlabReatio.PromoSlabRatio.NewPromoSlabRatioRow();
                                oPromoSlabRatioRow.ConsumerPromoID = oConsumerPromotionSlabRatio.ConsumerPromoID;
                                oPromoSlabRatioRow.SlabID = oConsumerPromotionSlabRatio.SlabID;
                                if (sTableName == "t_PromoCP")
                                {
                                    oPromoSlabRatioRow.ProductID = oConsumerPromotionSlabRatio.ProductID;
                                    oPromoSlabRatioRow.Qty = oConsumerPromotionSlabRatio.Qty;
                                }
                                else if (sTableName == "t_PromoTP")
                                {
                                    oPromoSlabRatioRow.ProductGroupID = oConsumerPromotionSlabRatio.ProductGroupID;
                                    oPromoSlabRatioRow.GroupTypeID = oConsumerPromotionSlabRatio.GroupTypeID;
                                    oPromoSlabRatioRow.BrandID = oConsumerPromotionSlabRatio.BrandID;
                                    oPromoSlabRatioRow.MinQty = oConsumerPromotionSlabRatio.Qty;
                                }
                                oDSPromoSlabReatio.PromoSlabRatio.AddPromoSlabRatioRow(oPromoSlabRatioRow);
                                oDSPromoSlabReatio.AcceptChanges();
                            }

                            //Promotion Offer
                            if (!DBController.Instance.CheckConnection())
                            {
                                DBController.Instance.OpenNewConnection();
                            }
                            ConsumerPromotionOffers oConsumerPromotionOffers = new ConsumerPromotionOffers();
                            oConsumerPromotionOffers.Refresh(nPromoID, oPromoSlabRow.SlabID, sTableName);
                            foreach (ConsumerPromotionOffer oConsumerPromotionOffer in oConsumerPromotionOffers)
                            {
                                DSPromotion.PromoOfferRow oPromoOfferRow = oDSPromoOffer.PromoOffer.NewPromoOfferRow();
                                oPromoOfferRow.ConsumerPromoID = oConsumerPromotionOffer.ConsumerPromoID;
                                oPromoOfferRow.OfferID = oConsumerPromotionOffer.OfferID;
                                oPromoOfferRow.SlabID = oConsumerPromotionOffer.SlabID;
                                oPromoOfferRow.OfferName = oConsumerPromotionOffer.OfferName;
                                oPromoOfferRow.Description = oConsumerPromotionOffer.Description;
                                oPromoOfferRow.CreateDate = oConsumerPromotionOffer.CreateDate;
                                oPromoOfferRow.CreateUserID = oConsumerPromotionOffer.CreateUserID;
                                oPromoOfferRow.IsActive = oConsumerPromotionOffer.IsActive;
                                oDSPromoOffer.PromoOffer.AddPromoOfferRow(oPromoOfferRow);
                                oDSPromoOffer.AcceptChanges();

                                //Promotion OfferDetail
                                if (!DBController.Instance.CheckConnection())
                                {
                                    DBController.Instance.OpenNewConnection();
                                }
                                ConsumerPromotionOffer oConsumerPromotionOfferDetail = new ConsumerPromotionOffer();
                                oConsumerPromotionOfferDetail.RefreshOfferDetail(nPromoID, oConsumerPromotionOffer.SlabID, oConsumerPromotionOffer.OfferID, sTableName);

                                foreach (ConsumerPromotionOfferDetail oDetail in oConsumerPromotionOfferDetail)
                                {
                                    DSPromotion.PromoOfferDetailRow oPromoOfferDetailRow = oDSPromoOfferDetail.PromoOfferDetail.NewPromoOfferDetailRow();
                                    oPromoOfferDetailRow.ConsumerPromoID = oDetail.ConsumerPromoID;
                                    oPromoOfferDetailRow.OfferID = oDetail.OfferID;
                                    oPromoOfferDetailRow.SlabID = oDetail.SlabID;
                                    oPromoOfferDetailRow.OfferType = oDetail.OfferType;
                                    oPromoOfferDetailRow.OfferProductID = oDetail.OfferProductID;
                                    oPromoOfferDetailRow.OfferQty = oDetail.OfferQty;
                                    oPromoOfferDetailRow.Discount = oDetail.Discount;
                                    if (sTableName == "t_PromoCP")
                                    {
                                        oPromoOfferDetailRow.EMITenureID = oDetail.EMITenureID;
                                    }
                                    oDSPromoOfferDetail.PromoOfferDetail.AddPromoOfferDetailRow(oPromoOfferDetailRow);
                                    oDSPromoOfferDetail.AcceptChanges();

                                }
                            }

                        }


                    }
                }
                if (sTableName == "t_PromoCP")
                {
                    AppLogger.LogInfo("Successfully Get Promo CP ");
                }
                else if (sTableName == "t_PromoTP")
                {
                    AppLogger.LogInfo("Successfully Get Promo TP ");
                }
            }
            catch (Exception ex)
            {
                if (sTableName == "t_PromoCP")
                {
                    AppLogger.LogError("Error Getting Promo CP /" + ex.Message);
                }
                else if (sTableName == "t_PromoTP")
                {
                    AppLogger.LogError("Error Getting Promo CP /" + ex.Message);
                }

                throw (ex);
            }

            oDSPromotion.Merge(oDSPromo);
            oDSPromotion.Merge(oDSPromoProductFor);
            oDSPromotion.Merge(oDSPromoWarehouse);
            oDSPromotion.Merge(oDSPromoType);
            oDSPromotion.Merge(oDSPromoSalesType);
            oDSPromotion.Merge(oDSPromoSlab);
            oDSPromotion.Merge(oDSPromoSlabReatio);
            oDSPromotion.Merge(oDSPromoOffer);
            oDSPromotion.Merge(oDSPromoOfferDetail);
            oDSPromotion.Merge(oDSPromoDiscountContribution);
            oDSPromotion.AcceptChanges();

            return oDSPromotion;
        }
        public DSPromotion GetSalesPromotionNew(DSPromotion oDSPromotion, int nWarehouseID, string sTableName)
        {

            DSPromotion oDSPromo = new DSPromotion();
            DSPromotion oDSPromoProductFor = new DSPromotion();
            DSPromotion oDSPromoWarehouse = new DSPromotion();
            DSPromotion oDSPromoType = new DSPromotion();
            DSPromotion oDSPromoSalesType = new DSPromotion();
            DSPromotion oDSPromoSlab = new DSPromotion();
            DSPromotion oDSPromoSlabReatio = new DSPromotion();
            DSPromotion oDSPromoOffer = new DSPromotion();
            DSPromotion oDSPromoOfferDetail = new DSPromotion();
            DSPromotion oDSPromoDiscountContribution = new DSPromotion();
            string sPromoID = "";
            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }
                ConsumerPromotions oConsumerPromotions = new ConsumerPromotions();
                oConsumerPromotions.GetSalesPromoByWH(nWarehouseID, sTableName);
                AppLogger.LogInfo("Successfully Get All header data Promo (" + sTableName + ") and WarehouseID=" + nWarehouseID + "");
                oDSPromotion = new DSPromotion();

                foreach (ConsumerPromotion oConsumerPromotion in oConsumerPromotions)
                {
                    int nPromoID = 0;
                    DSPromotion.PromoRow oPromoRow = oDSPromo.Promo.NewPromoRow();
                    oPromoRow.ConsumerPromoID = oConsumerPromotion.ConsumerPromoID;
                    if (oConsumerPromotion.TransferType == (int)Dictionary.DataTransferType.Add)
                    {
                        if (sPromoID == "")
                            sPromoID = oPromoRow.ConsumerPromoID.ToString();
                        else sPromoID = sPromoID + "," + oPromoRow.ConsumerPromoID;
                    }
                    nPromoID = oConsumerPromotion.ConsumerPromoID;
                    oPromoRow.ConsumerPromoNo = oConsumerPromotion.ConsumerPromoNo;
                    oPromoRow.ConsumerPromoName = oConsumerPromotion.ConsumerPromoName;
                    oPromoRow.FromDate = oConsumerPromotion.FromDate;
                    oPromoRow.ToDate = oConsumerPromotion.ToDate;
                    oPromoRow.CreateDate = oConsumerPromotion.CreateDate;
                    oPromoRow.CreateUserID = oConsumerPromotion.CreateUserID;
                    oPromoRow.Remarks = oConsumerPromotion.Remarks;
                    oPromoRow.IsActive = oConsumerPromotion.IsActive;
                    oPromoRow.UpdateUserID = oConsumerPromotion.UpdateUserID;
                    oPromoRow.Status = oConsumerPromotion.Status;
                    if (oConsumerPromotion.UpdateDate != null)
                    {
                        oPromoRow.UpdateDate = Convert.ToDateTime(oConsumerPromotion.UpdateDate).Date;
                    }
                    oPromoRow.ApprovedUserID = oConsumerPromotion.ApprovedUserID;
                    if (oConsumerPromotion.ApprovedDate != null)
                    {
                        oPromoRow.ApprovedDate = Convert.ToDateTime(oConsumerPromotion.ApprovedDate).Date;
                    }
                    oPromoRow.TransferType = oConsumerPromotion.TransferType;
                    oPromoRow.IsApplicableOnOfferPrice = oConsumerPromotion.IsApplicableOnOfferPrice;

                    oDSPromo.Promo.AddPromoRow(oPromoRow);
                    oDSPromo.AcceptChanges();
                }
            }
            catch (Exception ex)
            {
                AppLogger.LogInfo("Error Getting Promo CP (" + sTableName + ") and WarehouseID=" + nWarehouseID + "" + ex.Message);
                throw (ex);
            }
            try
            {
                if (sPromoID == "")
                {
                    oDSPromotion.Merge(oDSPromo);
                    oDSPromotion.Merge(oDSPromoProductFor);
                    oDSPromotion.Merge(oDSPromoWarehouse);
                    oDSPromotion.Merge(oDSPromoType);
                    oDSPromotion.Merge(oDSPromoSalesType);
                    oDSPromotion.Merge(oDSPromoSlab);
                    oDSPromotion.Merge(oDSPromoSlabReatio);
                    oDSPromotion.Merge(oDSPromoOffer);
                    oDSPromotion.Merge(oDSPromoOfferDetail);
                    oDSPromotion.Merge(oDSPromoDiscountContribution);
                    oDSPromotion.AcceptChanges();

                    return oDSPromotion;
                }
                //For Product
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }
                ConsumerPromotionProductFors oConsumerPromotionProductFors = new ConsumerPromotionProductFors();
                oConsumerPromotionProductFors.GetForProduct(sPromoID, sTableName);
                AppLogger.LogInfo("Successfully Get Promo Product For (" + sTableName + ") and WarehouseID=" + nWarehouseID + "");
                foreach (ConsumerPromotionProductFor oConsumerPromotionProductFor in oConsumerPromotionProductFors)
                {
                    DSPromotion.PromoProductForRow oPromoProductForRow = oDSPromoProductFor.PromoProductFor.NewPromoProductForRow();

                    oPromoProductForRow.ConsumerPromoID = oConsumerPromotionProductFor.ConsumerPromoID;
                    oPromoProductForRow.GroupTypeID = oConsumerPromotionProductFor.GroupTypeID;
                    if (sTableName == "t_PromoCP")
                    {
                        oPromoProductForRow.ProductID = oConsumerPromotionProductFor.ProductID;
                    }
                    if (sTableName == "t_PromoTP")
                    {
                        oPromoProductForRow.ProductGroupID = oConsumerPromotionProductFor.ProductGroupID;
                        oPromoProductForRow.BrandID = oConsumerPromotionProductFor.BrandID;
                    }
                    oPromoProductForRow.TargetQty = oConsumerPromotionProductFor.TGTQty;
                    oPromoProductForRow.RegularSalesQty = oConsumerPromotionProductFor.RegularSalesQty;
                    oPromoProductForRow.DiscountRatio = oConsumerPromotionProductFor.DiscountRatio;

                    oPromoProductForRow.IsApplicableOnAllSKU = oConsumerPromotionProductFor.IsApplicableOnAllSKU;
                    oPromoProductForRow.ApplicableProductID = oConsumerPromotionProductFor.ApplicableProductID;

                    oDSPromoProductFor.PromoProductFor.AddPromoProductForRow(oPromoProductForRow);
                    oDSPromoProductFor.AcceptChanges();
                }
            }
            catch (Exception ex)
            {
                AppLogger.LogInfo("Error Getting Promo Product For (" + sTableName + ") and WarehouseID=" + nWarehouseID + "" + ex.Message);
                throw (ex);
            }
            try
            {
                //Warehouse
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }
                ConsumerPromotions oPromoWarehouse = new ConsumerPromotions();
                oPromoWarehouse.GetPromoWHByPromoIDWeb(sPromoID, sTableName, nWarehouseID);
                AppLogger.LogInfo("Successfully Get Promo Warehouse  (" + sTableName + ") and WarehouseID=" + nWarehouseID + "");
                foreach (ConsumerPromotion oPromoWH in oPromoWarehouse)
                {
                    DSPromotion.PromoWarehouseRow oPromoWarehouseRow = oDSPromoWarehouse.PromoWarehouse.NewPromoWarehouseRow();
                    oPromoWarehouseRow.ConsumerPromoID = oPromoWH.ConsumerPromoID;
                    oPromoWarehouseRow.WarehouseID = oPromoWH.WarehouseID;
                    oDSPromoWarehouse.PromoWarehouse.AddPromoWarehouseRow(oPromoWarehouseRow);
                    oDSPromoWarehouse.AcceptChanges();
                }
            }
            catch (Exception ex)
            {
                AppLogger.LogInfo("Error Getting Promo Warehouse  (" + sTableName + ") and WarehouseID=" + nWarehouseID + "" + ex.Message);
                throw (ex);
            }
            try
            {
                //Sales Type
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }
                SPChannels oPromoSalesTypes = new SPChannels();
                oPromoSalesTypes.GetPromoSalesType(sPromoID, sTableName);
                AppLogger.LogInfo("Successfully Get Promo SalesType  (" + sTableName + ") and WarehouseID=" + nWarehouseID + "");
                foreach (SPChannel oSPChannel in oPromoSalesTypes)
                {
                    DSPromotion.PromoSalesTypeRow oPromoSalesTypeRow = oDSPromoSalesType.PromoSalesType.NewPromoSalesTypeRow();

                    oPromoSalesTypeRow.ConsumerPromoID = oSPChannel.SalesPromotionID;
                    oPromoSalesTypeRow.SalesType = oSPChannel.ChannelID;
                    oPromoSalesTypeRow.CustomerType = oSPChannel.CustType;
                    oDSPromoSalesType.PromoSalesType.AddPromoSalesTypeRow(oPromoSalesTypeRow);
                    oDSPromoSalesType.AcceptChanges();
                }
            }
            catch (Exception ex)
            {
                AppLogger.LogInfo("Error Getting Promo SalesType  (" + sTableName + ") and WarehouseID=" + nWarehouseID + "" + ex.Message);
                throw (ex);
            }
            try
            {
                //Promo Type
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }
                SPTypes oPromoTypes = new SPTypes();
                oPromoTypes.GetPromoType(sPromoID, sTableName);
                AppLogger.LogInfo("Successfully Get Promo Type  (" + sTableName + ") and WarehouseID=" + nWarehouseID + "");
                foreach (SPType oSPType in oPromoTypes)
                {
                    DSPromotion.PromoTypeRow oPromoTypeRow = oDSPromoType.PromoType.NewPromoTypeRow();

                    oPromoTypeRow.ConsumerPromoID = oSPType.SalesPromotionID;
                    oPromoTypeRow.ConsumerPromoTypeID = oSPType.SalesPromotionTypeID;

                    oDSPromoType.PromoType.AddPromoTypeRow(oPromoTypeRow);
                    oDSPromoType.AcceptChanges();
                }
            }
            catch (Exception ex)
            {
                AppLogger.LogInfo("Error Getting Promo Type  (" + sTableName + ") and WarehouseID=" + nWarehouseID + "" + ex.Message);
                throw (ex);
            }

            try
            {
                //Promo Discount Contribution
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }
                PromoDiscountContributors oPromoDiscountContributors = new PromoDiscountContributors();
                oPromoDiscountContributors.GetDiscountContribution(sPromoID, sTableName);
                AppLogger.LogInfo("Successfully Get Discount Contribution  (" + sTableName + ") and WarehouseID=" + nWarehouseID + "");
                foreach (PromoDiscountContributor oPromoDiscountContributor in oPromoDiscountContributors)
                {
                    DSPromotion.PromoDiscountContributionRow oPromoDiscountContributionRow = oDSPromoDiscountContribution.PromoDiscountContribution.NewPromoDiscountContributionRow();

                    oPromoDiscountContributionRow.ConsumerPromoID = oPromoDiscountContributor.ConsumerPromoID;
                    oPromoDiscountContributionRow.DiscountContributorID = oPromoDiscountContributor.DiscountContributorID;
                    oPromoDiscountContributionRow.Amount = oPromoDiscountContributor.Amount;
                    oDSPromoDiscountContribution.PromoDiscountContribution.AddPromoDiscountContributionRow(oPromoDiscountContributionRow);
                    oDSPromoDiscountContribution.AcceptChanges();
                }
            }
            catch (Exception ex)
            {
                AppLogger.LogInfo("Error Getting Discount Contribution  (" + sTableName + ") and WarehouseID=" + nWarehouseID + "" + ex.Message);
                throw (ex);
            }

            try
            {
                //Promo Slab
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }
                ConsumerPromotions oSlab = new ConsumerPromotions();
                oSlab.GetSlabByPromoIDWEB(sPromoID, sTableName);
                AppLogger.LogInfo("Successfully Get Promo Slab (" + sTableName + ") and WarehouseID=" + nWarehouseID + "");
                foreach (ConsumerPromotionSlab oConsumerPromotionSlab in oSlab)
                {
                    DSPromotion.PromoSlabRow oPromoSlabRow = oDSPromoSlab.PromoSlab.NewPromoSlabRow();
                    oPromoSlabRow.ConsumerPromoID = oConsumerPromotionSlab.ConsumerPromoID;
                    oPromoSlabRow.SlabID = oConsumerPromotionSlab.SlabID;
                    oPromoSlabRow.SlabName = oConsumerPromotionSlab.SlabName;
                    oPromoSlabRow.IsActive = oConsumerPromotionSlab.IsActive;
                    oPromoSlabRow.CreateDate = Convert.ToDateTime(oConsumerPromotionSlab.CreateDate);
                    oPromoSlabRow.CreateUserID = oConsumerPromotionSlab.CreateUserID;
                    if (oConsumerPromotionSlab.UpdateDate != null)
                        oPromoSlabRow.UpdateDate = Convert.ToDateTime(oConsumerPromotionSlab.UpdateDate).Date;
                    oPromoSlabRow.UpdateUserID = oConsumerPromotionSlab.UpdateUserID;
                    if (sTableName == "t_PromoTP")
                        oPromoSlabRow.MinInvoiceQty = oConsumerPromotionSlab.MinInvoiceQty;

                    oDSPromoSlab.PromoSlab.AddPromoSlabRow(oPromoSlabRow);
                    oDSPromoSlab.AcceptChanges();
                }
            }
            catch (Exception ex)
            {
                AppLogger.LogInfo("Error Getting Promo Slab (" + sTableName + ") and WarehouseID=" + nWarehouseID + "" + ex.Message);
                throw (ex);
            }
            try
            {
                ///Promotion Slab Ratio
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }
                ConsumerPromotionSlabRatios oConsumerPromotionSlabRatios = new ConsumerPromotionSlabRatios();
                oConsumerPromotionSlabRatios.GetSlabRatio(sPromoID, sTableName);
                AppLogger.LogInfo("Successfully Get Promo Slab Ratio(" + sTableName + ") and WarehouseID=" + nWarehouseID + "");
                foreach (ConsumerPromotionSlabRatio oConsumerPromotionSlabRatio in oConsumerPromotionSlabRatios)
                {
                    DSPromotion.PromoSlabRatioRow oPromoSlabRatioRow = oDSPromoSlabReatio.PromoSlabRatio.NewPromoSlabRatioRow();
                    oPromoSlabRatioRow.ConsumerPromoID = oConsumerPromotionSlabRatio.ConsumerPromoID;
                    oPromoSlabRatioRow.SlabID = oConsumerPromotionSlabRatio.SlabID;
                    if (sTableName == "t_PromoCP")
                    {
                        oPromoSlabRatioRow.ProductID = oConsumerPromotionSlabRatio.ProductID;
                        oPromoSlabRatioRow.Qty = oConsumerPromotionSlabRatio.Qty;
                    }
                    else if (sTableName == "t_PromoTP")
                    {
                        oPromoSlabRatioRow.ProductGroupID = oConsumerPromotionSlabRatio.ProductGroupID;
                        oPromoSlabRatioRow.GroupTypeID = oConsumerPromotionSlabRatio.GroupTypeID;
                        oPromoSlabRatioRow.BrandID = oConsumerPromotionSlabRatio.BrandID;
                        oPromoSlabRatioRow.MinQty = oConsumerPromotionSlabRatio.Qty;
                    }
                    oDSPromoSlabReatio.PromoSlabRatio.AddPromoSlabRatioRow(oPromoSlabRatioRow);
                    oDSPromoSlabReatio.AcceptChanges();
                }
            }
            catch (Exception ex)
            {
                AppLogger.LogInfo("Error Getting Promo Slab Ratio(" + sTableName + ") and WarehouseID=" + nWarehouseID + "" + ex.Message);
                throw (ex);
            }

            try
            {
                //Promotion Offer
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }
                ConsumerPromotionOffers oConsumerPromotionOffers = new ConsumerPromotionOffers();
                oConsumerPromotionOffers.GetPromoOffer(sPromoID, sTableName);
                AppLogger.LogInfo("Successfully Get Promo Offer (" + sTableName + ") and WarehouseID=" + nWarehouseID + "");
                foreach (ConsumerPromotionOffer oConsumerPromotionOffer in oConsumerPromotionOffers)
                {
                    DSPromotion.PromoOfferRow oPromoOfferRow = oDSPromoOffer.PromoOffer.NewPromoOfferRow();
                    oPromoOfferRow.ConsumerPromoID = oConsumerPromotionOffer.ConsumerPromoID;
                    oPromoOfferRow.OfferID = oConsumerPromotionOffer.OfferID;
                    oPromoOfferRow.SlabID = oConsumerPromotionOffer.SlabID;
                    oPromoOfferRow.OfferName = oConsumerPromotionOffer.OfferName;
                    oPromoOfferRow.Description = oConsumerPromotionOffer.Description;
                    oPromoOfferRow.CreateDate = oConsumerPromotionOffer.CreateDate;
                    oPromoOfferRow.CreateUserID = oConsumerPromotionOffer.CreateUserID;
                    oPromoOfferRow.IsActive = oConsumerPromotionOffer.IsActive;
                    oDSPromoOffer.PromoOffer.AddPromoOfferRow(oPromoOfferRow);
                    oDSPromoOffer.AcceptChanges();
                }
            }
            catch (Exception ex)
            {
                AppLogger.LogInfo("Error Getting Promo Offer(" + sTableName + ") and WarehouseID=" + nWarehouseID + "" + ex.Message);
                throw (ex);
            }

            try
            {
                //Promotion OfferDetail
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }
                ConsumerPromotionOffer oConsumerPromotionOfferDetail = new ConsumerPromotionOffer();
                oConsumerPromotionOfferDetail.GetOfferDetail(sPromoID, sTableName);
                AppLogger.LogInfo("Successfully Get Promo Offer Detail(" + sTableName + ") and WarehouseID=" + nWarehouseID + "");
                foreach (ConsumerPromotionOfferDetail oDetail in oConsumerPromotionOfferDetail)
                {
                    DSPromotion.PromoOfferDetailRow oPromoOfferDetailRow = oDSPromoOfferDetail.PromoOfferDetail.NewPromoOfferDetailRow();
                    oPromoOfferDetailRow.ConsumerPromoID = oDetail.ConsumerPromoID;
                    oPromoOfferDetailRow.OfferID = oDetail.OfferID;
                    oPromoOfferDetailRow.SlabID = oDetail.SlabID;
                    oPromoOfferDetailRow.OfferType = oDetail.OfferType;
                    oPromoOfferDetailRow.OfferProductID = oDetail.OfferProductID;
                    oPromoOfferDetailRow.OfferQty = oDetail.OfferQty;
                    oPromoOfferDetailRow.Discount = oDetail.Discount;
                    if (sTableName == "t_PromoCP")
                    {
                        oPromoOfferDetailRow.EMITenureID = oDetail.EMITenureID;
                    }
                    oDSPromoOfferDetail.PromoOfferDetail.AddPromoOfferDetailRow(oPromoOfferDetailRow);
                    oDSPromoOfferDetail.AcceptChanges();

                }

            }

            catch (Exception ex)
            {
                AppLogger.LogInfo("Error Getting Promo Offer Detail(" + sTableName + ") and WarehouseID=" + nWarehouseID + "" + ex.Message);
                throw (ex);
            }
            oDSPromotion.Merge(oDSPromo);
            oDSPromotion.Merge(oDSPromoProductFor);
            oDSPromotion.Merge(oDSPromoWarehouse);
            oDSPromotion.Merge(oDSPromoType);
            oDSPromotion.Merge(oDSPromoSalesType);
            oDSPromotion.Merge(oDSPromoSlab);
            oDSPromotion.Merge(oDSPromoSlabReatio);
            oDSPromotion.Merge(oDSPromoOffer);
            oDSPromotion.Merge(oDSPromoOfferDetail);
            oDSPromotion.Merge(oDSPromoDiscountContribution);
            oDSPromotion.AcceptChanges();

            return oDSPromotion;
        }

        ///
        // Promotion Other then TD
        ///
        public DSPromotion GetPromotionOtherThenTD(DSPromotion oDSPromotion, int nWarehouseID)
        {
            DSPromotion oDSSalesPromotion = new DSPromotion();
            DSPromotion oDSSalesPromotionDetail = new DSPromotion();
            DSPromotion oDSSalesPromotionCustType = new DSPromotion();
            DSPromotion oDSSalesPromotionMarketGroup = new DSPromotion();

            try
            {
                DBController.Instance.OpenNewConnection();
                oSPromotions = new SPromotions();
                oSPromotions.RefreshAllOtherThenTD(nWarehouseID);
                DBController.Instance.CloseConnection();
                oDSPromotion = new DSPromotion();
                foreach (SPromotion oSPromotion in oSPromotions)
                {
                    DSPromotion.SalesPromotionRow oSalesPromotionRow = oDSSalesPromotion.SalesPromotion.NewSalesPromotionRow();

                    oSalesPromotionRow.SalesPromotionID = oSPromotion.SalesPromotionID;
                    oSalesPromotionRow.SalesPromotionNo = oSPromotion.SalesPromotionNo;
                    oSalesPromotionRow.SalesPromotionName = oSPromotion.SalesPromotionName;
                    oSalesPromotionRow.FromDate = oSPromotion.FromDate;
                    oSalesPromotionRow.Todate = oSPromotion.ToDate;
                    oSalesPromotionRow.IsActive = oSPromotion.IsActive;
                    oSalesPromotionRow.TransferType = oSPromotion.TransferType;

                    oDSSalesPromotion.SalesPromotion.AddSalesPromotionRow(oSalesPromotionRow);
                    oDSSalesPromotion.AcceptChanges();

                    foreach (SalesPromotionDetail oSPDetail in oSPromotion.SalesPromotionDetails)
                    {
                        DSPromotion.SalesPromotionDetailRow oSPProductRow = oDSSalesPromotionDetail.SalesPromotionDetail.NewSalesPromotionDetailRow();

                        oSPProductRow.SalesPromotionID = oSPDetail.SalesPromotionID;
                        oSPProductRow.ProductID = oSPDetail.ProductID;
                        oSPProductRow.SalesQty = oSPDetail.SalesQty;
                        oSPProductRow.FreeProductID = oSPDetail.FreeProductID;
                        oSPProductRow.FreeQty = oSPDetail.FreeQty;
                        oSPProductRow.Discount = oSPDetail.Discount;

                        oDSSalesPromotionDetail.SalesPromotionDetail.AddSalesPromotionDetailRow(oSPProductRow);
                        oDSSalesPromotionDetail.AcceptChanges();
                    }

                    foreach (SalesPromotionCustType oSalesPromotionCustType in oSPromotion.SalesPromotionCustTypes)
                    {
                        DSPromotion.SalesPromotionCustTypeRow oSPCustTypeRow = oDSSalesPromotionCustType.SalesPromotionCustType.NewSalesPromotionCustTypeRow();

                        oSPCustTypeRow.SalesPromotionID = oSalesPromotionCustType.SalesPromotionID;
                        oSPCustTypeRow.CustTypeID = oSalesPromotionCustType.CustTypeID;

                        oDSSalesPromotionCustType.SalesPromotionCustType.AddSalesPromotionCustTypeRow(oSPCustTypeRow);
                        oDSSalesPromotionCustType.AcceptChanges();
                    }
                    foreach (SalesPromotionMarketGroup oSalesPromotionMarketGroup in oSPromotion.SalesPromotionMarketGroups)
                    {
                        DSPromotion.SalesPromotionMarketGroupRow oSPMarketGroupRow = oDSSalesPromotionMarketGroup.SalesPromotionMarketGroup.NewSalesPromotionMarketGroupRow();

                        oSPMarketGroupRow.SalesPromotionID = oSalesPromotionMarketGroup.SalesPromotionID;
                        oSPMarketGroupRow.MarketGroupID = oSalesPromotionMarketGroup.MarketGroupID;
                        oDSSalesPromotionMarketGroup.SalesPromotionMarketGroup.AddSalesPromotionMarketGroupRow(oSPMarketGroupRow);
                        oDSSalesPromotionMarketGroup.AcceptChanges();
                    }

                }
                AppLogger.LogInfo("Successfully Get Product Promotion ");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Product Promotion /" + ex.Message);
                throw (ex);
            }

            oDSPromotion.Merge(oDSSalesPromotion);
            oDSPromotion.Merge(oDSSalesPromotionDetail);
            oDSPromotion.Merge(oDSSalesPromotionCustType);
            oDSPromotion.Merge(oDSSalesPromotionMarketGroup);


            oDSPromotion.AcceptChanges();

            return oDSPromotion;
        }

        ///
        // Barcode
        ///
        public DSBarcode GetBarcode(DSBarcode oDSBarcode, int nWarehouseID)
        {
            DBController.Instance.OpenNewConnection();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            oDSBarcode = new DSBarcode();
            try
            {
                cmd.CommandText = "SELECT * FROM t_ProductBarCodeDetail  "
                          + " where Status in (?,?) and IsDownload= ? and WarehouseID= ? ";

                cmd.Parameters.AddWithValue("Status", (int)Dictionary.BarcodeStatus.Transfer);
                cmd.Parameters.AddWithValue("Status", (int)Dictionary.BarcodeStatus.ISGM);
                cmd.Parameters.AddWithValue("IsDownload", 1);
                cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSBarcode.BarcodeRow oBarcodeRow = oDSBarcode.Barcode.NewBarcodeRow();

                    oBarcodeRow.WarehouseID = (int)reader["WarehouseID"];
                    oBarcodeRow.ProductID = (int)reader["ProductID"];
                    oBarcodeRow.Barcode = (string)reader["Barcode"];
                    oBarcodeRow.Status = (int)reader["Status"];
                    oBarcodeRow.IsActive = (int)reader["IsActive"];

                    oDSBarcode.Barcode.AddBarcodeRow(oBarcodeRow);
                    oDSBarcode.AcceptChanges();
                }

                reader.Close();
                AppLogger.LogInfo("Successfully Get Product Barcode ");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Product Barcode /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSBarcode;
        }

        /// <summary>
        /// Get warranty
        /// </summary>
        /// <param name="oDSProductDetail"></param>
        /// <returns></returns>
        /// 
        public DSWarranty GetWarranty(DSWarranty oDSWarranty, int nWarehouseID)
        {
            oDSWarranty = new DSWarranty();

            DSWarranty oDSWarrantyPeram = new DSWarranty();

            WarrantyParams oWarrantyParams = new WarrantyParams();

            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }

                oWarrantyParams.Refresh(nWarehouseID);
                DBController.Instance.CloseConnection();

                foreach (WarrantyParam oWarrantyParam in oWarrantyParams)
                {
                    DSWarranty.WarrantyParamRow oWarrantyParamRow = oDSWarrantyPeram.WarrantyParam.NewWarrantyParamRow();

                    oWarrantyParamRow.WarrantyParamID = oWarrantyParam.WarrantyParamID;
                    oWarrantyParamRow.ProductID = oWarrantyParam.ProductID;
                    oWarrantyParamRow.ServiceWarranty = oWarrantyParam.ServiceWarranty;
                    oWarrantyParamRow.PartsWarranty = oWarrantyParam.PartsWarranty;
                    oWarrantyParamRow.SpecialComponentWarranty = oWarrantyParam.SpecialComponentWarranty;
                    oWarrantyParamRow.IsCurrent = oWarrantyParam.IsCurrent;
                    oWarrantyParamRow.IsPrintWarrantyCard = oWarrantyParam.IsPrintWarrantyCard;
                    oWarrantyParamRow.IsStoreBarcode = oWarrantyParam.IsStoreBarcode;
                    oWarrantyParamRow.EffectDate = oWarrantyParam.EffectDate;
                    oWarrantyParamRow.CreateDate = oWarrantyParam.CreateDate;
                    oWarrantyParamRow.CreateUserID = oWarrantyParam.CreateUserID;

                    oDSWarrantyPeram.WarrantyParam.AddWarrantyParamRow(oWarrantyParamRow);
                    oDSWarrantyPeram.AcceptChanges();

                }
                AppLogger.LogInfo("Successfully Get Warranty ");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Warranty /" + ex.Message);
                throw (ex);
            }
            oDSWarranty.Merge(oDSWarrantyPeram);
            oDSWarranty.AcceptChanges();

            return oDSWarranty;
        }

        ///
        // Get Retail Consumer
        ///
        public DSRetailConsumer GetRetailConsumer(DSRetailConsumer oDSRetailConsumer, int nWarehouseID)
        {
            if (!DBController.Instance.CheckConnection())
            {
                DBController.Instance.OpenNewConnection();
            }

            OleDbCommand cmd = DBController.Instance.GetCommand();
            oDSRetailConsumer = new DSRetailConsumer();
            try
            {
                cmd.CommandText = "SELECT * FROM t_RetailConsumer a inner join t_DataTransfer b on b.DataID=a.ConsumerID "
                          + " where b.TableName=? and "
                          + " b.IsDownload= ? and b.WarehouseID= ? ";

                cmd.Parameters.AddWithValue("TableName", "t_RetailConsumer");
                cmd.Parameters.AddWithValue("IsDownload", (int)Dictionary.IsDownload.No);
                cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSRetailConsumer.RetailConsumerRow RetailConsumerRow = oDSRetailConsumer.RetailConsumer.NewRetailConsumerRow();

                    RetailConsumerRow.ConsumerID = Convert.ToInt32(reader["ConsumerID"]);
                    RetailConsumerRow.ConsumerName = (string)reader["ConsumerName"];
                    RetailConsumerRow.ConsumerCode = (string)reader["ConsumerCode"];
                    RetailConsumerRow.Address = (string)reader["Address"];
                    RetailConsumerRow.ConsumerType = Convert.ToInt32(reader["ConsumerType"]);
                    RetailConsumerRow.CustomerID = (int)reader["CustomerID"];
                    RetailConsumerRow.ParentCustomerID = (int)reader["ParentCustomerID"];
                    RetailConsumerRow.CellNo = (string)reader["CellNo"];

                    if (reader["PhoneNo"] != DBNull.Value)
                        RetailConsumerRow.PhoneNo = (string)reader["PhoneNo"];
                    if (reader["Email"] != DBNull.Value)
                        RetailConsumerRow.Email = (string)reader["Email"];
                    if (reader["EmployeeCode"] != DBNull.Value)
                        RetailConsumerRow.EmployeeCode = (string)reader["EmployeeCode"];
                    else RetailConsumerRow.EmployeeCode = "";
                    if (reader["NationalID"] != DBNull.Value)
                        RetailConsumerRow.NationalID = (string)reader["NationalID"];
                    if (reader["DateofBirth"] != DBNull.Value)
                        RetailConsumerRow.DateofBirth = Convert.ToDateTime(reader["DateofBirth"]);
                    if (reader["VatRegNo"] != DBNull.Value)
                        RetailConsumerRow.VatRegNo = (string)(reader["VatRegNo"]);
                    if (reader["ShortName"] != DBNull.Value)
                        RetailConsumerRow.ShortName = (string)(reader["ShortName"]);
                    if (reader["FatherName"] != DBNull.Value)
                        RetailConsumerRow.FatherName = (string)(reader["FatherName"]);
                    if (reader["MotherName"] != DBNull.Value)
                        RetailConsumerRow.MotherName = (string)(reader["MotherName"]);
                    if (reader["SpouseName"] != DBNull.Value)
                        RetailConsumerRow.SpouseName = (string)(reader["SpouseName"]);
                    if (reader["PermanentAddress"] != DBNull.Value)
                        RetailConsumerRow.PermanentAddress = (string)(reader["PermanentAddress"]);
                    if (reader["Nationality"] != DBNull.Value)
                        RetailConsumerRow.Nationality = (string)(reader["Nationality"]);
                    if (reader["PassportNo"] != DBNull.Value)
                        RetailConsumerRow.PassportNo = (string)(reader["PassportNo"]);
                    if (reader["IsCLP"] != DBNull.Value)
                        RetailConsumerRow.IsCLP = (int)(reader["IsCLP"]);
                    if (reader["CurrentCLP"] != DBNull.Value)
                        RetailConsumerRow.CurrentCLP = (int)(reader["CurrentCLP"]);
                    if (reader["IsRegister"] != DBNull.Value)
                        RetailConsumerRow.IsRegister = (int)(reader["IsRegister"]);
                    if (reader["IsAuthorized"] != DBNull.Value)
                        RetailConsumerRow.IsAuthorized = (int)(reader["IsAuthorized"]);

                    RetailConsumerRow.TransferType = (int)reader["TransferType"];

                    oDSRetailConsumer.RetailConsumer.AddRetailConsumerRow(RetailConsumerRow);
                    oDSRetailConsumer.AcceptChanges();
                }

                reader.Close();
                AppLogger.LogInfo("Successfully Get Retail Customer ");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Retail Customer /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSRetailConsumer;
        }

        ///
        // Get CLP
        ///
        public DSCLP GetCLP(DSCLP oDSCLP, int nWarehouseID)
        {
            DBController.Instance.OpenNewConnection();
            oCLPEligibilities = new CLPEligibilities();
            oCLPPointList = new CLPPointList();
            oCLPEligibilities.Refresh();
            oCLPPointList.Refresh();

            oDSCLP = new DSCLP();

            try
            {
                foreach (CLPEligibility oCLPEligibility in oCLPEligibilities)
                {
                    DSCLP.CLPEligibilityRow oCLPEligibilityRow = oDSCLP.CLPEligibility.NewCLPEligibilityRow();

                    oCLPEligibilityRow.EligibilityID = oCLPEligibility.EligibilityID;
                    oCLPEligibilityRow.Amount = oCLPEligibility.Amount;
                    oCLPEligibilityRow.EffectDate = oCLPEligibility.EffectDate;

                    oDSCLP.CLPEligibility.AddCLPEligibilityRow(oCLPEligibilityRow);
                    oDSCLP.AcceptChanges();
                }
                foreach (CLPPoint oCLPPoint in oCLPPointList)
                {
                    DSCLP.CLPPointRow oCLPPointRow = oDSCLP.CLPPoint.NewCLPPointRow();

                    oCLPPointRow.PointID = oCLPPoint.PointID;
                    oCLPPointRow.Description = oCLPPoint.Description;
                    oCLPPointRow.EffectDate = oCLPPoint.EffectDate;

                    oDSCLP.CLPPoint.AddCLPPointRow(oCLPPointRow);
                    oDSCLP.AcceptChanges();

                    foreach (CLPPointSlab oCLPPointSlab in oCLPPoint)
                    {
                        DSCLP.CLPPointSlabRow oCLPPointSlabRow = oDSCLP.CLPPointSlab.NewCLPPointSlabRow();

                        oCLPPointSlabRow.SlabID = oCLPPointSlab.SlabID;
                        oCLPPointSlabRow.PointID = oCLPPointSlab.PointID;
                        oCLPPointSlabRow.SlabAmount = oCLPPointSlab.SlabAmount;
                        oCLPPointSlabRow.Point = oCLPPointSlab.Point;

                        oDSCLP.CLPPointSlab.AddCLPPointSlabRow(oCLPPointSlabRow);
                        oDSCLP.AcceptChanges();

                    }

                }
                AppLogger.LogInfo("Successfully Get CLP ");

            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting CLP /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSCLP;
        }
        ///
        // Get Product stock transaction 
        ///
        public DSProductTransaction GetProductStockTran(DSProductTransaction oDSProductTransaction, int nWarehouseID)
        {
            oDSProductTransaction = new DSProductTransaction();

            DBController.Instance.OpenNewConnection();
            OleDbCommand cmd = DBController.Instance.GetCommand();

            string sSql = "select * from t_ProductStockTran a inner join t_DataTransfer b on b.DataID=a.TranID "
                            + " where b.TableName='t_ProductStockTran' and "
                            + " b.IsDownload = ? and WarehouseID = ? ";

            cmd.Parameters.AddWithValue("IsDownload", (int)Dictionary.IsDownload.No);
            cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);
            try
            {
                cmd.CommandText = sSql;
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSProductTransaction.ProductStockTranRow oProductStockTranRow = oDSProductTransaction.ProductStockTran.NewProductStockTranRow();

                    oProductStockTranRow.TranId = int.Parse(reader["TranID"].ToString());
                    oProductStockTranRow.CreateDate = Convert.ToDateTime(reader["CreateDate"]);
                    oProductStockTranRow.TranNo = reader["TranNo"].ToString();
                    oProductStockTranRow.TranDate = Convert.ToDateTime(reader["TranDate"]);
                    oProductStockTranRow.TranTypeId = Convert.ToInt32(reader["TranTypeID"]);
                    oProductStockTranRow.ToWHId = int.Parse(reader["ToWHID"].ToString());
                    oProductStockTranRow.ToChannelID = int.Parse(reader["ToChannelID"].ToString());
                    oProductStockTranRow.FromWHId = int.Parse(reader["FromWHID"].ToString());
                    oProductStockTranRow.FromChannelId = int.Parse(reader["FromChannelID"].ToString());
                    oProductStockTranRow.UserId = int.Parse(reader["UserID"].ToString());
                    oProductStockTranRow.Status = (short)(reader["Status"]);
                    oProductStockTranRow.Remarks = reader["Remarks"].ToString();
                    if (reader["LastUpdateUserId"] != DBNull.Value)
                        oProductStockTranRow.LastUpdateUserId = int.Parse(reader["LastUpdateUserId"].ToString());
                    else oProductStockTranRow.LastUpdateUserId = -1;

                    oProductStockTranRow.LastUpdateDate = Convert.ToDateTime(reader["LastUpdateDate"]);
                    oDSProductTransaction.ProductStockTran.AddProductStockTranRow(oProductStockTranRow);
                    oDSProductTransaction.AcceptChanges();

                    ProductTransaction _oProductTransaction = new ProductTransaction();
                    _oProductTransaction.TranID = int.Parse(oProductStockTranRow.TranId.ToString());
                    _oProductTransaction.RefreshItemForDownload();

                    foreach (ProductTransactionDetail oProductTransactionDetail in _oProductTransaction)
                    {
                        DSProductTransaction.ProductStockTranItemRow oProductStockTranItemRow = oDSProductTransaction.ProductStockTranItem.NewProductStockTranItemRow();

                        oProductStockTranItemRow.TranID = int.Parse(oProductStockTranRow.TranId.ToString());
                        oProductStockTranItemRow.ProductID = int.Parse(oProductTransactionDetail.ProductID.ToString());
                        oProductStockTranItemRow.Qty = oProductTransactionDetail.Qty;
                        oProductStockTranItemRow.StockPrice = oProductTransactionDetail.StockPrice;

                        oProductStockTranItemRow.DutyTranNo = oProductTransactionDetail.DutyTranNo;
                        oProductStockTranItemRow.DutyRate = oProductTransactionDetail.DutyRate;
                        oProductStockTranItemRow.DutyPrice = oProductTransactionDetail.DutyPrice;

                        oDSProductTransaction.ProductStockTranItem.AddProductStockTranItemRow(oProductStockTranItemRow);
                        oDSProductTransaction.AcceptChanges();
                    }

                    ProductTransferProductSerials _oProductTransferProductSerials = new ProductTransferProductSerials();
                    _oProductTransferProductSerials.GetProductTransferProductSerial(int.Parse(oProductStockTranRow.TranId.ToString()));

                    foreach (ProductTransferProductSerial oProductTransferProductSerial in _oProductTransferProductSerials)
                    {
                        DSProductTransaction.ProductTransferProductSerialRow oPTPSRow = oDSProductTransaction.ProductTransferProductSerial.NewProductTransferProductSerialRow();

                        oPTPSRow.TranID = oProductTransferProductSerial.TranID;
                        oPTPSRow.ProductID = oProductTransferProductSerial.ProductID;
                        oPTPSRow.SerialNo = oProductTransferProductSerial.SerialNo;
                        oPTPSRow.ProductSerialNo = oProductTransferProductSerial.ProductSerialNo;

                        oPTPSRow.TradePrice = oProductTransferProductSerial.TradePrice;
                        oPTPSRow.VAT = oProductTransferProductSerial.VAT;
                        oPTPSRow.IsVATPaidProduct = oProductTransferProductSerial.IsVATPaidProduct;


                        oDSProductTransaction.ProductTransferProductSerial.AddProductTransferProductSerialRow(oPTPSRow);
                        oDSProductTransaction.AcceptChanges();
                    }

                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Product Stock Tran ");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Product Stock Tran /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSProductTransaction;
        }
        ///
        // Get Product stock tran Type
        ///
        public DSProductTransactionType GetProductStockTranType(DSProductTransactionType oDSProductTransactionType, int nWarehouseID)
        {
            oDSProductTransactionType = new DSProductTransactionType();

            if (!DBController.Instance.CheckConnection())
            {
                DBController.Instance.OpenNewConnection();
            }

            OleDbCommand cmd = DBController.Instance.GetCommand();

            string sSql = "select * from t_ProductStockTranType ";
            try
            {
                cmd.CommandText = sSql;
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSProductTransactionType.ProductStockTranTypeRow oProductStockTranTypeRow = oDSProductTransactionType.ProductStockTranType.NewProductStockTranTypeRow();

                    oProductStockTranTypeRow.TranTypeID = int.Parse(reader["TranTypeID"].ToString());
                    oProductStockTranTypeRow.TranTypeCode = reader["TranTypeCode"].ToString();
                    oProductStockTranTypeRow.TranTypeName = reader["TranTypeName"].ToString();
                    oProductStockTranTypeRow.TransactionSide = int.Parse(reader["TransactionSide"].ToString());
                    oProductStockTranTypeRow.IsSystem = int.Parse(reader["IsSystem"].ToString());
                    oProductStockTranTypeRow.Status = int.Parse(reader["Status"].ToString());

                    oDSProductTransactionType.ProductStockTranType.AddProductStockTranTypeRow(oProductStockTranTypeRow);
                    oDSProductTransactionType.AcceptChanges();

                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Product Stock Tran Type");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Product Stock Tran Type/" + ex.Message);
                throw (ex);
            }

            DBController.Instance.CloseConnection();
            return oDSProductTransactionType;
        }

        ///
        // Get Product stock transaction with IMEI 
        ///
        public DSProductTransaction GetProductStockTranWithIMEI(DSProductTransaction oDSProductTransaction, int nWarehouseID)
        {
            oDSProductTransaction = new DSProductTransaction();

            DBController.Instance.OpenNewConnection();
            OleDbCommand cmd = DBController.Instance.GetCommand();

            string sSql = "select a.* from t_ProductStockTran a inner join t_DataTransfer b on b.DataID=a.TranID " +
                "INNER JOIN (select TranID,Sum(Qty)Qty from t_ProductStockTranItem Where ProductID  " +
                "IN (select ProductID from v_productdetails Where MAGID=2) " +
                "Group by TranID)Qty  " +
                "ON Qty.TranID=a.TranID  " +
                "INNER JOIN (Select TranID,Count(SerialNo)Count from t_ProductTransferProductSerial Where ProductID  " +
                "IN (select ProductID from v_productdetails Where MAGID=2)Group by TranID)Cnt  " +
                "ON Cnt.TranID=a.TranID where b.TableName='t_ProductStockTran' and  " +
                "b.IsDownload=1 and Count=Qty and WarehouseID= '" + nWarehouseID + "' " +
                "UNION ALL " +
                "Select a.* from ( " +
                "select a.* from t_ProductStockTran a, t_DataTransfer b " +
                "Where b.DataID=a.TranID  and b.TableName='t_ProductStockTran' and  " +
                "b.IsDownload=1 and WarehouseID= '" + nWarehouseID + "')a " +
                "INNER JOIN " +
                "(Select a.TranID from  " +
                "(select TranID,Sum(Qty)Qty from t_ProductStockTranItem Group by TranID)a " +
                "INNER JOIN  " +
                "(select TranID,Sum(Qty)Qty from t_ProductStockTranItem Where ProductID  " +
                "IN (select ProductID from v_productdetails Where MAGID <> 2)Group by TranID)b " +
                "ON a.TranID=b.TranID and a.Qty=b.Qty " +
                ")b ON a.TranID=b.TranID ";

            //string sSql = "select a.* from t_ProductStockTran a inner join t_DataTransfer b on b.DataID=a.TranID "
            //         + " INNER JOIN (select TranID,Sum(Qty)Qty from t_ProductStockTranItem Group by TranID)Qty "
            //         + " ON Qty.TranID=a.TranID "
            //         + " INNER JOIN (Select TranID,Count(SerialNo)Count from t_ProductTransferProductSerial Group by TranID)Cnt "
            //         + " ON Cnt.TranID=a.TranID where b.TableName='t_ProductStockTran' and "
            //         + " b.IsDownload=1 and Count=Qty and WarehouseID= '" + nWarehouseID + "' ";

            try
            {
                cmd.CommandText = sSql;
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSProductTransaction.ProductStockTranRow oProductStockTranRow = oDSProductTransaction.ProductStockTran.NewProductStockTranRow();

                    oProductStockTranRow.TranId = int.Parse(reader["TranID"].ToString());
                    oProductStockTranRow.CreateDate = Convert.ToDateTime(reader["CreateDate"]);
                    oProductStockTranRow.TranNo = reader["TranNo"].ToString();
                    oProductStockTranRow.TranDate = Convert.ToDateTime(reader["TranDate"]);
                    oProductStockTranRow.TranTypeId = Convert.ToInt32(reader["TranTypeID"]);
                    oProductStockTranRow.ToWHId = int.Parse(reader["ToWHID"].ToString());
                    oProductStockTranRow.ToChannelID = int.Parse(reader["ToChannelID"].ToString());
                    oProductStockTranRow.FromWHId = int.Parse(reader["FromWHID"].ToString());
                    oProductStockTranRow.FromChannelId = int.Parse(reader["FromChannelID"].ToString());
                    oProductStockTranRow.UserId = int.Parse(reader["UserID"].ToString());
                    oProductStockTranRow.Status = (short)(reader["Status"]);
                    oProductStockTranRow.Remarks = reader["Remarks"].ToString();
                    if (reader["LastUpdateUserId"] != DBNull.Value)
                        oProductStockTranRow.LastUpdateUserId = int.Parse(reader["LastUpdateUserId"].ToString());
                    else oProductStockTranRow.LastUpdateUserId = -1;

                    oProductStockTranRow.LastUpdateDate = Convert.ToDateTime(reader["LastUpdateDate"]);
                    oDSProductTransaction.ProductStockTran.AddProductStockTranRow(oProductStockTranRow);
                    oDSProductTransaction.AcceptChanges();

                    ProductTransaction _oProductTransaction = new ProductTransaction();
                    _oProductTransaction.TranID = int.Parse(oProductStockTranRow.TranId.ToString());
                    _oProductTransaction.RefreshItem();

                    foreach (ProductTransactionDetail oProductTransactionDetail in _oProductTransaction)
                    {
                        DSProductTransaction.ProductStockTranItemRow oProductStockTranItemRow = oDSProductTransaction.ProductStockTranItem.NewProductStockTranItemRow();

                        oProductStockTranItemRow.TranID = int.Parse(oProductStockTranRow.TranId.ToString());
                        oProductStockTranItemRow.ProductID = int.Parse(oProductTransactionDetail.ProductID.ToString());
                        oProductStockTranItemRow.Qty = oProductTransactionDetail.Qty;
                        oProductStockTranItemRow.StockPrice = oProductTransactionDetail.StockPrice;

                        oDSProductTransaction.ProductStockTranItem.AddProductStockTranItemRow(oProductStockTranItemRow);
                        oDSProductTransaction.AcceptChanges();
                    }


                    ProductTransferProductSerials _oProductTransferProductSerials = new ProductTransferProductSerials();
                    _oProductTransferProductSerials.GetProductTransferProductSerial(int.Parse(oProductStockTranRow.TranId.ToString()));

                    foreach (ProductTransferProductSerial oProductTransferProductSerial in _oProductTransferProductSerials)
                    {
                        DSProductTransaction.ProductTransferProductSerialRow oPTPSRow = oDSProductTransaction.ProductTransferProductSerial.NewProductTransferProductSerialRow();

                        oPTPSRow.TranID = oProductTransferProductSerial.TranID;
                        oPTPSRow.ProductID = oProductTransferProductSerial.ProductID;
                        oPTPSRow.SerialNo = oProductTransferProductSerial.SerialNo;
                        oPTPSRow.ProductSerialNo = oProductTransferProductSerial.ProductSerialNo;

                        oDSProductTransaction.ProductTransferProductSerial.AddProductTransferProductSerialRow(oPTPSRow);
                        oDSProductTransaction.AcceptChanges();
                    }


                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Product Stock Tran With IMEI");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Product Stock Tran With IMEI/" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSProductTransaction;
        }

        ///
        // Product stock
        ///
        public DSStock GetProductStock(DSStock oDSStock)
        {
            DBController.Instance.OpenNewConnection();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            oDSStock = new DSStock();
            try
            {
                cmd.CommandText = "SELECT * FROM t_ProductStock where WarehouseID=? and CurrentStock not in (0)";
                cmd.Parameters.AddWithValue("WarehouseID", Utility.CentralRetailWarehouse);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSStock.ProductStockRow oProductStockRow = oDSStock.ProductStock.NewProductStockRow();

                    oProductStockRow.ProductID = (int)reader["ProductID"];
                    oProductStockRow.WarehouseID = (int)reader["WarehouseID"];
                    oProductStockRow.StockType = (int)reader["StockType"];
                    oProductStockRow.CurrentStock = Convert.ToInt64(reader["CurrentStock"].ToString());
                    oProductStockRow.CurrentStockValue = Convert.ToDouble(reader["CurrentStockValue"].ToString());
                    oProductStockRow.BookingStock = (int)reader["BookingStock"];
                    oProductStockRow.TransitStock = (int)reader["TransitStock"];
                    oProductStockRow.ChannelID = (int)reader["ChannelID"];
                    oProductStockRow.Status = int.Parse(reader["Status"].ToString());

                    oDSStock.ProductStock.AddProductStockRow(oProductStockRow);
                    oDSStock.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Product Stock");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Product Stock /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSStock;
        }
        ///
        // Product stock All
        ///
        public DSStock GetProductStockAll(DSStock oDSStock)
        {
            DBController.Instance.OpenNewConnection();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            oDSStock = new DSStock();
            try
            {
                cmd.CommandText = "SELECT * FROM t_ProductStock where WarehouseID=?";
                cmd.Parameters.AddWithValue("WarehouseID", Utility.CentralRetailWarehouse);

                //cmd.CommandText = "SELECT * FROM t_ProductStock where WarehouseID in (Select* From v_WarehouseDetails where WarehouseGroupName = 'Saleable' and WarehouseParentID = 6)";


                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSStock.ProductStockRow oProductStockRow = oDSStock.ProductStock.NewProductStockRow();

                    oProductStockRow.ProductID = (int)reader["ProductID"];
                    oProductStockRow.WarehouseID = (int)reader["WarehouseID"];
                    oProductStockRow.StockType = (int)reader["StockType"];
                    oProductStockRow.CurrentStock = Convert.ToInt64(reader["CurrentStock"].ToString());
                    oProductStockRow.CurrentStockValue = Convert.ToDouble(reader["CurrentStockValue"].ToString());
                    oProductStockRow.BookingStock = (int)reader["BookingStock"];
                    oProductStockRow.TransitStock = (int)reader["TransitStock"];
                    oProductStockRow.ChannelID = (int)reader["ChannelID"];
                    oProductStockRow.Status = int.Parse(reader["Status"].ToString());

                    oDSStock.ProductStock.AddProductStockRow(oProductStockRow);
                    oDSStock.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Product Stock");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Product Stock /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            DSStock.HOStockUpdateDateRow oHOStockUpdateDateRow = oDSStock.HOStockUpdateDate.NewHOStockUpdateDateRow();

            oHOStockUpdateDateRow.Date = DateTime.Now;
            oDSStock.HOStockUpdateDate.AddHOStockUpdateDateRow(oHOStockUpdateDateRow);
            oDSStock.AcceptChanges();

            return oDSStock;
        }

        ///
        // Channel
        ///
        public DSChannel GetChannel(DSChannel oDSChannel)
        {
            DBController.Instance.OpenNewConnection();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            oDSChannel = new DSChannel();
            try
            {
                cmd.CommandText = "SELECT * FROM t_Channel ";
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSChannel.ChannelRow oChannelRow = oDSChannel.Channel.NewChannelRow();

                    oChannelRow.ChannelID = (int)reader["ChannelID"];
                    oChannelRow.ChannelCode = (string)reader["ChannelCode"];
                    oChannelRow.ChannelDescription = (string)reader["ChannelDescription"];
                    oChannelRow.IsActive = (int)reader["IsActive"];
                    oChannelRow.ChannelType = (int)reader["ChannelType"];
                    if (reader["SBUID"] != DBNull.Value)
                        oChannelRow.SBUID = Convert.ToInt32(reader["SBUID"].ToString());
                    else oChannelRow.SBUID = -1;

                    oDSChannel.Channel.AddChannelRow(oChannelRow);
                    oDSChannel.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Channel");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Channel /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSChannel;
        }

        ///
        // SBU
        ///
        public DSSBU GetSBU(DSSBU oDSSBU)
        {
            DBController.Instance.OpenNewConnection();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            oDSSBU = new DSSBU();
            try
            {
                cmd.CommandText = "SELECT * FROM t_SBU ";
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSSBU.SBURow oSBURow = oDSSBU.SBU.NewSBURow();

                    oSBURow.SBUID = Convert.ToInt32(reader["SBUID"].ToString());
                    oSBURow.IsActive = (int)reader["IsActive"];
                    oSBURow.SBUCode = (string)reader["SBUCode"];
                    oSBURow.SBUName = (string)reader["SBUName"];
                    oSBURow.CompanyID = (int)reader["CompanyID"];
                    oSBURow.IsSystem = Convert.ToInt32(reader["IsSystem"].ToString());

                    oDSSBU.SBU.AddSBURow(oSBURow);
                    oDSSBU.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get SBU");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting SBU /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSSBU;
        }

        ///
        // Market Group
        ///
        public DSMarketGroup GetMarketGroup(DSMarketGroup oDSMarketGroup)
        {
            DBController.Instance.OpenNewConnection();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            oDSMarketGroup = new DSMarketGroup();
            try
            {
                cmd.CommandText = "SELECT * FROM t_MarketGroup ";
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSMarketGroup.MarketGroupRow oMarketGroupRow = oDSMarketGroup.MarketGroup.NewMarketGroupRow();

                    oMarketGroupRow.MarketGroupID = (int)reader["MarketGroupID"];
                    if (reader["Pos"] != DBNull.Value)
                        oMarketGroupRow.Pos = (int)reader["Pos"];
                    else oMarketGroupRow.Pos = -1;
                    oMarketGroupRow.MarketGroupCode = (string)reader["MarketGroupCode"];
                    oMarketGroupRow.MarketGroupDesc = (string)reader["MarketGroupDesc"];
                    oMarketGroupRow.MarketGroupType = (int)reader["MarketGroupType"];
                    if (reader["ParentID"] != DBNull.Value)
                    {
                        oMarketGroupRow.ParentID = (int)reader["ParentID"];
                    }
                    else
                    {
                        oMarketGroupRow.ParentID = -1;
                    }
                    if (reader["EmployeeID"] != DBNull.Value)
                    {
                        oMarketGroupRow.EmployeeID = (int)reader["EmployeeID"];
                    }
                    else
                    {
                        oMarketGroupRow.EmployeeID = -1;
                    }
                    if (reader["ChannelID"] != DBNull.Value)
                    {
                        oMarketGroupRow.ChannelID = (int)reader["ChannelID"];
                    }
                    else oMarketGroupRow.ChannelID = -1;

                    oDSMarketGroup.MarketGroup.AddMarketGroupRow(oMarketGroupRow);
                    oDSMarketGroup.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Market Group");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Market Group /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSMarketGroup;
        }

        ///
        // Geo location
        ///
        public DSGeoLocation GetGeoLocation(DSGeoLocation oDSGeoLocation)
        {
            DBController.Instance.OpenNewConnection();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            oDSGeoLocation = new DSGeoLocation();
            try
            {
                cmd.CommandText = "SELECT * FROM t_GeoLocation ";
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSGeoLocation.GeoLocationRow oGeoLocationRow = oDSGeoLocation.GeoLocation.NewGeoLocationRow();

                    oGeoLocationRow.GeoLocationID = (int)reader["GeoLocationID"];
                    oGeoLocationRow.GeoLocationCode = (string)reader["GeoLocationCode"];
                    oGeoLocationRow.GeoLocationName = (string)reader["GeoLocationName"];
                    oGeoLocationRow.GeoLocationTypeID = (int)reader["GeoLocationType"];
                    if (reader["ParentID"] != DBNull.Value)
                        oGeoLocationRow.ParentID = (int)reader["ParentID"];
                    else oGeoLocationRow.ParentID = -1;
                    oGeoLocationRow.GeoLocationCategory = reader["GeoLocationCategory"].ToString();

                    oDSGeoLocation.GeoLocation.AddGeoLocationRow(oGeoLocationRow);
                    oDSGeoLocation.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Geo Location");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Geo Location /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSGeoLocation;
        }

        ///
        // Customer type
        ///
        public DSCustomerType GetCustomerType(DSCustomerType oDSCustomerType, int nWHID)
        {
            if (!DBController.Instance.CheckConnection())
            {
                DBController.Instance.OpenNewConnection();
            }

            OleDbCommand cmd = DBController.Instance.GetCommand();
            oDSCustomerType = new DSCustomerType();
            try
            {
                cmd.CommandText = "SELECT a.* FROM t_CustomerType a,t_DataTransfer b " +
                                "where a.CustTypeID = b.DataID and TableName = 't_CustomerType' " +
                                "and IsDownload = 1 and WarehouseID = " + nWHID + " ";
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSCustomerType.CustomerTypeRow oCustomerTypeRow = oDSCustomerType.CustomerType.NewCustomerTypeRow();

                    oCustomerTypeRow.CustTypeID = (int)reader["CustTypeID"];
                    oCustomerTypeRow.CustTypeCode = (string)reader["CustTypeCode"];
                    oCustomerTypeRow.CustTypeDescription = (string)reader["CustTypeDescription"];
                    oCustomerTypeRow.ChannelID = (int)reader["ChannelID"];
                    oCustomerTypeRow.IsActive = (int)reader["IsActive"];
                    oCustomerTypeRow.Pos = (int)reader["Pos"];
                    if (reader["ReportingChannelID"] != DBNull.Value)
                        oCustomerTypeRow.ReportingChannelID = (int)reader["ReportingChannelID"];
                    else oCustomerTypeRow.ReportingChannelID = -1;

                    if (reader["SalesType"] != DBNull.Value)
                        oCustomerTypeRow.SalesType = (int)reader["SalesType"];
                    else oCustomerTypeRow.SalesType = -1;

                    oDSCustomerType.CustomerType.AddCustomerTypeRow(oCustomerTypeRow);
                    oDSCustomerType.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Customer Type");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Customer Type /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSCustomerType;
        }

        ///
        // Customer 
        ///
        public DSCustomer GetCustomer(DSCustomer oDSCustomer, int nWarehouseID)
        {
            if (!DBController.Instance.CheckConnection())
            {
                DBController.Instance.OpenNewConnection();
            }

            OleDbCommand cmd = DBController.Instance.GetCommand();
            oDSCustomer = new DSCustomer();
            try
            {
                cmd.CommandText = "SELECT a.*,TransferType FROM t_Customer a, t_DataTransfer b " +
                    "Where a.CustomerID=b.DataID and IsDownload=? and TableName=? and WarehouseID=?";

                cmd.Parameters.AddWithValue("IsDownload", (int)Dictionary.IsDownload.No);
                cmd.Parameters.AddWithValue("TableName", "t_Customer");
                cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSCustomer.CustomerRow oCustomerRow = oDSCustomer.Customer.NewCustomerRow();

                    oCustomerRow.CustomerID = (int)reader["CustomerID"];
                    if (reader["ParentCustomerID"] != DBNull.Value)
                        oCustomerRow.ParentCustomerID = (int)reader["ParentCustomerID"];
                    else oCustomerRow.ParentCustomerID = -1;
                    oCustomerRow.CustomerCode = (string)reader["CustomerCode"];
                    oCustomerRow.CustomerName = (string)reader["CustomerName"];
                    oCustomerRow.CustomerAddress = reader["CustomerAddress"].ToString();
                    oCustomerRow.CustomerTelephone = reader["CustomerTelephone"].ToString();
                    oCustomerRow.CustomerFax = reader["CustomerFax"].ToString();
                    oCustomerRow.CellPhoneNumber = reader["CellPhoneNumber"].ToString();
                    oCustomerRow.ContactPerson = reader["ContactPerson"].ToString();
                    oCustomerRow.ContactDesignation = reader["ContactDesignation"].ToString();
                    oCustomerRow.IsActive = (int)reader["IsActive"];
                    oCustomerRow.CustTypeID = (int)reader["CustTypeID"];
                    oCustomerRow.MarketGroupID = (int)reader["MarketGroupID"];
                    oCustomerRow.GeoLocationID = (int)reader["GeoLocationID"];
                    if (reader["TaxNumber"] != DBNull.Value)
                        oCustomerRow.TaxNumber = (string)reader["TaxNumber"];
                    else oCustomerRow.TaxNumber = "";


                    oDSCustomer.Customer.AddCustomerRow(oCustomerRow);
                    oDSCustomer.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Customer");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Customer /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSCustomer;
        }
        ///
        // Receivable Data
        ///
        public DSReceivableData GetReceivableData(DSReceivableData oDSReceivableData, int nWarehouseID)
        {
            DBController.Instance.OpenNewConnection();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            oDSReceivableData = new DSReceivableData();
            try
            {
                cmd.CommandText = "SELECT ID, DataID,TableName from t_DataTransfer Where IsDownload=? and WarehouseID=? order by id";

                cmd.Parameters.AddWithValue("IsDownload", (int)Dictionary.IsDownload.No);
                cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSReceivableData.ReceivableDataRow oReceivableDataRow = oDSReceivableData.ReceivableData.NewReceivableDataRow();

                    oReceivableDataRow.ID = Convert.ToInt64(reader["ID"].ToString());
                    oReceivableDataRow.DataID = Convert.ToInt32(reader["DataID"].ToString());
                    oReceivableDataRow.Description = (string)reader["TableName"];

                    oDSReceivableData.ReceivableData.AddReceivableDataRow(oReceivableDataRow);
                    oDSReceivableData.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Receivable Data");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Receivable Data /" + ex.Message);
                throw (ex);
            }
            return oDSReceivableData;
        }

        public DSReceivableData GetReceivableDataFactory(DSReceivableData oDSReceivableData, int nLocationID)
        {
            DBController.Instance.OpenNewConnection();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            oDSReceivableData = new DSReceivableData();
            try
            {
                cmd.CommandText = "SELECT ID, DataID,TableName from t_DataTransferFactory Where IsDownload=? and LocationID=? order by id";

                cmd.Parameters.AddWithValue("IsDownload", (int)Dictionary.IsDownload.No);
                cmd.Parameters.AddWithValue("LocationID", nLocationID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSReceivableData.ReceivableDataRow oReceivableDataRow = oDSReceivableData.ReceivableData.NewReceivableDataRow();

                    oReceivableDataRow.ID = Convert.ToInt64(reader["ID"].ToString());
                    oReceivableDataRow.DataID = Convert.ToInt32(reader["DataID"].ToString());
                    oReceivableDataRow.Description = (string)reader["TableName"];

                    oDSReceivableData.ReceivableData.AddReceivableDataRow(oReceivableDataRow);
                    oDSReceivableData.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Receivable Data");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Receivable Data /" + ex.Message);
                throw (ex);
            }
            return oDSReceivableData;
        }
        ///
        // Receivable Data
        ///
        public DSReceivableData GetReceivableDataGroupBy(DSReceivableData oDSReceivableData, int nWarehouseID)
        {
            DBController.Instance.OpenNewConnection();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            oDSReceivableData = new DSReceivableData();
            try
            {
                cmd.CommandText = "Select TableName from (select TableName, " +
                                   " SlNo=CASE When TableName='t_Bank' then 1  " +
                                   " When TableName='t_Showroom' then 2  " +
                                   " When TableName='t_DiscountReason' then 3  " +
                                   " When TableName='t_PaymentMode' then 4  " +
                                   " When TableName='t_Customer' then 5  " +
                                   " When TableName='t_ProductGroup' then 6  " +
                                   " When TableName='t_Brand' then 7  " +
                                   " When TableName='t_Product' then 8  " +
                                   " When TableName='t_FinishedGoodsPrice' then 9  " +
                                   " When TableName='v_EmployeeDetails' then 10  " +
                                   " When TableName='t_user' then 11  " +
                                   " When TableName='t_SalesPromotionType' then 12  " +
                                   " When TableName='t_SalesPromo' then 13  " +
                                   " When TableName='t_WarrantyParam' then 14  " +
                                   " When TableName='t_RetailConsumer' then 15  " +
                                   " When TableName='t_ThisSystem' then 16  " +
                                   " When TableName='t_StockRequisition' then 17 " +
                                   " When TableName='t_ProductStockTran' then 18 " +
                                   " else 99 end  " +
                                   " from t_DataTransfer where IsDownload=? and WarehouseID=? )a " +
                                   " Group by TableName, SlNo order by SlNo";

                cmd.Parameters.AddWithValue("IsDownload", (int)Dictionary.IsDownload.No);
                cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSReceivableData.ReceivableDataRow oReceivableDataRow = oDSReceivableData.ReceivableData.NewReceivableDataRow();

                    oReceivableDataRow.Description = (string)reader["TableName"];

                    oDSReceivableData.ReceivableData.AddReceivableDataRow(oReceivableDataRow);
                    oDSReceivableData.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Receivable Data (Group by)");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Receivable Data (Group by)/" + ex.Message);
                throw (ex);
            }
            return oDSReceivableData;
        }



        public DSReceivableData GetReceivableFactoryDataGroupBy(DSReceivableData oDSReceivableData, int nLocationID)
        {
            DBController.Instance.OpenNewConnection();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            oDSReceivableData = new DSReceivableData();
            try
            {
                cmd.CommandText = "Select TableName from (select TableName, " +
                                   " SlNo=CASE When TableName='t_Product' then 1  " +
                                   " When TableName='t_ProductComponentUniversal' then 2  " +
                                   " When TableName='t_ProductComponentSerialUniversal' then 3  " +
                                   " When TableName='t_ProductComponent' then 4  " +
                                   " else 99 end  " +
                                   " from t_DataTransferFactory where IsDownload=? and LocationID=? )a " +
                                   " Group by TableName, SlNo order by SlNo";

                cmd.Parameters.AddWithValue("IsDownload", (int)Dictionary.IsDownload.No);
                cmd.Parameters.AddWithValue("LocationID", nLocationID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSReceivableData.ReceivableDataRow oReceivableDataRow = oDSReceivableData.ReceivableData.NewReceivableDataRow();

                    oReceivableDataRow.Description = (string)reader["TableName"];

                    oDSReceivableData.ReceivableData.AddReceivableDataRow(oReceivableDataRow);
                    oDSReceivableData.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Receivable Data (Group by)");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Receivable Data (Group by)/" + ex.Message);
                throw (ex);
            }
            return oDSReceivableData;
        }
        ///
        // Product Stock
        ///
        public DSStock GetDSStock(DSStock oDSStock, int nWHID, int nCentralWHID, int nAGID, int nASGID, int nMAGID, int nBrandID, string sProductCode, string sProductName)
        {
            DBController.Instance.OpenNewConnection();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            oDSStock = new DSStock();
            string sSql = "";
            try
            {
                if (Utility.CentralRetailWarehouse == nCentralWHID)
                {

                    //sSql = " select ProductCode,ProductName,AGID,AGName,ASGID,ASGName,MAGID,MAGName,BrandID, " +
                    //       "BrandDesc,(Currentstock - BookingStock) as SelableStock, a.WarehouseID,IsNull(ShortCode,'') as ShortCode from t_productstock a " +
                    //       "inner join  v_productdetails b on a.productid=b.productid INNER JOIN t_Warehouse c on a.WarehouseID=c.WarehouseID where StockVisibleFromOutlet=1 ";//a.Warehouseid=" + nCentralWHID + " 


                    sSql = "Select * From (select ProductCode,ProductName,AGID,AGName,ASGID,ASGName,MAGID,MAGName,BrandID,  " +
                            "BrandDesc,sum((Currentstock - BookingStock)) as SelableStock,-1 as WarehouseID,'HO' as ShortCode   " +
                            "from t_productstock a   " +
                            "inner join  v_productdetails b on a.productid=b.productid   " +
                            "INNER JOIN t_Warehouse c on a.WarehouseID=c.WarehouseID   " +
                            "where StockVisibleFromOutlet=1   " +
                            "group by ProductCode,ProductName,AGID,AGName,ASGID,ASGName,MAGID,MAGName,BrandID,   " +
                            "BrandDesc ) Main where 1=1";
                }
                else
                {
                    sSql = " select ProductCode,ProductName,AGID,AGName,ASGID,ASGName,MAGID,MAGName,BrandID, " +
                           "BrandDesc,(Currentstock - BookingStock) as SelableStock, a.WarehouseID, IsNull(ShortCode,'') as ShortCode from t_productstock a " +
                           "inner join  v_productdetails b on a.productid=b.productid INNER JOIN t_Warehouse c on a.WarehouseID=c.WarehouseID where a.Warehouseid IN (select WarehouseID from t_Showroom Where WarehouseID <> " + nWHID + ") ";

                }

                if (nMAGID != 0)
                {
                    sSql = sSql + " and MAGID=" + nMAGID + "";
                }
                if (nASGID != 0)
                {
                    sSql = sSql + " and ASGID=" + nASGID + "";
                }
                if (nAGID != 0)
                {
                    sSql = sSql + " and AGID=" + nAGID + "";
                }
                if (nBrandID != 0)
                {
                    sSql = sSql + " and BrandID=" + nBrandID + "";
                }
                if (sProductCode != "")
                {
                    sSql = sSql + " and ProductCode='" + sProductCode + "'";
                }
                if (sProductName != "")
                {
                    sSql = sSql + " and ProductName like '%" + sProductName + "%'";
                }

                cmd.CommandText = sSql;
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    if (Convert.ToInt32(reader["SelableStock"]) > 0)
                    {
                        DSStock.ProdStockRow oProdStockRow = oDSStock.ProdStock.NewProdStockRow();

                        oProdStockRow.AGID = (int)reader["AGID"];
                        oProdStockRow.AGName = (string)reader["AGName"];
                        oProdStockRow.ASGID = (int)reader["ASGID"];
                        oProdStockRow.ASGName = (string)reader["ASGName"];
                        oProdStockRow.MAGID = (int)reader["MAGID"];
                        oProdStockRow.MAGName = (string)reader["MAGName"];
                        oProdStockRow.BrandID = (int)reader["BrandID"];
                        oProdStockRow.BrandDesc = (string)reader["BrandDesc"];
                        oProdStockRow.ProductCode = (string)reader["productcode"];
                        oProdStockRow.ProductName = (string)reader["productname"];
                        oProdStockRow.SelableStock = Convert.ToInt32(reader["SelableStock"].ToString());
                        oProdStockRow.WarehouseID = (int)reader["WarehouseID"];
                        oProdStockRow.ShortCode = (string)reader["ShortCode"];

                        oDSStock.ProdStock.AddProdStockRow(oProdStockRow);
                        oDSStock.AcceptChanges();
                    }
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Product Stock");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Product Stock/" + ex.Message);
                throw (ex);
            }
            return oDSStock;
        }
        ///
        // User
        ///
        public DSUser GetUser(DSUser oDSUser, int nWarehouseID)
        {
            if (!DBController.Instance.CheckConnection())
            {
                DBController.Instance.OpenNewConnection();
            }

            OleDbCommand cmd = DBController.Instance.GetCommand();
            oDSUser = new DSUser();
            try
            {
                cmd.CommandText = "select * from t_User a inner join t_DataTransfer b on b.DataID=a.UserID "
                              + " where b.TableName='t_User' and "
                              + " b.IsDownload=1 and WarehouseID= '" + nWarehouseID + "' ";

                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSUser.UserRow oUserRow = oDSUser.User.NewUserRow();

                    oUserRow.UserID = Convert.ToInt64(reader["UserID"].ToString());
                    oUserRow.UserFullName = reader["UserFullName"].ToString();
                    oUserRow.UserName = reader["UserName"].ToString();
                    oUserRow.Password = reader["Password"].ToString();
                    oUserRow.Salt = reader["Salt"].ToString();
                    oUserRow.UserSBUs = reader["UserSBUs"].ToString();

                    if (reader["EmployeeID"] != DBNull.Value)
                        oUserRow.EmployeeID = int.Parse(reader["EmployeeID"].ToString());
                    else oUserRow.EmployeeID = -1;
                    oUserRow.TransferType = int.Parse(reader["TransferType"].ToString());

                    oDSUser.User.AddUserRow(oUserRow);

                    Users oUsers = new Users();
                    oUsers.AllPermission(int.Parse(oUserRow.UserID.ToString()));

                    foreach (User oUser in oUsers)
                    {
                        DSUser.PermissionRow oPermissionRow = oDSUser.Permission.NewPermissionRow();

                        oPermissionRow.UserID = int.Parse(oUserRow.UserID.ToString());
                        oPermissionRow.PermissionKey = oUser.Permission;

                        oDSUser.Permission.AddPermissionRow(oPermissionRow);
                    }

                    oDSUser.AcceptChanges();


                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get User");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting User /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSUser;
        }
        ///
        // Bank
        ///
        public DSBank GetBank(DSBank oDSBank, int nWarehouseID)
        {
            if (!DBController.Instance.CheckConnection())
            {
                DBController.Instance.OpenNewConnection();
            }

            OleDbCommand cmd = DBController.Instance.GetCommand();
            oDSBank = new DSBank();
            try
            {
                cmd.CommandText = "SELECT a.*,TransferType FROM t_Bank a, t_DataTransfer b " +
                "Where a.BankID=b.DataID and IsDownload=? and TableName=? and WarehouseID=?";

                cmd.Parameters.AddWithValue("IsDownload", (int)Dictionary.IsDownload.No);
                cmd.Parameters.AddWithValue("TableName", "t_Bank");
                cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSBank.BankRow oBankRow = oDSBank.Bank.NewBankRow();

                    oBankRow.BankID = (int)reader["BankID"];
                    oBankRow.Code = (string)reader["Code"];
                    oBankRow.Name = (string)reader["Name"];
                    oBankRow.Discription = (string)reader["Description"];
                    oBankRow.IsEMI = (int)reader["IsEMI"];
                    oBankRow.TransferType = (int)reader["TransferType"];

                    oDSBank.Bank.AddBankRow(oBankRow);
                    oDSBank.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Bank");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Bank /" + ex.Message);
                throw (ex);
            }
            //oDSBank.Merge();
            //oDSBank.AcceptChanges();
            return oDSBank;
        }
        ///
        // Showroom
        ///
        public DSShowroom GetShowroom(DSShowroom oDSShowroom, int nWarehouseID)
        {
            if (!DBController.Instance.CheckConnection())
            {
                DBController.Instance.OpenNewConnection();
            }

            OleDbCommand cmd = DBController.Instance.GetCommand();
            oDSShowroom = new DSShowroom();
            try
            {
                cmd.CommandText = "SELECT a.*,TransferType FROM t_Showroom a, t_DataTransfer b " +
                "Where a.ShowroomID=b.DataID and IsDownload=? and TableName=? and b.WarehouseID=?";

                cmd.Parameters.AddWithValue("IsDownload", (int)Dictionary.IsDownload.No);
                cmd.Parameters.AddWithValue("TableName", "t_Showroom");
                cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSShowroom.ShowroomRow oShowroomRow = oDSShowroom.Showroom.NewShowroomRow();

                    oShowroomRow.ShowroomID = (int)reader["ShowroomID"];
                    oShowroomRow.PositionNo = (int)reader["PositionNo"];
                    oShowroomRow.ShowroomCode = (string)reader["ShowroomCode"];
                    oShowroomRow.ShowroomName = (string)reader["ShowroomName"];
                    oShowroomRow.ShowroomType = (int)reader["ShowroomType"];

                    if (reader["ShowroomAddress"] != DBNull.Value)
                        oShowroomRow.ShowroomAddress = (string)reader["ShowroomAddress"];
                    else oShowroomRow.ShowroomAddress = "";

                    if (reader["Telephone"] != DBNull.Value)
                        oShowroomRow.Telephone = (string)reader["Telephone"];
                    else oShowroomRow.Telephone = "";

                    if (reader["Email"] != DBNull.Value)
                        oShowroomRow.Email = (string)reader["Email"];
                    else oShowroomRow.Email = "";

                    oShowroomRow.WarehouseID = (int)reader["WarehouseID"];

                    if (reader["ManagerID"] != DBNull.Value)
                        oShowroomRow.ManagerID = (int)reader["ManagerID"];
                    else oShowroomRow.ManagerID = 0;
                    oShowroomRow.IsActive = Convert.ToBoolean(reader["IsActive"]);
                    oShowroomRow.DistanceType = (int)reader["DistanceType"];
                    oShowroomRow.CustomerID = (int)reader["CustomerID"];
                    oShowroomRow.ChannelID = (int)reader["ChannelID"];
                    oShowroomRow.MobileNo = (string)reader["MobileNo"];
                    oShowroomRow.IsPOSActive = (int)reader["IsPOSActive"];

                    oDSShowroom.Showroom.AddShowroomRow(oShowroomRow);
                    oDSShowroom.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Bank");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Bank /" + ex.Message);
                throw (ex);
            }

            return oDSShowroom;
        }
        ///
        // PaymentMode
        ///
        public DSPaymentMode GetPaymentMode(DSPaymentMode oDSPaymentMode, int nWarehouseID)
        {
            if (!DBController.Instance.CheckConnection())
            {
                DBController.Instance.OpenNewConnection();
            }

            OleDbCommand cmd = DBController.Instance.GetCommand();
            oDSPaymentMode = new DSPaymentMode();
            try
            {
                cmd.CommandText = "SELECT a.*,TransferType FROM t_PaymentMode a, t_DataTransfer b " +
                "Where a.PaymentModeID=b.DataID and IsDownload=? and TableName=? and WarehouseID=?";

                cmd.Parameters.AddWithValue("IsDownload", (int)Dictionary.IsDownload.No);
                cmd.Parameters.AddWithValue("TableName", "t_PaymentMode");
                cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSPaymentMode.PaymentModeRow oPaymentModeRow = oDSPaymentMode.PaymentMode.NewPaymentModeRow();

                    oPaymentModeRow.PaymentModeID = (int)reader["PaymentModeID"];
                    oPaymentModeRow.PaymentModeName = (string)reader["PaymentModeName"];
                    oPaymentModeRow.IsActive = Convert.ToInt32(reader["IsActive"].ToString());
                    oPaymentModeRow.CreateUserID = (int)reader["CreateUserID"];
                    oPaymentModeRow.CreateDate = Convert.ToDateTime(reader["CreateDate"].ToString());
                    oPaymentModeRow.TransferType = (int)reader["TransferType"];

                    if (reader["SalesType"] != DBNull.Value)
                        oPaymentModeRow.SalesType = (string)reader["SalesType"];
                    else oPaymentModeRow.SalesType = "1";


                    if (reader["IsReceivableItem"] != DBNull.Value)
                        oPaymentModeRow.IsReceivableItem = (int)reader["IsReceivableItem"];
                    else oPaymentModeRow.IsReceivableItem = 0;

                    if (reader["IsFinancialInstitution"] != DBNull.Value)
                        oPaymentModeRow.IsFinancialInstitution = (int)reader["IsFinancialInstitution"];
                    else oPaymentModeRow.IsFinancialInstitution = 0;


                    if (reader["BankID"] != DBNull.Value)
                        oPaymentModeRow.BankID = (int)reader["BankID"];
                    else oPaymentModeRow.BankID = -1;

                    if (reader["IsMandatoryInstrumentNo"] != DBNull.Value)
                        oPaymentModeRow.IsMandatoryInstrumentNo = (int)reader["IsMandatoryInstrumentNo"];
                    else oPaymentModeRow.IsMandatoryInstrumentNo = -1;

                    if (reader["IsEligableforAdvance"] != DBNull.Value)
                        oPaymentModeRow.IsEligableforAdvance = (int)reader["IsEligableforAdvance"];
                    else oPaymentModeRow.IsEligableforAdvance = 0;

                    if (reader["PaymentModeType"] != DBNull.Value)
                        oPaymentModeRow.PaymentModeType = (int) reader["PaymentModeType"];
                    else oPaymentModeRow.PaymentModeType = (int) Dictionary.PaymentModeType.Other;

                    oDSPaymentMode.PaymentMode.AddPaymentModeRow(oPaymentModeRow);
                    oDSPaymentMode.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Payment Mode");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Payment Mode /" + ex.Message);
                throw (ex);
            }
            return oDSPaymentMode;
        }

        ///
        // Sales Promotion Type
        ///
        public DSSalesPromotionType GetSalesPromotionType(DSSalesPromotionType oDSSalesPromotionType, int nWarehouseID)
        {
            if (!DBController.Instance.CheckConnection())
            {
                DBController.Instance.OpenNewConnection();
            }

            OleDbCommand cmd = DBController.Instance.GetCommand();
            oDSSalesPromotionType = new DSSalesPromotionType();
            try
            {
                cmd.CommandText = "SELECT a.*,TransferType FROM t_SalesPromotionType a, t_DataTransfer b " +
                "Where a.SalesPromotionTypeID=b.DataID and IsDownload=? and TableName=? and WarehouseID=?";

                cmd.Parameters.AddWithValue("IsDownload", (int)Dictionary.IsDownload.No);
                cmd.Parameters.AddWithValue("TableName", "t_SalesPromotionType");
                cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSSalesPromotionType.SalesPromotionTypeRow oSalesPromotionTypeRow = oDSSalesPromotionType.SalesPromotionType.NewSalesPromotionTypeRow();

                    oSalesPromotionTypeRow.SalesPromotionTypeID = (int)reader["SalesPromotionTypeID"];
                    oSalesPromotionTypeRow.SalesPromotionTypeName = (string)reader["SalesPromotionTypeName"];
                    oSalesPromotionTypeRow.IsActive = Convert.ToInt32(reader["IsActive"].ToString());
                    oSalesPromotionTypeRow.CreateUserID = (int)reader["CreateUserID"];
                    oSalesPromotionTypeRow.CreateDate = Convert.ToDateTime(reader["CreateDate"].ToString());
                    //oSalesPromotionTypeRow.TransferType = (int)reader["TransferType"];

                    oDSSalesPromotionType.SalesPromotionType.AddSalesPromotionTypeRow(oSalesPromotionTypeRow);
                    oDSSalesPromotionType.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Sales Promotion Type");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Sales Promotion Type /" + ex.Message);
                throw (ex);
            }
            return oDSSalesPromotionType;
        }

        ///
        // Discount Reason
        ///
        public DSDiscountReason GetDiscountReason(DSDiscountReason oDSDiscountReason, int nWarehouseID)
        {
            if (!DBController.Instance.CheckConnection())
            {
                DBController.Instance.OpenNewConnection();
            }

            OleDbCommand cmd = DBController.Instance.GetCommand();
            oDSDiscountReason = new DSDiscountReason();
            try
            {
                cmd.CommandText = "SELECT a.*,TransferType FROM t_DiscountReason a, t_DataTransfer b " +
                "Where a.DiscountReasonID=b.DataID and IsDownload=? and TableName=? and WarehouseID=?";

                cmd.Parameters.AddWithValue("IsDownload", (int)Dictionary.IsDownload.No);
                cmd.Parameters.AddWithValue("TableName", "t_DiscountReason");
                cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSDiscountReason.DiscountReasonRow oDiscountReasonRow = oDSDiscountReason.DiscountReason.NewDiscountReasonRow();

                    oDiscountReasonRow.DiscountReasonID = (int)reader["DiscountReasonID"];
                    oDiscountReasonRow.Discription = (string)reader["Description"];
                    oDiscountReasonRow.IsActive = Convert.ToInt32(reader["IsActive"].ToString());
                    oDiscountReasonRow.CreateUserID = (int)reader["CreateUserID"];
                    oDiscountReasonRow.CreateDate = Convert.ToDateTime(reader["CreateDate"].ToString());
                    oDiscountReasonRow.TransferType = (int)reader["TransferType"];

                    oDSDiscountReason.DiscountReason.AddDiscountReasonRow(oDiscountReasonRow);
                    oDSDiscountReason.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Discount Reason");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Discount Reason /" + ex.Message);
                throw (ex);
            }
            return oDSDiscountReason;
        }

        ///
        // Basic Data
        ///
        public DSBasicData GetBasicData(DSBasicData oDSBasicData, int nCustomerID)
        {
            DBController.Instance.OpenNewConnection();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            oDSBasicData = new DSBasicData();
            try
            {
                cmd.CommandText = "SELECT * FROM t_Bank ";
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSBasicData.BankRow oBankRow = oDSBasicData.Bank.NewBankRow();

                    oBankRow.BankID = (int)reader["BankID"];
                    oBankRow.Code = (string)reader["Code"];
                    oBankRow.Name = (string)reader["Name"];
                    oBankRow.Description = (string)reader["Description"];
                    oBankRow.IsEMI = (string)reader["IsEMI"];


                    oDSBasicData.Bank.AddBankRow(oBankRow);
                    oDSBasicData.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Bank");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Bank /" + ex.Message);
                throw (ex);
            }

            try
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                cmd.CommandText = "SELECT * FROM t_BankBranch ";
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSBasicData.BankBranchRow oBankBranchRow = oDSBasicData.BankBranch.NewBankBranchRow();

                    oBankBranchRow.BranchID = (int)reader["BranchID"];
                    oBankBranchRow.Code = (string)reader["Code"];
                    oBankBranchRow.Name = (string)reader["Name"];
                    oBankBranchRow.Address = (string)reader["Address"];
                    oBankBranchRow.Telephone = (string)reader["Telephone"];
                    oBankBranchRow.BankID = (int)reader["BankID"];

                    oDSBasicData.BankBranch.AddBankBranchRow(oBankBranchRow);
                    oDSBasicData.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Bank Branch");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Bank Branch/" + ex.Message);
                throw (ex);
            }

            try
            {

                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                cmd.CommandText = "SELECT * FROM t_company ";
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSBasicData.CompanyRow oCompanyRow = oDSBasicData.Company.NewCompanyRow();

                    oCompanyRow.CompanyID = (int)reader["CompanyID"];
                    oCompanyRow.CompanyCode = (string)reader["CompanyCode"];
                    oCompanyRow.CompanyName = (string)reader["CompanyName"];
                    oCompanyRow.Description = (string)reader["Description"];
                    oCompanyRow.IsActive = (int)reader["IsActive"];

                    oDSBasicData.Company.AddCompanyRow(oCompanyRow);
                    oDSBasicData.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Company");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Company /" + ex.Message);
                throw (ex);
            }

            try
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                cmd.CommandText = "SELECT CreditLimitID,a.CustomerID,MinCreditLimit,EffectiveDate, ExpiryDate,UserID,MaxCreditLimit " +
                "FROM t_CustomerCreditLimit a INNER JOIN t_customer b ON a.CustomerID=b.customerID " +
                "where getdate() between EffectiveDate and ExpiryDate and ParentCustomerID=? ";

                cmd.Parameters.AddWithValue("ParentCustomerID", nCustomerID);

                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSBasicData.CustomerCreditLimitRow oCustomerCreditLimitRow = oDSBasicData.CustomerCreditLimit.NewCustomerCreditLimitRow();

                    oCustomerCreditLimitRow.CreditLimitID = (int)reader["CreditLimitID"];
                    oCustomerCreditLimitRow.CustomerID = (int)reader["CustomerID"];
                    oCustomerCreditLimitRow.MinCreditLimit = Convert.ToDouble(reader["MinCreditLimit"].ToString());
                    oCustomerCreditLimitRow.EffectiveDate = Convert.ToDateTime(reader["EffectiveDate"].ToString());
                    oCustomerCreditLimitRow.ExpiryDate = Convert.ToDateTime(reader["ExpiryDate"].ToString());
                    oCustomerCreditLimitRow.UserID = (int)reader["UserID"];
                    if (reader["MaxCreditLimit"] != DBNull.Value)
                    {
                        oCustomerCreditLimitRow.MaxCreditLimit = Convert.ToDouble(reader["MaxCreditLimit"].ToString());
                    }
                    else
                    {
                        oCustomerCreditLimitRow.MaxCreditLimit = 0;
                    }

                    oDSBasicData.CustomerCreditLimit.AddCustomerCreditLimitRow(oCustomerCreditLimitRow);
                    oDSBasicData.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Customer Credit Limit");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Customer Credit Limit /" + ex.Message);
                throw (ex);
            }

            try
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                cmd.CommandText = "SELECT * FROM t_InvoiceType ";
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSBasicData.InvoiceTypeRow oInvoiceTypeRow = oDSBasicData.InvoiceType.NewInvoiceTypeRow();

                    oInvoiceTypeRow.InvoiceTypeID = (int)reader["InvoiceTypeID"];
                    oInvoiceTypeRow.InvoiceTypeName = (string)reader["InvoiceTypeName"];

                    oDSBasicData.InvoiceType.AddInvoiceTypeRow(oInvoiceTypeRow);
                    oDSBasicData.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Invoice Type");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Invoice Type /" + ex.Message);
                throw (ex);
            }

            try
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                cmd.CommandText = "SELECT * FROM t_CustomerTranType ";
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSBasicData.CustomerTranTypeRow oCustomerTranTypeRow = oDSBasicData.CustomerTranType.NewCustomerTranTypeRow();

                    oCustomerTranTypeRow.TranTypeID = (int)reader["TranTypeID"];
                    oCustomerTranTypeRow.TranTypeCode = (string)reader["TranTypeCode"];
                    oCustomerTranTypeRow.TranTypeName = (string)reader["TranTypeName"];
                    oCustomerTranTypeRow.TranSide = (int)reader["TranSide"];
                    if (reader["CollectionType"] == null)
                    {
                        oCustomerTranTypeRow.CollectionType = (int)reader["CollectionType"];
                    }
                    else
                    {
                        oCustomerTranTypeRow.CollectionType = -1;
                    }
                    oCustomerTranTypeRow.IsSystem = (int)reader["IsSystem"];

                    oDSBasicData.CustomerTranType.AddCustomerTranTypeRow(oCustomerTranTypeRow);
                    oDSBasicData.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Customer Tran Type");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Customer Tran Type /" + ex.Message);
                throw (ex);
            }

            try
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                cmd.CommandText = "SELECT * FROM t_CustomerTypeWisePriceSetting ";
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSBasicData.CustomerTypeWisePriceSettingRow oCustomerTypeWisePriceSettingRow = oDSBasicData.CustomerTypeWisePriceSetting.NewCustomerTypeWisePriceSettingRow();

                    oCustomerTypeWisePriceSettingRow.PriceSettingID = Convert.ToInt64(reader["PriceSettingID"].ToString());
                    oCustomerTypeWisePriceSettingRow.PriceOptionID = (int)reader["PriceOptionID"];
                    oCustomerTypeWisePriceSettingRow.DiscountPercent = Convert.ToDouble(reader["DiscountPercent"].ToString());
                    oCustomerTypeWisePriceSettingRow.EffectiveDate = Convert.ToDateTime(reader["EffectiveDate"].ToString());
                    oCustomerTypeWisePriceSettingRow.IsCurrent = (int)reader["IsCurrent"];
                    oCustomerTypeWisePriceSettingRow.HaveAmountDiscount = (int)reader["HaveAmountDiscount"];
                    oCustomerTypeWisePriceSettingRow.CustTypeID = (int)reader["CustTypeID"];

                    oDSBasicData.CustomerTypeWisePriceSetting.AddCustomerTypeWisePriceSettingRow(oCustomerTypeWisePriceSettingRow);
                    oDSBasicData.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Customer Type Wise Price Setting");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Customer Type Wise Price Setting /" + ex.Message);
                throw (ex);
            }

            try
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                cmd.CommandText = "SELECT a.CustomerID, CurrentBalance FROM t_CustomerAccount a INNER JOIN t_Customer b " +
                                    "on a.CustomerID=b.CustomerID Where ParentCustomerID=?";

                cmd.Parameters.AddWithValue("ParentCustomerID", nCustomerID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSBasicData.CustomerAccountRow oCustomerAccountRow = oDSBasicData.CustomerAccount.NewCustomerAccountRow();

                    oCustomerAccountRow.CustomerID = (int)reader["CustomerID"];
                    oCustomerAccountRow.CurrentBalance = Convert.ToDouble(reader["CurrentBalance"].ToString());

                    oDSBasicData.CustomerAccount.AddCustomerAccountRow(oCustomerAccountRow);
                    oDSBasicData.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Customer Account");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Customer Account /" + ex.Message);
                throw (ex);
            }

            DBController.Instance.CloseConnection();
            return oDSBasicData;
        }
        ///
        // UnsoldDefectiveProduct
        ///
        public DSUnsoldDefectiveProduct GetUnsoldDefectiveProduct(DSUnsoldDefectiveProduct oDSUnsoldDefectiveProduct, int nWarehouseID)
        {
            if (!DBController.Instance.CheckConnection())
            {
                DBController.Instance.OpenNewConnection();
            }

            OleDbCommand cmd = DBController.Instance.GetCommand();
            oDSUnsoldDefectiveProduct = new DSUnsoldDefectiveProduct();
            try
            {
                cmd.CommandText = "Select DefectiveID, DefectiveNo, a.WarehouseID,ProductID,BarcodeSL,DefectiveType, " +
                            "Fault,Reason,Remarks,ProposeDicAmount,Status,CreateUserID,a.CreateDate,RefTranNo,RefTranDate, " +
                            "JobNo,ApproveDicAmount,ApproveBy,ApproveDate, " +
                            "RefInvoiceNo,RefInvoiceDate,DefectiveCategory,AssessmentFindings,IsRepairable, " +
                            "Accessories,TechRecommandation,TechRemarks,IsLocallySaleable,PaneltyAmount, " +
                            "IsLocallyRepaired, RepairStatus,OriginalSL, IsPenaltyApplicable, " +
                            "IsDefectiveAcknowledged, AcknowledgmentRemarks,ExpSalesDate,FromWH,ToWH " +
                            "From t_UnsoldDefectiveProduct a, t_DataTransfer b " +
                            "where a.DefectiveID = b.DataID and a.WarehouseID = b.WarehouseID and " +
                            "TableName = 't_UnsoldDefectiveProduct' and IsDownload = 1 and b.WarehouseID = " + nWarehouseID + "";


                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSUnsoldDefectiveProduct.UnsoldDefectiveProductRow oUnsoldDefectiveProductRow = oDSUnsoldDefectiveProduct.UnsoldDefectiveProduct.NewUnsoldDefectiveProductRow();

                    oUnsoldDefectiveProductRow.DefectiveID = Convert.ToInt32(reader["DefectiveID"]);
                    oUnsoldDefectiveProductRow.DefectiveNo = (string)reader["DefectiveNo"];
                    oUnsoldDefectiveProductRow.WarehouseID = Convert.ToInt32(reader["WarehouseID"]);
                    oUnsoldDefectiveProductRow.ProductID = Convert.ToInt32(reader["ProductID"]);
                    oUnsoldDefectiveProductRow.BarcodeSL = (string)reader["BarcodeSL"];
                    oUnsoldDefectiveProductRow.DefectiveType = (int)reader["DefectiveType"];
                    oUnsoldDefectiveProductRow.Fault = (string)reader["Fault"];
                    oUnsoldDefectiveProductRow.Reason = (string)reader["Reason"];
                    if (reader["Remarks"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.Remarks = (string)reader["Remarks"];
                    if (reader["ProposeDicAmount"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.ProposeDicAmount = Convert.ToDouble(reader["ProposeDicAmount"]);
                    oUnsoldDefectiveProductRow.Status = (int)reader["Status"];
                    oUnsoldDefectiveProductRow.CreateUserID = (int)reader["CreateUserID"];
                    oUnsoldDefectiveProductRow.CreateDate = Convert.ToDateTime(reader["CreateDate"].ToString());
                    oUnsoldDefectiveProductRow.RefTranNo = (string)reader["RefTranNo"];
                    oUnsoldDefectiveProductRow.RefTranDate = Convert.ToDateTime(reader["RefTranDate"].ToString());
                    if (reader["JobNo"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.JobNo = (string)reader["JobNo"];

                    if (reader["JobNo"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.JobNo = (string)reader["JobNo"];
                    if (reader["ApproveDicAmount"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.ApproveDicAmount = Convert.ToDouble(reader["ApproveDicAmount"]);
                    if (reader["ApproveBy"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.ApproveBy = (int)reader["ApproveBy"];
                    if (reader["ApproveDate"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.ApproveDate = Convert.ToDateTime(reader["ApproveDate"].ToString());
                    if (reader["RefInvoiceNo"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.RefInvoiceNo = (string)reader["RefInvoiceNo"];
                    if (reader["RefInvoiceDate"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.RefInvoiceDate = Convert.ToDateTime(reader["RefInvoiceDate"].ToString());
                    if (reader["DefectiveCategory"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.DefectiveCategory = Convert.ToInt32(reader["DefectiveCategory"]);
                    if (reader["AssessmentFindings"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.AssessmentFindings = (string)reader["AssessmentFindings"];
                    if (reader["IsRepairable"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.IsRepairable = Convert.ToInt32(reader["IsRepairable"]);
                    if (reader["Accessories"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.Accessories = (string)reader["Accessories"];
                    if (reader["TechRecommandation"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.TechRecommandation = Convert.ToInt32(reader["TechRecommandation"]);
                    if (reader["TechRemarks"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.TechRemarks = (string)reader["TechRemarks"];
                    if (reader["IsLocallySaleable"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.IsLocallySaleable = Convert.ToInt32(reader["IsLocallySaleable"]);
                    if (reader["PaneltyAmount"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.PaneltyAmount = Convert.ToInt32(reader["PaneltyAmount"]);
                    if (reader["IsLocallyRepaired"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.IsLocallyRepaired = Convert.ToInt32(reader["IsLocallyRepaired"]);

                    if (reader["RepairStatus"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.RepairStatus = (string)reader["RepairStatus"];
                    if (reader["OriginalSL"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.OriginalSL = (string)reader["OriginalSL"];
                    if (reader["IsPenaltyApplicable"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.IsPenaltyApplicable = (int)reader["IsPenaltyApplicable"];
                    if (reader["IsDefectiveAcknowledged"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.IsDefectiveAcknowledged = (int)reader["IsDefectiveAcknowledged"];
                    if (reader["AcknowledgmentRemarks"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.AcknowledgmentRemarks = (string)reader["AcknowledgmentRemarks"];
                    if (reader["ExpSalesDate"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.ExpSalesDate = (DateTime)reader["ExpSalesDate"];
                    if (reader["FromWH"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.FromWH = (int)reader["FromWH"];
                    if (reader["ToWH"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.ToWH = (int)reader["ToWH"];

                    oDSUnsoldDefectiveProduct.UnsoldDefectiveProduct.AddUnsoldDefectiveProductRow(oUnsoldDefectiveProductRow);
                    oDSUnsoldDefectiveProduct.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Unsold Defective Product");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Unsold Defective Product /" + ex.Message);
                throw (ex);
            }
            //oDSBank.Merge();
            //oDSBank.AcceptChanges();
            return oDSUnsoldDefectiveProduct;
        }
        ///
        // UnsoldDefectiveProductNew
        ///
        public DSUnsoldDefectiveProduct GetUnsoldDefectiveProductNew(DSUnsoldDefectiveProduct oDSUnsoldDefectiveProduct, int nWarehouseID)
        {
            if (!DBController.Instance.CheckConnection())
            {
                DBController.Instance.OpenNewConnection();
            }

            OleDbCommand cmd = DBController.Instance.GetCommand();
            oDSUnsoldDefectiveProduct = new DSUnsoldDefectiveProduct();
            try
            {
                cmd.CommandText = "Select DefectiveID, DefectiveNo, a.WarehouseID,ProductID,BarcodeSL,DefectiveType, " +
                            "Fault,Reason,Remarks,ProposeDicAmount,Status,CreateUserID,a.CreateDate,RefTranNo,RefTranDate, " +
                            "JobNo,ApproveDicAmount,ApproveBy,ApproveDate, " +
                            "RefInvoiceNo,RefInvoiceDate,DefectiveCategory,AssessmentFindings, " +
                            "Accessories,TechRecommandation,TechRemarks,IsLocallySaleable,PaneltyAmount, " +
                            "OriginalSL, IsPenaltyApplicable, " +
                            "IsDefectiveAcknowledged, AcknowledgmentRemarks,ExpSalesDate,FromWH,ToWH " +
                            "From t_UnsoldDefectiveProductNew a, t_DataTransfer b " +
                            "where a.DefectiveID = b.DataID and a.WarehouseID = b.WarehouseID and " +
                            "TableName = 't_UnsoldDefectiveProductNew' and IsDownload = 1 and b.WarehouseID = " + nWarehouseID + "";


                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSUnsoldDefectiveProduct.UnsoldDefectiveProductRow oUnsoldDefectiveProductRow = oDSUnsoldDefectiveProduct.UnsoldDefectiveProduct.NewUnsoldDefectiveProductRow();

                    oUnsoldDefectiveProductRow.DefectiveID = Convert.ToInt32(reader["DefectiveID"]);
                    oUnsoldDefectiveProductRow.DefectiveNo = (string)reader["DefectiveNo"];
                    oUnsoldDefectiveProductRow.WarehouseID = Convert.ToInt32(reader["WarehouseID"]);
                    oUnsoldDefectiveProductRow.ProductID = Convert.ToInt32(reader["ProductID"]);
                    oUnsoldDefectiveProductRow.BarcodeSL = (string)reader["BarcodeSL"];
                    oUnsoldDefectiveProductRow.DefectiveType = (int)reader["DefectiveType"];
                    oUnsoldDefectiveProductRow.Fault = (string)reader["Fault"];
                    oUnsoldDefectiveProductRow.Reason = (string)reader["Reason"];
                    if (reader["Remarks"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.Remarks = (string)reader["Remarks"];
                    if (reader["ProposeDicAmount"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.ProposeDicAmount = Convert.ToDouble(reader["ProposeDicAmount"]);
                    oUnsoldDefectiveProductRow.Status = (int)reader["Status"];
                    oUnsoldDefectiveProductRow.CreateUserID = (int)reader["CreateUserID"];
                    oUnsoldDefectiveProductRow.CreateDate = Convert.ToDateTime(reader["CreateDate"].ToString());
                    oUnsoldDefectiveProductRow.RefTranNo = (string)reader["RefTranNo"];
                    oUnsoldDefectiveProductRow.RefTranDate = Convert.ToDateTime(reader["RefTranDate"].ToString());
                    if (reader["JobNo"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.JobNo = (string)reader["JobNo"];

                    if (reader["JobNo"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.JobNo = (string)reader["JobNo"];
                    if (reader["ApproveDicAmount"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.ApproveDicAmount = Convert.ToDouble(reader["ApproveDicAmount"]);
                    if (reader["ApproveBy"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.ApproveBy = (int)reader["ApproveBy"];
                    if (reader["ApproveDate"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.ApproveDate = Convert.ToDateTime(reader["ApproveDate"].ToString());
                    if (reader["RefInvoiceNo"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.RefInvoiceNo = (string)reader["RefInvoiceNo"];
                    if (reader["RefInvoiceDate"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.RefInvoiceDate = Convert.ToDateTime(reader["RefInvoiceDate"].ToString());
                    if (reader["DefectiveCategory"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.DefectiveCategory = Convert.ToInt32(reader["DefectiveCategory"]);
                    if (reader["AssessmentFindings"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.AssessmentFindings = (string)reader["AssessmentFindings"];

                    if (reader["Accessories"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.Accessories = (string)reader["Accessories"];
                    if (reader["TechRecommandation"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.TechRecommandation = Convert.ToInt32(reader["TechRecommandation"]);
                    if (reader["TechRemarks"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.TechRemarks = (string)reader["TechRemarks"];
                    if (reader["IsLocallySaleable"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.IsLocallySaleable = Convert.ToInt32(reader["IsLocallySaleable"]);
                    if (reader["PaneltyAmount"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.PaneltyAmount = Convert.ToInt32(reader["PaneltyAmount"]);

                    oUnsoldDefectiveProductRow.OriginalSL = (string)reader["OriginalSL"];
                    if (reader["IsPenaltyApplicable"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.IsPenaltyApplicable = (int)reader["IsPenaltyApplicable"];
                    if (reader["IsDefectiveAcknowledged"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.IsDefectiveAcknowledged = (int)reader["IsDefectiveAcknowledged"];
                    if (reader["AcknowledgmentRemarks"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.AcknowledgmentRemarks = (string)reader["AcknowledgmentRemarks"];
                    if (reader["ExpSalesDate"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.ExpSalesDate = (DateTime)reader["ExpSalesDate"];
                    if (reader["FromWH"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.FromWH = (int)reader["FromWH"];
                    if (reader["ToWH"] != DBNull.Value)
                        oUnsoldDefectiveProductRow.ToWH = (int)reader["ToWH"];

                    oDSUnsoldDefectiveProduct.UnsoldDefectiveProduct.AddUnsoldDefectiveProductRow(oUnsoldDefectiveProductRow);
                    oDSUnsoldDefectiveProduct.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Unsold Defective Product");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Unsold Defective Product /" + ex.Message);
                throw (ex);
            }
            //oDSBank.Merge();
            //oDSBank.AcceptChanges();
            return oDSUnsoldDefectiveProduct;
        }

        ///
        // Customer Tran
        ///

        public DSCustomerTransaction GetCustomerTran(DSCustomerTransaction oDSCustomerTransaction, int nWarehouseID)
        {
            oDSCustomerTransaction = new DSCustomerTransaction();

            CustomerTransactionReport oCTR = new CustomerTransactionReport();
            DBController.Instance.OpenNewConnection();
            oCTR.RefreshForDataDownload(nWarehouseID);
            DBController.Instance.CloseConnection();

            foreach (CustomerTransaction oCustomerTransaction in oCTR)
            {

                DSCustomerTransaction.CustomerTranRow oCustomerTranRow = oDSCustomerTransaction.CustomerTran.NewCustomerTranRow();
                oCustomerTranRow.TranID = int.Parse(oCustomerTransaction.TranID.ToString());
                oCustomerTranRow.TranNo = oCustomerTransaction.TranNo;
                oCustomerTranRow.CustomerID = int.Parse(oCustomerTransaction.CustomerID.ToString());
                oCustomerTranRow.TranDate = Convert.ToDateTime(oCustomerTransaction.TranDate.ToString());
                oCustomerTranRow.TranTypeID = int.Parse(oCustomerTransaction.TranTypeID.ToString());
                oCustomerTranRow.Amount = Convert.ToDouble(oCustomerTransaction.Amount.ToString());
                oCustomerTranRow.InstrumentNo = oCustomerTransaction.InstrumentNo.ToString();
                if (oCustomerTransaction.InstrumentDate != null)
                    oCustomerTranRow.InstrumentDate = Convert.ToDateTime(oCustomerTransaction.InstrumentDate.ToString());

                oCustomerTranRow.InstrumentType = int.Parse(oCustomerTransaction.InstrumentType.ToString());
                oCustomerTranRow.InstrumentStatus = int.Parse(oCustomerTransaction.InstrumentStatus.ToString());
                oCustomerTranRow.BranchID = int.Parse(oCustomerTransaction.BranchID.ToString());
                oCustomerTranRow.BranchName = oCustomerTransaction.BranchName;
                oCustomerTranRow.EntryUserID = int.Parse(oCustomerTransaction.EntryUserID.ToString());
                oCustomerTranRow.EntryDate = Convert.ToDateTime(oCustomerTransaction.EntryDate.ToString());
                oCustomerTranRow.Remarks = oCustomerTransaction.Remarks;
                oCustomerTranRow.TranSide = oCustomerTransaction.TranSide;
                oDSCustomerTransaction.CustomerTran.AddCustomerTranRow(oCustomerTranRow);
                oDSCustomerTransaction.AcceptChanges();


                foreach (InvoiceWisePayment oInvoiceWisePayment in oCustomerTransaction.InvoiceWisePayments)
                {
                    DSCustomerTransaction.InvoiceWisePaymentRow oInvoiceWisePaymentRow = oDSCustomerTransaction.InvoiceWisePayment.NewInvoiceWisePaymentRow();
                    oInvoiceWisePaymentRow.RecordID = Convert.ToInt64(oInvoiceWisePayment.RecordID.ToString());
                    oInvoiceWisePaymentRow.CustomerTranID = Convert.ToInt64(oInvoiceWisePayment.CustomerTranID.ToString());
                    oInvoiceWisePaymentRow.InvoiceID = Convert.ToInt64(oInvoiceWisePayment.InvoiceID.ToString());
                    oInvoiceWisePaymentRow.CustomerID = Convert.ToInt64(oInvoiceWisePayment.CustomerID.ToString());
                    oInvoiceWisePaymentRow.Amount = Convert.ToDouble(oInvoiceWisePayment.Amount.ToString());
                    oInvoiceWisePaymentRow.CreateDate = Convert.ToDateTime(oInvoiceWisePayment.CreateDate.ToString());
                    oInvoiceWisePaymentRow.CreateUserID = int.Parse(oInvoiceWisePayment.CreateUserID.ToString());
                    oInvoiceWisePaymentRow.InvoiceNo = oInvoiceWisePayment.InvoiceNo.ToString();

                    oDSCustomerTransaction.InvoiceWisePayment.AddInvoiceWisePaymentRow(oInvoiceWisePaymentRow);
                    oDSCustomerTransaction.AcceptChanges();
                }

            }
            return oDSCustomerTransaction;
        }


        /// <summary>
        /// Get Office Item
        /// </summary>
        /// <param name="oDSProductDetail"></param>
        /// <returns></returns>
        /// 
        public DSOfficeItem GetDSOfficeItem(DSOfficeItem oDSOfficeItem, int nWarehouseID)
        {
            oDSOfficeItem = new DSOfficeItem();
            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }

                OleDbCommand cmd = DBController.Instance.GetCommand();
                cmd.CommandText = " select * from t_OfficeItems a inner join t_DataTransfer b on b.DataID=a.ID  " +
                                  " where b.TableName='t_OfficeItems' and  " +
                                  " b.IsDownload=1 and WarehouseID= '" + nWarehouseID + "'  ";


                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSOfficeItem.OfficeItemRow oOfficeItemRow = oDSOfficeItem.OfficeItem.NewOfficeItemRow();

                    oOfficeItemRow.ID = (int)reader["ID"];
                    oOfficeItemRow.Code = (string)reader["Code"];
                    oOfficeItemRow.ArticlesName = (string)reader["ArticlesName"];
                    oOfficeItemRow.Category = (int)reader["Category"];
                    oOfficeItemRow.CreateDate = Convert.ToDateTime(reader["CreateDate"].ToString());
                    oOfficeItemRow.CreateUseID = (int)reader["CreateUserID"];

                    oDSOfficeItem.OfficeItem.AddOfficeItemRow(oOfficeItemRow);
                    oDSOfficeItem.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Office Item");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Office Item /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSOfficeItem;
        }

        /// <summary>
        /// Get TP Vat Ptoduct
        /// </summary>
        /// <returns></returns>

        public DSTPVatProduct GetTPVatPtoduct(DSTPVatProduct oDSTPVatProduct, int nWarehouseID)
        {
            oDSTPVatProduct = new DSTPVatProduct();
            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }

                OleDbCommand cmd = DBController.Instance.GetCommand();
                cmd.CommandText = "select ProductID,a.CreateDate,CreateUserID,Status,UpdateUserID,a.UpdateDate,isnull(a.Comment,'') Comment from t_TPVatProduct a inner join t_DataTransfer b on b.DataID=a.ProductID "
                              + "  where b.TableName='t_TPVatProduct' and "
                              + "  b.IsDownload=1 and WarehouseID= '" + nWarehouseID + "' ";


                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSTPVatProduct.TPVatProductRow oTPVatProductRow = oDSTPVatProduct.TPVatProduct.NewTPVatProductRow();

                    oTPVatProductRow.ProductID = (int)reader["ProductID"];
                    oTPVatProductRow.CreateDate = Convert.ToDateTime(reader["CreateDate"].ToString());
                    oTPVatProductRow.CreateUserID = (int)reader["CreateUserID"];
                    oTPVatProductRow.Status = (int)reader["Status"];
                    if (reader["UpdateUserID"] != DBNull.Value)
                        oTPVatProductRow.UpdateUserID = (int)reader["UpdateUserID"];
                    else oTPVatProductRow.UpdateUserID = -1;
                    oTPVatProductRow.Comment = (string)reader["Comment"];
                    //if (reader["UpdateDate"] != null)
                    //    oTPVatProductRow.UpdateDate = Convert.ToDateTime(reader["UpdateDate"].ToString());
                    //else oTPVatProductRow.UpdateDate = DateTime.Now.Date;


                    oDSTPVatProduct.TPVatProduct.AddTPVatProductRow(oTPVatProductRow);
                    oDSTPVatProduct.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get TP Vat Product");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting TP Vat Product /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSTPVatProduct;
        }


        /// <summary>
        /// Get Temp Customer 
        /// </summary>
        /// <returns></returns>

        public DSCustomerTemp GetCustomerTemp(DSCustomerTemp oDSCustomerTemp, int nWarehouseID)
        {
            oDSCustomerTemp = new DSCustomerTemp();
            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }

                OleDbCommand cmd = DBController.Instance.GetCommand();
                cmd.CommandText = " Select * from t_CustomerTemp a inner join t_DataTransfer b on b.DataID=a.CustomerID "
                              + "  where b.TableName='t_CustomerTemp' and "
                              + "  b.IsDownload=1 and a.WarehouseID=b.WarehouseID and a.WarehouseID= '" + nWarehouseID + "' ";


                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSCustomerTemp.CustomerTempRow oCustomerTempRow = oDSCustomerTemp.CustomerTemp.NewCustomerTempRow();

                    oCustomerTempRow.CustomerID = (int)reader["CustomerID"];
                    oCustomerTempRow.WarehouseID = (int)reader["WarehouseID"];
                    oCustomerTempRow.Status = (int)reader["Status"];

                    if (reader["NewCustomerCode"] != DBNull.Value)
                        oCustomerTempRow.CustomerCode = (string)reader["NewCustomerCode"];
                    else oCustomerTempRow.CustomerCode = "";

                    if (reader["ApprovedUserID"] != DBNull.Value)
                        oCustomerTempRow.ApprovedUserID = (int)reader["ApprovedUserID"];
                    else oCustomerTempRow.ApprovedUserID = -1;

                    if (reader["ApprovedDate"] != null)
                        oCustomerTempRow.ApprovedDate = Convert.ToDateTime(reader["ApprovedDate"].ToString());
                    else oCustomerTempRow.ApprovedDate = DateTime.Now.Date;


                    oDSCustomerTemp.CustomerTemp.AddCustomerTempRow(oCustomerTempRow);
                    oDSCustomerTemp.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Temp Customer");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Temp Customer /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSCustomerTemp;
        }

        /// <summary>
        /// Get Invoice Reverse Data 
        /// </summary>
        /// <returns></returns>

        public DSInvoiceReverse GetInvoiceReverseData(DSInvoiceReverse oDSInvoiceReverse, int nWarehouseID)
        {
            oDSInvoiceReverse = new DSInvoiceReverse();
            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }

                OleDbCommand cmd = DBController.Instance.GetCommand();
                cmd.CommandText = " Select * from t_InvoiceReverse a inner join t_DataTransfer b on b.DataID=a.ReverseID "
                              + "  where b.TableName='t_InvoiceReverse' and "
                              + "  b.IsDownload=1 and a.WarehouseID= '" + nWarehouseID + "' and a.WarehouseID=b.WarehouseID";


                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSInvoiceReverse.InvoiceReverseRow oInvoiceReverseRow = oDSInvoiceReverse.InvoiceReverse.NewInvoiceReverseRow();

                    oInvoiceReverseRow.ReverseID = (int)reader["ReverseID"];
                    oInvoiceReverseRow.WarehouseID = (int)reader["WarehouseID"];
                    oInvoiceReverseRow.InvoiceNo = (string)reader["InvoiceNo"];
                    oInvoiceReverseRow.Reason = (string)reader["Reason"];
                    oInvoiceReverseRow.CreateUserID = (int)reader["CreateUserID"];
                    oInvoiceReverseRow.CreateDate = Convert.ToDateTime(reader["CreateDate"].ToString());

                    if (reader["Recommend"] != DBNull.Value)
                        oInvoiceReverseRow.Recommend = (string)reader["Recommend"];
                    else oInvoiceReverseRow.Recommend = "";
                    if (reader["RecommendBy"] != DBNull.Value)
                        oInvoiceReverseRow.RecommendBy = (int)reader["RecommendBy"];
                    else oInvoiceReverseRow.RecommendBy = -1;
                    if (reader["RecommendDate"] != null)
                        oInvoiceReverseRow.RecommendDate = Convert.ToDateTime(reader["RecommendDate"].ToString());
                    else oInvoiceReverseRow.RecommendDate = DateTime.Now.Date;

                    if (reader["ApprovedCommand"] != DBNull.Value)
                        oInvoiceReverseRow.ApprovedCommand = (string)reader["ApprovedCommand"];
                    else oInvoiceReverseRow.ApprovedCommand = "";

                    if (reader["ApprovedUserID"] != DBNull.Value)
                        oInvoiceReverseRow.ApprovedUserID = (int)reader["ApprovedUserID"];
                    else oInvoiceReverseRow.ApprovedUserID = -1;
                    if (reader["ApprovedDate"] != null)
                        oInvoiceReverseRow.ApprovedDate = Convert.ToDateTime(reader["ApprovedDate"].ToString());
                    else oInvoiceReverseRow.ApprovedDate = DateTime.Now.Date;
                    oInvoiceReverseRow.Status = (int)reader["Status"];

                    oDSInvoiceReverse.InvoiceReverse.AddInvoiceReverseRow(oInvoiceReverseRow);
                    oDSInvoiceReverse.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Invoice Reverse Appalication");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Invoice Reverse Appalication /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSInvoiceReverse;
        }

        /// <summary>
        /// Get Invoice Reverse Data 
        /// </summary>
        /// <returns></returns>

        public DSExchangeOfferVender GetExchangeOfferVenderData(DSExchangeOfferVender oDSExchangeOfferVender, int nWarehouseID)
        {
            oDSExchangeOfferVender = new DSExchangeOfferVender();
            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }

                OleDbCommand cmd = DBController.Instance.GetCommand();
                cmd.CommandText = "Select VenderID,a.Code,a.Name, " +
                                " c.Address,c.ContactNo,c.ContactPerson,a.ParentCustomerID, " +
                                " a.Remarks,a.IsActive,a.CreateUserID,a.CreateDate,Balance  " +
                                " from t_ExchangeOfferVender a  " +
                                " inner join t_DataTransfer b on b.DataID=a.VenderID  " +
                                " inner join t_ExchangeOfferVenderParent c on c.ParentVenderID=a.ParentVenderID  " +
                                " where b.TableName='t_ExchangeOfferVender' and   " +
                                " b.IsDownload=1 and b.WarehouseID= " + nWarehouseID + "";


                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSExchangeOfferVender.ExchangeOfferVenderRow oExchangeOfferVenderRow = oDSExchangeOfferVender.ExchangeOfferVender.NewExchangeOfferVenderRow();

                    oExchangeOfferVenderRow.VenderID = (int)reader["VenderID"];
                    oExchangeOfferVenderRow.Code = (string)reader["Code"];
                    oExchangeOfferVenderRow.Name = (string)reader["Name"];
                    oExchangeOfferVenderRow.Address = (string)reader["Address"];
                    oExchangeOfferVenderRow.ContactNo = (string)reader["ContactNo"];
                    oExchangeOfferVenderRow.ContactPerson = (string)reader["ContactPerson"];
                    oExchangeOfferVenderRow.ParentCustomerID = (int)reader["ParentCustomerID"];
                    if (reader["Remarks"] != DBNull.Value)
                        oExchangeOfferVenderRow.Remarks = (string)reader["Remarks"];
                    else oExchangeOfferVenderRow.Remarks = "";
                    oExchangeOfferVenderRow.IsActive = (int)reader["IsActive"];
                    oExchangeOfferVenderRow.CreateUserID = (int)reader["CreateUserID"];
                    oExchangeOfferVenderRow.CreateDate = Convert.ToDateTime(reader["CreateDate"].ToString());
                    oExchangeOfferVenderRow.Balance = Convert.ToDouble(reader["Balance"].ToString());


                    oDSExchangeOfferVender.ExchangeOfferVender.AddExchangeOfferVenderRow(oExchangeOfferVenderRow);
                    oDSExchangeOfferVender.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Exchange Offer Vender");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Exchange Offer Vender /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSExchangeOfferVender;
        }

        /// <summary>
        /// Get Exchange Offer Vender Tran 
        /// </summary>
        /// <returns></returns>

        public DSExchangeOfferVenderTran GetExchangeOfferVenderTranData(DSExchangeOfferVenderTran oDSExchangeOfferVenderTran, int nWarehouseID)
        {
            oDSExchangeOfferVenderTran = new DSExchangeOfferVenderTran();
            try
            {
                DBController.Instance.OpenNewConnection();
                OleDbCommand cmd = DBController.Instance.GetCommand();
                cmd.CommandText = "Select a.*,isnull(Balance,0) as Balance from t_ExchangeOfferVenderTran a  " +
                                " inner join t_DataTransfer b on b.DataID=a.VenderTranID    " +
                                " inner join t_ExchangeOfferVenderAccount c on c.VenderID=a.VenderID    " +
                                " where b.TableName='t_ExchangeOfferVenderTran' and    " +
                                " b.IsDownload=1 and b.WarehouseID= " + nWarehouseID + "";


                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSExchangeOfferVenderTran.ExchangeOfferVenderTranRow oExchangeOfferVenderTranRow = oDSExchangeOfferVenderTran.ExchangeOfferVenderTran.NewExchangeOfferVenderTranRow();

                    oExchangeOfferVenderTranRow.VenderTranID = (int)reader["VenderTranID"];
                    oExchangeOfferVenderTranRow.VenderTranNo = (string)reader["VenderTranNo"];
                    oExchangeOfferVenderTranRow.VenderTranDate = Convert.ToDateTime(reader["VenderTranDate"].ToString());
                    oExchangeOfferVenderTranRow.TranSide = (int)reader["TranSide"];
                    oExchangeOfferVenderTranRow.VenderID = (int)reader["VenderID"];
                    oExchangeOfferVenderTranRow.Amount = Convert.ToDouble(reader["Amount"].ToString());

                    if (reader["InstrumentType"] != DBNull.Value)
                        oExchangeOfferVenderTranRow.InstrumentType = (int)reader["InstrumentType"];
                    else oExchangeOfferVenderTranRow.InstrumentType = -1;
                    if (reader["InstrumentNo"] != DBNull.Value)
                        oExchangeOfferVenderTranRow.InstrumentNo = (string)reader["InstrumentNo"];
                    else oExchangeOfferVenderTranRow.InstrumentNo = "";
                    if (reader["InstrumentDate"] != DBNull.Value)
                        oExchangeOfferVenderTranRow.InstrumentDate = Convert.ToDateTime(reader["InstrumentDate"].ToString());
                    else oExchangeOfferVenderTranRow.InstrumentDate = DateTime.Now.Date;
                    if (reader["BankID"] != DBNull.Value)
                        oExchangeOfferVenderTranRow.BankID = (int)reader["BankID"];
                    else oExchangeOfferVenderTranRow.BankID = -1;

                    if (reader["BranchName"] != DBNull.Value)
                        oExchangeOfferVenderTranRow.BranchName = (string)reader["BranchName"];
                    else oExchangeOfferVenderTranRow.BranchName = "";
                    if (reader["Remarks"] != DBNull.Value)
                        oExchangeOfferVenderTranRow.Remarks = (string)reader["Remarks"];
                    else oExchangeOfferVenderTranRow.Remarks = "";

                    oExchangeOfferVenderTranRow.CreateUserID = (int)reader["CreateUserID"];
                    oExchangeOfferVenderTranRow.CreateDate = Convert.ToDateTime(reader["CreateDate"].ToString());
                    oExchangeOfferVenderTranRow.Balance = Convert.ToDouble(reader["Balance"].ToString());


                    oDSExchangeOfferVenderTran.ExchangeOfferVenderTran.AddExchangeOfferVenderTranRow(oExchangeOfferVenderTranRow);
                    oDSExchangeOfferVenderTran.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Exchange Offer Vender Tran");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Exchange Offer Vender Tran/" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSExchangeOfferVenderTran;
        }

        /// <summary>
        /// Get Exchange Offer Job
        /// </summary>

        public DSExchangeOfferJob GetExchangeOfferJob(DSExchangeOfferJob oDSExchangeOfferJob, int nWarehouseID)
        {
            oDSExchangeOfferJob = new DSExchangeOfferJob();
            DSExchangeOfferJob oDSExchangeOfferJobDetail = new DSExchangeOfferJob();
            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }

                OleDbCommand cmd = DBController.Instance.GetCommand();

                cmd.CommandText = " select a.* from t_ExchangeOfferJob a , t_DataTransfer b where b.DataID=a.JobID  " +
                                  " and b.TableName='t_ExchangeOfferJob'    " +
                                  " and b.IsDownload=1 and b.WarehouseID = " + nWarehouseID + "";

                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSExchangeOfferJob.ExchangeOfferJobRow oExchangeOfferJobRow = oDSExchangeOfferJob.ExchangeOfferJob.NewExchangeOfferJobRow();


                    oExchangeOfferJobRow.JobID = (int)reader["JobID"];
                    oExchangeOfferJobRow.JobNo = (string)reader["JobNo"];
                    oExchangeOfferJobRow.ContactMode = (int)reader["ContactMode"];
                    oExchangeOfferJobRow.ContactDate = Convert.ToDateTime(reader["ContactDate"]);
                    oExchangeOfferJobRow.CustomerName = (string)reader["CustomerName"];
                    oExchangeOfferJobRow.Address = (string)reader["Address"];
                    oExchangeOfferJobRow.ContactNo = (string)reader["ContactNo"];
                    oExchangeOfferJobRow.Email = (string)reader["Email"];
                    oExchangeOfferJobRow.AssignedVenderID = (int)reader["AssignedVenderID"];
                    oExchangeOfferJobRow.ParentCustomerID = (int)reader["ParentCustomerID"];
                    oExchangeOfferJobRow.AssignDate = Convert.ToDateTime(reader["AssignDate"]);
                    oExchangeOfferJobRow.ExpectedVisitDate = Convert.ToDateTime(reader["ExpectedVisitDate"]);


                    if (reader["Remarks"] != DBNull.Value)
                    {
                        oExchangeOfferJobRow.Remarks = (string)reader["Remarks"];
                    }
                    else
                    {
                        oExchangeOfferJobRow.Remarks = "";
                    }
                    if (reader["RefInvoiceNo"] != DBNull.Value)
                    {
                        oExchangeOfferJobRow.RefInvoiceNo = (string)reader["RefInvoiceNo"];
                    }
                    else
                    {
                        oExchangeOfferJobRow.RefInvoiceNo = "";
                    }
                    if (reader["CancelNote"] != DBNull.Value)
                    {
                        oExchangeOfferJobRow.CancelNote = (string)reader["CancelNote"];
                    }
                    else
                    {
                        oExchangeOfferJobRow.CancelNote = "";
                    }

                    if (reader["CancelDate"] != DBNull.Value)
                    {
                        oExchangeOfferJobRow.CancelDate = Convert.ToDateTime(reader["CancelDate"]);
                    }
                    oExchangeOfferJobRow.CreateUserID = (int)reader["CreateUserID"];
                    oExchangeOfferJobRow.CreateDate = Convert.ToDateTime(reader["CreateDate"]);
                    oExchangeOfferJobRow.Status = (int)reader["Status"];
                    oExchangeOfferJobRow.Terminal = (int)reader["Terminal"];
                    oExchangeOfferJobRow.HappyCallStatus = (int)reader["HappyCallStatus"];



                    oDSExchangeOfferJob.ExchangeOfferJob.AddExchangeOfferJobRow(oExchangeOfferJobRow);
                    oDSExchangeOfferJob.AcceptChanges();

                    ExchangeOfferJob oExchangeOfferJob = new ExchangeOfferJob();
                    oExchangeOfferJob.GetExchengedItem(oExchangeOfferJobRow.JobID);

                    foreach (ExchangeOfferJobDetail oOITD in oExchangeOfferJob)
                    {

                        DSExchangeOfferJob.ExchangeOfferJobDetailRow oExchangeOfferJobDetailRow = oDSExchangeOfferJobDetail.ExchangeOfferJobDetail.NewExchangeOfferJobDetailRow();

                        oExchangeOfferJobDetailRow.JobID = oOITD.JobID;
                        oExchangeOfferJobDetailRow.ProductDetail = oOITD.ProductDetail;
                        oExchangeOfferJobDetailRow.ProductType = oOITD.ProductType;
                        oExchangeOfferJobDetailRow.Quantity = oOITD.Quantity;
                        oExchangeOfferJobDetailRow.ProductSize = oOITD.ProductSize;
                        oExchangeOfferJobDetailRow.BrandName = oOITD.BrandName;
                        oExchangeOfferJobDetailRow.HaveRemortCtrl = oOITD.HaveRemortCtrl;
                        oExchangeOfferJobDetailRow.Condition = oOITD.Condition;

                        oDSExchangeOfferJobDetail.ExchangeOfferJobDetail.AddExchangeOfferJobDetailRow(oExchangeOfferJobDetailRow);
                        oDSExchangeOfferJobDetail.AcceptChanges();
                    }
                }
                oDSExchangeOfferJob.Merge(oDSExchangeOfferJobDetail);
                oDSExchangeOfferJob.AcceptChanges();
                reader.Close();

                AppLogger.LogInfo("Successfully Get Exchange Offer Job Detail");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Exchange Offer Job Detail/" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSExchangeOfferJob;
        }



        public DSExchangeOfferMR GetExchangeOfferMRData(DSExchangeOfferMR oDSExchangeOfferMR, int nWarehouseID)
        {
            oDSExchangeOfferMR = new DSExchangeOfferMR();
            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }

                OleDbCommand cmd = DBController.Instance.GetCommand();

                cmd.CommandText = "Select MoneyReceiptID,MoneyReceiptNo,JobID,CreateWHID,TransferWHID, " +
                                " RedeemWHID,Amount,Remarks,CreateUserID,a.CreateDate,TransferUserID, " +
                                " TransferDate,UpdateUserID,a.UpdateDate,Status=Case when TransferType=2 then 0  " +
                                " else 1 end from t_ExchangeOfferMR a  " +
                                " inner join t_DataTransfer b on b.DataID=a.MoneyReceiptID " +
                                " where b.TableName='t_ExchangeOfferMR'  " +
                                " and b.IsDownload=1 and b.WarehouseID= " + nWarehouseID + "";


                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSExchangeOfferMR.ExchangeOfferMRRow oExchangeOfferMRRow = oDSExchangeOfferMR.ExchangeOfferMR.NewExchangeOfferMRRow();

                    oExchangeOfferMRRow.MoneyReceiptID = (int)reader["MoneyReceiptID"];
                    oExchangeOfferMRRow.MoneyReceiptNo = (string)reader["MoneyReceiptNo"];
                    oExchangeOfferMRRow.JobID = (int)reader["JobID"];
                    oExchangeOfferMRRow.CreateWHID = (int)reader["CreateWHID"];
                    if (reader["TransferWHID"] != DBNull.Value)
                        oExchangeOfferMRRow.TransferWHID = (int)reader["TransferWHID"];
                    else oExchangeOfferMRRow.TransferWHID = -1;
                    if (reader["RedeemWHID"] != DBNull.Value)
                        oExchangeOfferMRRow.RedeemWHID = (int)reader["RedeemWHID"];
                    else oExchangeOfferMRRow.RedeemWHID = -1;
                    oExchangeOfferMRRow.Amount = Convert.ToDouble(reader["Amount"].ToString());
                    if (reader["Remarks"] != DBNull.Value)
                        oExchangeOfferMRRow.Remarks = (string)reader["Remarks"];
                    else oExchangeOfferMRRow.Remarks = "";
                    oExchangeOfferMRRow.CreateUserID = (int)reader["CreateUserID"];
                    oExchangeOfferMRRow.CreateDate = Convert.ToDateTime(reader["CreateDate"].ToString());
                    if (reader["TransferUserID"] != DBNull.Value)
                        oExchangeOfferMRRow.TransferUserID = (int)reader["TransferUserID"];
                    else oExchangeOfferMRRow.TransferUserID = -1;
                    if (reader["TransferDate"] != DBNull.Value)
                        oExchangeOfferMRRow.TransferDate = Convert.ToDateTime(reader["TransferDate"].ToString());
                    else oExchangeOfferMRRow.TransferDate = DateTime.Now.Date;
                    if (reader["UpdateUserID"] != DBNull.Value)
                        oExchangeOfferMRRow.UpdateUserID = (int)reader["UpdateUserID"];
                    else oExchangeOfferMRRow.UpdateUserID = -1;
                    if (reader["UpdateDate"] != DBNull.Value)
                        oExchangeOfferMRRow.UpdateDate = Convert.ToDateTime(reader["UpdateDate"].ToString());
                    else oExchangeOfferMRRow.UpdateDate = DateTime.Now.Date;
                    oExchangeOfferMRRow.Status = (int)reader["Status"];

                    oDSExchangeOfferMR.ExchangeOfferMR.AddExchangeOfferMRRow(oExchangeOfferMRRow);
                    oDSExchangeOfferMR.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Exchange Offer MR");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Exchange Offer MR /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSExchangeOfferMR;
        }


        public DSBasicData GETBENo(DSBasicData oDSBasicData, string sProductSerialNo)
        {
            oDSBasicData = new DSBasicData();
            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }

                OleDbCommand cmd = DBController.Instance.GetCommand();

                cmd.CommandText = "Select isnull(BENo,'') BENo,BEDate From t_ProductBarCodeDetail where Barcode in (" + sProductSerialNo + ")";


                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSBasicData.BillofEntryNoRow oBillofEntryNoRow = oDSBasicData.BillofEntryNo.NewBillofEntryNoRow();

                    oBillofEntryNoRow.BENo = (string)reader["BENo"];

                    if (reader["BEDate"] != DBNull.Value)
                    {
                        oBillofEntryNoRow.BEDate = Convert.ToDateTime(reader["BEDate"]).ToString("dd-MMM-yyyy");
                    }
                    else
                    {
                        oBillofEntryNoRow.BEDate = "";
                    }


                    oDSBasicData.BillofEntryNo.AddBillofEntryNoRow(oBillofEntryNoRow);
                    oDSBasicData.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get BE#");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Get BE# /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSBasicData;
        }


        /// <summary>
        /// Get Office Item
        /// </summary>
        /// <param name="oDSProductDetail"></param>
        /// <returns></returns>
        /// 
        public DSOfficeItemTran GetDSOfficeItemTran(DSOfficeItemTran oDSOfficeItemTran, int nWarehouseID)
        {
            oDSOfficeItemTran = new DSOfficeItemTran();
            DSOfficeItemTran oDSOfficeItemTranDetail = new DSOfficeItemTran();
            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }
                OleDbCommand cmd = DBController.Instance.GetCommand();

                cmd.CommandText = "Select TranID,a.WarehouseID,TranNo,TranDate, " +
                                "CreateUserID,TranTypeID,CompanyID,DepartmentID, " +
                                "isnull(EmployeeID, -1) EmployeeID,isnull(Remarks, '') Remarks, " +
                                "isnull(Terminal, 2) Terminal,Status,isnull(ApprovedDate, getdate()) ApprovedDate, " +
                                "isnull(AuthorizeUserID, -1) AuthorizeUserID " +
                                "from t_OfficeItemTran a, t_DataTransfer b " +
                                "where a.TranID = b.DataID and TableName = 't_OfficeItemTran' " +
                                "and IsDownload = 1 and a.WarehouseID=b.WarehouseID and b.WarehouseID = " + nWarehouseID + "";

                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSOfficeItemTran.OfficeItemTranRow oOfficeItemTranRow = oDSOfficeItemTran.OfficeItemTran.NewOfficeItemTranRow();

                    oOfficeItemTranRow.TranID = (int)reader["TranID"];
                    oOfficeItemTranRow.TranNo = (string)reader["TranNo"];
                    oOfficeItemTranRow.TranDate = Convert.ToDateTime(reader["TranDate"]);
                    oOfficeItemTranRow.WarehouseID = (int)reader["WarehouseID"];
                    oOfficeItemTranRow.CreateUserID = (int)reader["CreateUserID"];
                    oOfficeItemTranRow.TranTypeID = (int)reader["TranTypeID"];
                    oOfficeItemTranRow.CompanyID = (int)reader["CompanyID"];
                    oOfficeItemTranRow.DepartmentID = (int)reader["DepartmentID"];
                    oOfficeItemTranRow.EmployeeID = (int)reader["EmployeeID"];
                    oOfficeItemTranRow.Remarks = (string)reader["Remarks"];
                    oOfficeItemTranRow.Terminal = (int)reader["Terminal"];
                    oOfficeItemTranRow.Status = (int)reader["Status"];
                    oOfficeItemTranRow.ApprovedDate = Convert.ToDateTime(reader["ApprovedDate"]);
                    oOfficeItemTranRow.AuthorizeUserID = (int)reader["AuthorizeUserID"];

                    oDSOfficeItemTran.OfficeItemTran.AddOfficeItemTranRow(oOfficeItemTranRow);
                    oDSOfficeItemTran.AcceptChanges();

                    OfficeItemTran oOfficeItemTran = new OfficeItemTran();
                    oOfficeItemTran.GetOfficeItemDetail(oOfficeItemTranRow.TranID, oOfficeItemTranRow.WarehouseID);

                    foreach (OfficeItemTranDetail oOITD in oOfficeItemTran)
                    {

                        DSOfficeItemTran.OfficeItemTranDetailRow oOfficeItemTranDetailRow = oDSOfficeItemTranDetail.OfficeItemTranDetail.NewOfficeItemTranDetailRow();

                        oOfficeItemTranDetailRow.TranID = oOITD.TranID;
                        oOfficeItemTranDetailRow.WarehouseID = oOITD.WarehouseID;
                        oOfficeItemTranDetailRow.ID = oOITD.ID;
                        oOfficeItemTranDetailRow.RequisitionQty = oOITD.RequisitionQty;
                        oOfficeItemTranDetailRow.AuthorizeQty = oOITD.AuthorizeQty;

                        oDSOfficeItemTranDetail.OfficeItemTranDetail.AddOfficeItemTranDetailRow(oOfficeItemTranDetailRow);
                        oDSOfficeItemTranDetail.AcceptChanges();
                    }
                }
                oDSOfficeItemTran.Merge(oDSOfficeItemTranDetail);
                oDSOfficeItemTran.AcceptChanges();
                reader.Close();
                AppLogger.LogInfo("Successfully Get Office Item & Detail");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Office Item & Detail/" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSOfficeItemTran;
        }


        public DSPosCustomerHostory GetPosCustomerHistory(DSPosCustomerHostory oDSPosCustomerHostory, string sMobileNo)
        {
            oDSPosCustomerHostory = new DSPosCustomerHostory();
            DSPosCustomerHostory oDSPosCustomerHostoryDetail = new DSPosCustomerHostory();
            try
            {
                DBController.Instance.OpenNewConnection();
                OleDbCommand cmd = DBController.Instance.GetCommand();
                cmd.CommandText =
                    "Select ConsumerID,isnull(ConsumerCode,'') ConsumerCode,isnull(ConsumerName,'') ConsumerName, " +
                    "isnull(Address, '') Address,isnull(MobileNo, '') MobileNo,isnull(PhoneNo, '') PhoneNo, " +
                    "isnull(Email, '') Email,isnull(AlternativeCellNo, '') AlternativeCellNo,isnull(IsVerifiedEmail,0) IsVerifiedEmail From TELSysDB.DBO.t_ConsumerDetail where ConsumerID = ( " +
                    "Select max(ConsumerID) as ConsumerID From TELSysDB.DBO.t_ConsumerDetail " +
                    "where MobileNo = '" + sMobileNo + "' or AlternativeCellNo = '" + sMobileNo + "')";


                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSPosCustomerHostory.ConsumerInfoRow oConsumerInfoRow =
                        oDSPosCustomerHostory.ConsumerInfo.NewConsumerInfoRow();


                    oConsumerInfoRow.ConsumerID = (int)reader["ConsumerID"];
                    oConsumerInfoRow.ConsumerCode = (string)reader["ConsumerCode"];
                    oConsumerInfoRow.ConsumerName = (string)reader["ConsumerName"];
                    oConsumerInfoRow.Address = (string)reader["Address"];
                    oConsumerInfoRow.MobileNo = (string)reader["MobileNo"];
                    oConsumerInfoRow.PhoneNo = (string)reader["PhoneNo"];
                    oConsumerInfoRow.Email = (string)reader["Email"];
                    oConsumerInfoRow.AlternativeCellNo = (string)reader["AlternativeCellNo"];
                    oConsumerInfoRow.IsVerifiedEmail = (int)reader["IsVerifiedEmail"];

                    oDSPosCustomerHostory.ConsumerInfo.AddConsumerInfoRow(oConsumerInfoRow);
                    oDSPosCustomerHostory.AcceptChanges();


                    Customers oConsumerDetails = new Customers();
                    oConsumerDetails.GetConsumerHistory(oConsumerInfoRow.ConsumerID);
                    foreach (Customer oCustomer in oConsumerDetails)
                    {

                        DSPosCustomerHostory.ConsumerTranRow oConsumerTranRow = oDSPosCustomerHostoryDetail.ConsumerTran.NewConsumerTranRow();

                        oConsumerTranRow.ConsumerID = oCustomer.CustomerID;
                        oConsumerTranRow.Company = oCustomer.Company;
                        oConsumerTranRow.System = oCustomer.System;
                        oConsumerTranRow.TranType = oCustomer.TranType;
                        oConsumerTranRow.WHCode = oCustomer.ShowroomCode;
                        oConsumerTranRow.SalesType = oCustomer.SalesType;
                        oConsumerTranRow.TranNo = oCustomer.TranNo;
                        oConsumerTranRow.TranDate = oCustomer.TranDate;
                        oConsumerTranRow.ProductCode = oCustomer.ProductCode;
                        oConsumerTranRow.ProductName = oCustomer.ProductName;
                        oConsumerTranRow.Qty = oCustomer.Qty;
                        oConsumerTranRow.Amount = oCustomer.Amount;

                        oConsumerTranRow.ConsumerName = oCustomer.CustomerName;
                        oConsumerTranRow.Address = oCustomer.CustomerAddress;
                        oConsumerTranRow.MobileNo = oCustomer.MobileNo;
                        oConsumerTranRow.PhoneNo = oCustomer.CustomerTelephone;
                        oConsumerTranRow.Email = oCustomer.EmailAddress;
                        oConsumerTranRow.IsVerifiedEmail = oCustomer.IsVerifiedEmail;

                        oDSPosCustomerHostoryDetail.ConsumerTran.AddConsumerTranRow(oConsumerTranRow);
                        oDSPosCustomerHostoryDetail.AcceptChanges();
                    }
                }

                oDSPosCustomerHostory.Merge(oDSPosCustomerHostoryDetail);
                oDSPosCustomerHostory.AcceptChanges();
                reader.Close();

                AppLogger.LogInfo("Successfully Get Customer History");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Customer History/" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSPosCustomerHostory;
        }



        public void InsertCustomerBalanceData(int nCustomerID, int nWarehouseID,string sTableName,DateTime dtOperationDate)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            try
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();
                if (sTableName == "t_CustomerAccount")
                {
                    sSql = "insert into t_DataTransfer " +
                        "Select 't_CustomerAccount',CustomerID," + nWarehouseID + ",1,1,0,GETDATE(),NULL,NULL From t_CustomerAccount where CustomerID=" + nCustomerID + "  " +
                        "and CustomerID not in (Select DataID From t_DataTransfer where TableName='t_CustomerAccount' and IsDownload=1 and WarehouseID=" + nWarehouseID + " and DataID=" + nCustomerID + ")";
                }
                else if (sTableName == "t_CustomerBankGuaranty")
                {
                    sSql = "insert into t_DataTransfer "+
                        "Select 't_CustomerBankGuaranty',BGID," + nWarehouseID + ",1,1,0,GETDATE(),NULL,NULL From t_CustomerBankGuaranty where CustomerID=" + nCustomerID + " and IsActive=1";
                }
                else if (sTableName == "t_CustomerCreditLimit")
                {
                    sSql = "insert into t_DataTransfer " +
                        "Select 't_CustomerCreditLimit',CreditLimitID," + nWarehouseID + ",1,1,0,GETDATE(),NULL,NULL  " +
                        "From t_CustomerCreditLimit where CreditLimitID = (  " +
                        "Select max(CreditLimitID) CreditLimitID From  " +
                        "(  " +
                        "select CreditLimitID, CustomerID, DATEADD(dd, 0, DATEDIFF(dd, 0, EffectiveDate)) EffectiveDate,    " +
                        "DATEADD(dd, 0, DATEDIFF(dd, 0, ExpiryDate)) ExpiryDate, MaxCreditLimit from t_CustomerCreditLimit  " +
                        ") a where Customerid = " + nCustomerID + " and EffectiveDate <= '" + dtOperationDate + "'  " +
                        "and ExpiryDate >= '" + dtOperationDate + "') ";
                }
                cmd.CommandText = sSql;
                cmd.CommandType = CommandType.Text;
                cmd.ExecuteNonQuery();
                cmd.Dispose();

                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }


        public DSCustomer GetCustomerBalanceDataWithLocalBalance(DSCustomer oDSCustomer, int nCustomerID, int nWarehouseID, DateTime dtOperationDate, double _LocalBalance, double _LocalBGAmount, double _LocalCreditLimit)
        {
            oDSCustomer = new DSCustomer();
            try
            {
                DBController.Instance.OpenNewConnection();
                OleDbCommand cmd = DBController.Instance.GetCommand();
                cmd.CommandText = "Select a.CustomerID,CustomerCode,CustomerName," + nWarehouseID + " as WarehouseID,'' as ShowroomCode,isnull(c.CurrentBalance,0) CurrentBalance, " +
                                "isnull(d.BGAmount, 0) BGAmount,isnull(e.MaxCreditLimit, 0) MaxCreditLimit From t_Customer a " +
                                "left outer join t_CustomerAccount c on a.CustomerID = c.CustomerID " +
                                "left outer join " +
                                "(Select CustomerID, sum(BGAmount) As BGAmount " +
                                "From t_CustomerBankGuaranty where EffectiveDate <= '" + dtOperationDate + "' and ExpiryDate >= '" + dtOperationDate + "' and IsActive = 1 " +
                                "group by CustomerID) d on a.CustomerID = d.CustomerID " +
                                "left outer join " +
                                "(Select CustomerID, isnull(sum(MaxCreditLimit), 0) MaxCreditLimit " +
                                "From t_CustomerCreditLimit where EffectiveDate <= '" + dtOperationDate + "' and ExpiryDate >= '" + dtOperationDate + "' " +
                                "group by CustomerID) e on a.CustomerID = e.CustomerID " +
                                "where a.CustomerID=" + nCustomerID + "";


                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSCustomer.CustomerRow oCustomerRow =
                        oDSCustomer.Customer.NewCustomerRow();

                    oCustomerRow.CustomerID = (int)reader["CustomerID"];
                    oCustomerRow.CustomerCode = (string)reader["CustomerCode"];
                    oCustomerRow.CustomerName = (string)reader["CustomerName"];
                    oCustomerRow.CurrentBalance = (double)reader["CurrentBalance"];
                    oCustomerRow.BGAmount = (double)reader["BGAmount"];
                    oCustomerRow.CreditLimit = (double)reader["MaxCreditLimit"];

                    if (oCustomerRow.CurrentBalance != _LocalBalance)
                    {
                        InsertCustomerBalanceData(nCustomerID, nWarehouseID, "t_CustomerAccount", dtOperationDate);
                    }
                    if (oCustomerRow.BGAmount != _LocalBGAmount)
                    {
                        InsertCustomerBalanceData(nCustomerID, nWarehouseID, "t_CustomerBankGuaranty", dtOperationDate);
                    }
                    if (oCustomerRow.CreditLimit != _LocalCreditLimit)
                    {
                        InsertCustomerBalanceData(nCustomerID, nWarehouseID, "t_CustomerCreditLimit", dtOperationDate);
                    }

                    oDSCustomer.Customer.AddCustomerRow(oCustomerRow);
                    oDSCustomer.AcceptChanges();

                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Customer Balance Data");
            }

            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Customer Balance Data/" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSCustomer;
        }



        public DSCustomer GetCustomerBalanceData(DSCustomer oDSCustomer,int nCustomerID,int nWarehouseID, DateTime dtOperationDate)
        {
            oDSCustomer = new DSCustomer();

            try
            {
                DBController.Instance.OpenNewConnection();
                OleDbCommand cmd = DBController.Instance.GetCommand();
                cmd.CommandText = "Select a.CustomerID,CustomerCode,CustomerName,"+ nWarehouseID + " as WarehouseID,'' as ShowroomCode,isnull(c.CurrentBalance,0) CurrentBalance, " +
                                "isnull(d.BGAmount, 0) BGAmount,isnull(e.MaxCreditLimit, 0) MaxCreditLimit From t_Customer a " +
                                //"inner join t_Showroom b on a.ParentCustomerID = b.CustomerID " +
                                "left outer join t_CustomerAccount c on a.CustomerID = c.CustomerID " +
                                "left outer join " +
                                "(Select CustomerID, sum(BGAmount) As BGAmount " +
                                "From t_CustomerBankGuaranty where EffectiveDate <= '" + dtOperationDate + "' and ExpiryDate >= '" + dtOperationDate + "' and IsActive = 1 " +
                                "group by CustomerID) d on a.CustomerID = d.CustomerID " +
                                "left outer join " +
                                "(Select CustomerID, isnull(sum(MaxCreditLimit), 0) MaxCreditLimit " +
                                "From t_CustomerCreditLimit where EffectiveDate <= '" + dtOperationDate + "' and ExpiryDate >= '" + dtOperationDate + "' " +
                                "group by CustomerID) e on a.CustomerID = e.CustomerID " +
                                //"where b.WarehouseID = " + nWarehouseID + " and a.CustomerID=" + nCustomerID + "";
                                "where a.CustomerID=" + nCustomerID + "";


                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSCustomer.CustomerRow oCustomerRow =
                        oDSCustomer.Customer.NewCustomerRow();

                    oCustomerRow.CustomerID = (int)reader["CustomerID"];
                    oCustomerRow.CustomerCode = (string)reader["CustomerCode"];
                    oCustomerRow.CustomerName = (string)reader["CustomerName"];
                    oCustomerRow.CurrentBalance = (double)reader["CurrentBalance"];
                    oCustomerRow.BGAmount = (double)reader["BGAmount"];
                    oCustomerRow.CreditLimit = (double)reader["MaxCreditLimit"];

                    oDSCustomer.Customer.AddCustomerRow(oCustomerRow);
                    oDSCustomer.AcceptChanges();
                    
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Customer Balance Data");
            }

            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Customer Balance Data/" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSCustomer;
        }


        public DSBasicData GetTDDeliveryShipment(DSBasicData oDSDeliveryShipment, int nWarehouseID)
        {
            oDSDeliveryShipment = new DSBasicData();
            DSBasicData oDSDeliveryShipmentDetail = new DSBasicData();

            if (!DBController.Instance.CheckConnection())
            {
                DBController.Instance.OpenNewConnection();
            }

            OleDbCommand cmd = DBController.Instance.GetCommand();

            string sSql = "Select * From t_Datatransfer a,t_TDDeliveryShipment b  " +
                        "where a.DataID=b.ShipmentID and a.WarehouseID=b.WHID   " +
                        "and IsDownload=1 and TableName='t_TDDeliveryShipment' and WarehouseID= " + nWarehouseID + "";
            try
            {
                cmd.CommandText = sSql;
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSBasicData.TDDeliveryShipmentRow oTDDeliveryShipmentRow = oDSDeliveryShipment.TDDeliveryShipment.NewTDDeliveryShipmentRow();

                    oTDDeliveryShipmentRow.ShipmentID = int.Parse(reader["ShipmentID"].ToString());
                    oTDDeliveryShipmentRow.WHID = int.Parse(reader["WHID"].ToString());
                    oTDDeliveryShipmentRow.InvoiceNo = reader["InvoiceNo"].ToString();
                    if (reader["Remarks"] != DBNull.Value)
                    {
                        oTDDeliveryShipmentRow.Remarks = reader["Remarks"].ToString();
                    }
                    else
                    {
                        oTDDeliveryShipmentRow.Remarks = "";
                    }
                    oTDDeliveryShipmentRow.Status = int.Parse(reader["Status"].ToString());
                    oTDDeliveryShipmentRow.CreateDate = Convert.ToDateTime(reader["CreateDate"].ToString());
                    oTDDeliveryShipmentRow.CreateUserID = int.Parse(reader["CreateUserID"].ToString());

                    oDSDeliveryShipment.TDDeliveryShipment.AddTDDeliveryShipmentRow(oTDDeliveryShipmentRow);
                    oDSDeliveryShipment.AcceptChanges();

                    TDDeliveryShipment _oTDDeliveryShipment = new TDDeliveryShipment();
                    _oTDDeliveryShipment.ShipmentID = oTDDeliveryShipmentRow.ShipmentID;
                    _oTDDeliveryShipment.WHID = oTDDeliveryShipmentRow.WHID;
                    _oTDDeliveryShipment.RefreshDetail();

                    foreach (TDDeliveryShipmentItem oTDDeliveryShipmentItem in _oTDDeliveryShipment)
                    {
                        DSBasicData.TDDeliveryShipmentItemRow oTDDeliveryShipmentItemRow = oDSDeliveryShipmentDetail.TDDeliveryShipmentItem.NewTDDeliveryShipmentItemRow();
                        oTDDeliveryShipmentItemRow.ShipmentID = int.Parse(oTDDeliveryShipmentItem.ShipmentID.ToString());
                        oTDDeliveryShipmentItemRow.ProductID = int.Parse(oTDDeliveryShipmentItem.ProductID.ToString());
                        oTDDeliveryShipmentItemRow.UnitPrice = Convert.ToDouble(oTDDeliveryShipmentItem.UnitPrice.ToString());
                        oTDDeliveryShipmentItemRow.Qty = int.Parse(oTDDeliveryShipmentItem.Qty.ToString());
                        oTDDeliveryShipmentItemRow.ShipmentDate = Convert.ToDateTime(oTDDeliveryShipmentItem.ShipmentDate.ToString());
                        oTDDeliveryShipmentItemRow.ShipmentTime = Convert.ToDateTime(oTDDeliveryShipmentItem.ShipmentTime.ToString());
                        oTDDeliveryShipmentItemRow.ShipingAddress = oTDDeliveryShipmentItem.ShipingAddress.ToString();
                        oTDDeliveryShipmentItemRow.ContactNo = oTDDeliveryShipmentItem.ContactNo.ToString();
                        oTDDeliveryShipmentItemRow.InstallationRequired = oTDDeliveryShipmentItem.InstallationRequired.ToString();
                        oTDDeliveryShipmentItemRow.ExpInstallationDate = Convert.ToDateTime(oTDDeliveryShipmentItem.ExpInstallationDate.ToString());
                        oTDDeliveryShipmentItemRow.ExpInstallationTime = Convert.ToDateTime(oTDDeliveryShipmentItem.ExpInstallationTime.ToString());
                        oTDDeliveryShipmentItemRow.DeliveryMode = oTDDeliveryShipmentItem.DeliveryMode.ToString();
                        oTDDeliveryShipmentItemRow.VehicleNo = oTDDeliveryShipmentItem.VehicleNo.ToString();
                        oTDDeliveryShipmentItemRow.FreightCost = Convert.ToDouble(oTDDeliveryShipmentItem.FreightCost.ToString());
                        oTDDeliveryShipmentItemRow.HDCompletionDate = Convert.ToDateTime(oTDDeliveryShipmentItem.HDCompletionDate.ToString());
                        oTDDeliveryShipmentItemRow.HDCompletionTime = Convert.ToDateTime(oTDDeliveryShipmentItem.HDCompletionTime.ToString());
                        oTDDeliveryShipmentItemRow.IsSafelyDelivered = oTDDeliveryShipmentItem.IsSafelyDelivered.ToString();
                        oTDDeliveryShipmentItemRow.Reason = oTDDeliveryShipmentItem.Reason.ToString();
                        oTDDeliveryShipmentItemRow.ActionTaken = oTDDeliveryShipmentItem.ActionTaken.ToString();
                        oTDDeliveryShipmentItemRow.Remarks = oTDDeliveryShipmentItem.Remarks.ToString();
                        oTDDeliveryShipmentItemRow.JobNo = oTDDeliveryShipmentItem.JobNo.ToString();
                        if (oTDDeliveryShipmentItem.InstallationDate != null)
                        {
                            oTDDeliveryShipmentItemRow.InstallationDate = Convert.ToDateTime(oTDDeliveryShipmentItem.InstallationDate.ToString());
                        }
                        if (oTDDeliveryShipmentItem.InstallationTime != null)
                        {
                            oTDDeliveryShipmentItemRow.InstallationTime = Convert.ToDateTime(oTDDeliveryShipmentItem.InstallationTime.ToString());
                        }
                        oTDDeliveryShipmentItemRow.IsProperlyInstalled = oTDDeliveryShipmentItem.IsProperlyInstalled.ToString();
                        oTDDeliveryShipmentItemRow.CSDReason = oTDDeliveryShipmentItem.CSDReason.ToString();
                        oTDDeliveryShipmentItemRow.CSDRemarks = oTDDeliveryShipmentItem.CSDRemarks.ToString();
                        oTDDeliveryShipmentItemRow.WHID = nWarehouseID;

                        oTDDeliveryShipmentItemRow.LiftingCost = oTDDeliveryShipmentItem.LiftingCost;
                        oTDDeliveryShipmentItemRow.FloorNo = oTDDeliveryShipmentItem.FloorNo;
                        oTDDeliveryShipmentItemRow.DistanceKM = oTDDeliveryShipmentItem.DistanceKM;

                        oTDDeliveryShipmentItemRow.ApprovedFreightCost = oTDDeliveryShipmentItem.ApprovedFreightCost;
                        oTDDeliveryShipmentItemRow.ApprovedLiftingCost = oTDDeliveryShipmentItem.ApprovedLiftingCost;

                        oDSDeliveryShipmentDetail.TDDeliveryShipmentItem.AddTDDeliveryShipmentItemRow(oTDDeliveryShipmentItemRow);
                        oDSDeliveryShipmentDetail.AcceptChanges();
                    }

                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get TD Delivery Shipment");

                oDSDeliveryShipment.Merge(oDSDeliveryShipmentDetail);
                oDSDeliveryShipment.AcceptChanges();
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting TD Delivery Shipment /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSDeliveryShipment;
        }

        public DSPettyCash GetPettyCashExpense(DSPettyCash oDSPettyCash, int nWarehouseID)
        {
            oDSPettyCash = new DSPettyCash();
            DSPettyCash oDSPettyCashDetail = new DSPettyCash();

            if (!DBController.Instance.CheckConnection())
            {
                DBController.Instance.OpenNewConnection();
            }
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "Select b.* From t_Datatransfer a,t_PettyCashExpense b  " +
                        "where a.DataID=b.ID and a.WarehouseID=b.WarehouseID   " +
                        "and IsDownload=1 and TableName='t_PettyCashExpense' and a.WarehouseID= " + nWarehouseID + "";
            try
            {
                cmd.CommandText = sSql;
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSPettyCash.PettyCashExpenseRow oPettyCashExpenseRow = oDSPettyCash.PettyCashExpense.NewPettyCashExpenseRow();

                    oPettyCashExpenseRow.ID = int.Parse(reader["ID"].ToString());
                    oPettyCashExpenseRow.WarehouseID = int.Parse(reader["WarehouseID"].ToString());
                    oPettyCashExpenseRow.ExpanceCode = reader["ExpanceCode"].ToString();
                    if (reader["Remarks"] != DBNull.Value)
                    {
                        oPettyCashExpenseRow.Remarks = reader["Remarks"].ToString();
                    }
                    else
                    {
                        oPettyCashExpenseRow.Remarks = "";
                    }
                    oPettyCashExpenseRow.Status = int.Parse(reader["Status"].ToString());
                    oPettyCashExpenseRow.CreateDate = Convert.ToDateTime(reader["CreateDate"].ToString());
                    oPettyCashExpenseRow.CreateUserID = int.Parse(reader["CreateUserID"].ToString());
                    if (reader["UpdateDate"] != DBNull.Value)
                    {
                        oPettyCashExpenseRow.UpdateDate = Convert.ToDateTime(reader["UpdateDate"].ToString());
                    }
                    if (reader["UpdateUserID"] != DBNull.Value)
                    {
                        oPettyCashExpenseRow.UpdateUserID = Convert.ToInt32(reader["UpdateUserID"].ToString());
                    }
                    if (reader["ApproveDate"] != DBNull.Value)
                    {
                        oPettyCashExpenseRow.ApproveDate = Convert.ToDateTime(reader["ApproveDate"].ToString());
                    }
                    if (reader["ApproveUserID"] != DBNull.Value)
                    {
                        oPettyCashExpenseRow.ApproveUserID = Convert.ToInt32(reader["ApproveUserID"].ToString());
                    }
                    oDSPettyCash.PettyCashExpense.AddPettyCashExpenseRow(oPettyCashExpenseRow);
                    oDSPettyCash.AcceptChanges();

                    PettyCashExpense _oPettyCashExpense = new PettyCashExpense();
                    _oPettyCashExpense.GetItem(oPettyCashExpenseRow.ID, oPettyCashExpenseRow.WarehouseID);
                    foreach (PettyCashExpenseDetail oPettyCashExpenseDetail in _oPettyCashExpense)
                    {
                        DSPettyCash.PettyCashExpenseDetailRow oPettyCashExpenseDetailRow = oDSPettyCashDetail.PettyCashExpenseDetail.NewPettyCashExpenseDetailRow();
                        oPettyCashExpenseDetailRow.ID = int.Parse(oPettyCashExpenseDetail.ID.ToString());
                        oPettyCashExpenseDetailRow.ExpenseHeadID = int.Parse(oPettyCashExpenseDetail.ExpenseHeadID.ToString());
                        oPettyCashExpenseDetailRow.VoucherNo = oPettyCashExpenseDetail.VoucherNo.ToString();
                        oPettyCashExpenseDetailRow.Purpose = oPettyCashExpenseDetail.Purpose.ToString();
                        oPettyCashExpenseDetailRow.Amount = Convert.ToDouble(oPettyCashExpenseDetail.Amount.ToString());
                        oPettyCashExpenseDetailRow.ApprovedAmount = Convert.ToDouble(oPettyCashExpenseDetail.ApprovedAmount.ToString());
                        oPettyCashExpenseDetailRow.WarehouseID = nWarehouseID;

                        oDSPettyCashDetail.PettyCashExpenseDetail.AddPettyCashExpenseDetailRow(oPettyCashExpenseDetailRow);
                        oDSPettyCashDetail.AcceptChanges();
                    }

                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Petty Cash Expense");

                oDSPettyCash.Merge(oDSPettyCashDetail);
                oDSPettyCash.AcceptChanges();
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Petty Cash Expense /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSPettyCash;
        }
        public DSPromoExchangeOffer GetPromoExchangeOffer(DSPromoExchangeOffer oDSPromoExchangeOffer, int nWarehouseID)
        {
            oDSPromoExchangeOffer = new DSPromoExchangeOffer();
            DSPromoExchangeOffer oDSPromoExchangeOfferDetail = new DSPromoExchangeOffer();

            if (!DBController.Instance.CheckConnection())
            {
                DBController.Instance.OpenNewConnection();
            }
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "Select b.* From t_Datatransfer a,t_PromoExchangeOffers b  " +
                        "where a.DataID=b.OfferId " +
                        "and IsDownload=1 and TableName='t_PromoExchangeOffers' and WarehouseID='" + nWarehouseID + "'";
            try
            {
                cmd.CommandText = sSql;
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSPromoExchangeOffer.PromoExchangeOfferRow oPromoExchangeOfferRow = oDSPromoExchangeOffer.PromoExchangeOffer.NewPromoExchangeOfferRow();



                    oPromoExchangeOfferRow.OfferId = int.Parse(reader["OfferId"].ToString());
                    oPromoExchangeOfferRow.OfferCode = reader["OfferCode"].ToString();
                    oPromoExchangeOfferRow.FromDate = Convert.ToDateTime(reader["FromDate"].ToString());
                    oPromoExchangeOfferRow.Description = reader["Description"].ToString();
                    oPromoExchangeOfferRow.ToDate = Convert.ToDateTime(reader["ToDate"].ToString());
                    oPromoExchangeOfferRow.Status = int.Parse(reader["Status"].ToString());
                    oPromoExchangeOfferRow.IsActive = Convert.ToBoolean(reader["IsActive"].ToString());
                    oPromoExchangeOfferRow.CreateDate = Convert.ToDateTime(reader["CreateDate"].ToString());
                    oPromoExchangeOfferRow.CreateUserId = int.Parse(reader["CreateUserId"].ToString());

                    //oPromoExchangeOfferRow = Convert.ToDateTime(reader["CreateDate"].ToString());
                    //oPromoExchangeOfferRow.CreateUserId = int.Parse(reader["CreateUserId"].ToString());

                    oDSPromoExchangeOffer.PromoExchangeOffer.AddPromoExchangeOfferRow(oPromoExchangeOfferRow);
                    oDSPromoExchangeOffer.AcceptChanges();

                    CJ.Class.Promotion.ExchangeOffers _oExchangeOffers = new CJ.Class.Promotion.ExchangeOffers();
                    _oExchangeOffers.GetItemDetails(oPromoExchangeOfferRow.OfferId);
                    foreach (CJ.Class.Promotion.ExchangeOfferDetail oExchangeOfferDetail in _oExchangeOffers)
                    {
                        DSPromoExchangeOffer.PromoExchangeOfferDetailRow oPromoExchangeOfferDetailRow = oDSPromoExchangeOfferDetail.PromoExchangeOfferDetail.NewPromoExchangeOfferDetailRow();
                        oPromoExchangeOfferDetailRow.OfferId = oExchangeOfferDetail.OfferId;
                        oPromoExchangeOfferDetailRow.OfferDetailsId = oExchangeOfferDetail.OfferDetailsId;
                        oPromoExchangeOfferDetailRow.DataId = oExchangeOfferDetail.DataId;
                        oPromoExchangeOfferDetailRow.DataType = oExchangeOfferDetail.DataType;

                        oDSPromoExchangeOfferDetail.PromoExchangeOfferDetail.AddPromoExchangeOfferDetailRow(oPromoExchangeOfferDetailRow);
                        oDSPromoExchangeOfferDetail.AcceptChanges();
                    }

                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Exchange offers");

                oDSPromoExchangeOffer.Merge(oDSPromoExchangeOfferDetail);
                oDSPromoExchangeOffer.AcceptChanges();
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Exchange Offers /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSPromoExchangeOffer;
        }

        public DSPromoWarranty GetPromoWarranty(DSPromoWarranty oDSPromoWarranty, int nWarehouseID)
        {
            oDSPromoWarranty = new DSPromoWarranty();
            DSPromoWarranty oDSPromoWarrantyDetail = new DSPromoWarranty();

            if (!DBController.Instance.CheckConnection())
            {
                DBController.Instance.OpenNewConnection();
            }
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "Select b.* From t_Datatransfer a,t_PromoWarranty b  " +
                        "where a.DataID=b.WarrantyId " +
                        "and IsDownload=1 and TableName='t_PromoWarranty' and WarehouseID='" + nWarehouseID + "'";
            try
            {
                cmd.CommandText = sSql;
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSPromoWarranty.PromoWarrantyRow oPromoWarrantyRow = oDSPromoWarranty.PromoWarranty.NewPromoWarrantyRow();
                    oPromoWarrantyRow.WarrantyId = int.Parse(reader["WarrantyId"].ToString());
                    oPromoWarrantyRow.FromDate = Convert.ToDateTime(reader["FromDate"].ToString());
                    oPromoWarrantyRow.Description = reader["Description"].ToString();
                    oPromoWarrantyRow.ExtendedWarranty = reader["ExtendedWarranty"].ToString();
                    oPromoWarrantyRow.ToDate = Convert.ToDateTime(reader["ToDate"].ToString());
                    oPromoWarrantyRow.Status = int.Parse(reader["Status"].ToString());
                    oPromoWarrantyRow.IsActive = Convert.ToBoolean(reader["IsActive"].ToString());
                    oPromoWarrantyRow.CreateDate = Convert.ToDateTime(reader["CreateDate"].ToString());
                    oPromoWarrantyRow.CreateUserId = int.Parse(reader["CreateUserId"].ToString());
                    oDSPromoWarranty.PromoWarranty.AddPromoWarrantyRow(oPromoWarrantyRow);
                    oDSPromoWarranty.AcceptChanges();

                    PromoWarranty _oPromoWarranty = new PromoWarranty();
                     _oPromoWarranty.GetDetails(oPromoWarrantyRow.WarrantyId);
                    foreach (PromoWarrantyDetail oPromoWarrantyDetail in _oPromoWarranty)
                    {
                        DSPromoWarranty.PromoWarrntyDetailRow oPromoWarrntyDetailRow = oDSPromoWarrantyDetail.PromoWarrntyDetail.NewPromoWarrntyDetailRow();
                        oPromoWarrntyDetailRow.WarrantyId = oPromoWarrantyDetail.WarrantyId;
                        oPromoWarrntyDetailRow.WarrantyDetailId = oPromoWarrantyDetail.WarrantyDetailId;
                        oPromoWarrntyDetailRow.ProductId = oPromoWarrantyDetail.ProductId;
                        oDSPromoWarrantyDetail.PromoWarrntyDetail.AddPromoWarrntyDetailRow(oPromoWarrntyDetailRow);
                        oDSPromoWarrantyDetail.AcceptChanges();
                    }

                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Promo Warranty");



                oDSPromoWarranty.Merge(oDSPromoWarrantyDetail);
                oDSPromoWarranty.AcceptChanges();


            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Promo Warranty /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSPromoWarranty;
        }
        public DSSalesOrder GetDMSSalesOrder(DSSalesOrder oDSSalesOrder, int nWarehouseID)
        {
            oDSSalesOrder = new DSSalesOrder();
            DSSalesOrder oDSSalesOrderDetail = new DSSalesOrder();

            if (!DBController.Instance.CheckConnection())
            {
                DBController.Instance.OpenNewConnection();
            }

            OleDbCommand cmd = DBController.Instance.GetCommand();

            string sSql = "Select * From t_Datatransfer a,t_DMSSecondarySalesOrder b " +
                        "where a.DataID=b.OrderID and a.WarehouseID=b.WarehouseID " +
                        "and IsDownload=1 and TableName='t_DMSSecondarySalesOrder' and b.WarehouseID=" + nWarehouseID + "";
            try
            {
                cmd.CommandText = sSql;
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSSalesOrder.DMSSecondarySalesOrderRow oDMSSecondarySalesOrderRow = oDSSalesOrder.DMSSecondarySalesOrder.NewDMSSecondarySalesOrderRow();
                    oDMSSecondarySalesOrderRow.OrderID = int.Parse(reader["OrderID"].ToString());
                    oDMSSecondarySalesOrderRow.OrderNo = reader["OrderNo"].ToString();
                    oDMSSecondarySalesOrderRow.WarehouseID = int.Parse(reader["WarehouseID"].ToString());
                    oDMSSecondarySalesOrderRow.SalesType = int.Parse(reader["SalesType"].ToString());
                    oDMSSecondarySalesOrderRow.CustomerID = int.Parse(reader["CustomerID"].ToString());
                    oDMSSecondarySalesOrderRow.ParentCustomerID = int.Parse(reader["ParentCustomerID"].ToString());
                    oDMSSecondarySalesOrderRow.EDD = Convert.ToDateTime(reader["EDD"].ToString());
                    oDMSSecondarySalesOrderRow.OrderAmount = Convert.ToDouble(reader["OrderAmount"].ToString());
                    oDMSSecondarySalesOrderRow.Status = int.Parse(reader["Status"].ToString());
                    oDMSSecondarySalesOrderRow.CreateUserID = int.Parse(reader["CreateUserID"].ToString());
                    oDMSSecondarySalesOrderRow.CreateDate = Convert.ToDateTime(reader["CreateDate"].ToString());
                    if (reader["Remarks"] != DBNull.Value)
                    {
                        oDMSSecondarySalesOrderRow.RefInvoiceNo = reader["RefInvoiceNo"].ToString();
                    }
                    else
                    {
                        oDMSSecondarySalesOrderRow.RefInvoiceNo = "";
                    }
                    if (reader["RefInvoiceDate"] != DBNull.Value)
                    {
                        oDMSSecondarySalesOrderRow.RefInvoiceDate = Convert.ToDateTime(reader["RefInvoiceDate"].ToString());
                    }
                    if (reader["UpdateUserID"] != DBNull.Value)
                    {
                        oDMSSecondarySalesOrderRow.UpdateUserID = Convert.ToInt32(reader["UpdateUserID"].ToString());
                    }
                    if (reader["UpdateDate"] != DBNull.Value)
                    {
                        oDMSSecondarySalesOrderRow.UpdateDate = Convert.ToDateTime(reader["UpdateDate"].ToString());
                    }
                    if (reader["Remarks"] != DBNull.Value)
                    {
                        oDMSSecondarySalesOrderRow.Remarks = reader["Remarks"].ToString();
                    }
                    else
                    {
                        oDMSSecondarySalesOrderRow.Remarks = "";
                    }



                    if (reader["AuthorizedBy"] != DBNull.Value)
                    {
                        oDMSSecondarySalesOrderRow.AuthorizedBy = Convert.ToInt32(reader["AuthorizedBy"].ToString());
                    }
                    if (reader["AuthorizeDate"] != DBNull.Value)
                    {
                        oDMSSecondarySalesOrderRow.AuthorizeDate = Convert.ToDateTime(reader["AuthorizeDate"].ToString());
                    }
                    if (reader["AuthorizeRemarks"] != DBNull.Value)
                    {
                        oDMSSecondarySalesOrderRow.AuthorizeRemarks = reader["AuthorizeRemarks"].ToString();
                    }
                    else
                    {
                        oDMSSecondarySalesOrderRow.AuthorizeRemarks = "";
                    }
                    if (reader["OrderType"] != DBNull.Value)
                    {
                        oDMSSecondarySalesOrderRow.OrderType = reader["OrderType"].ToString();
                    }
                    else
                    {
                        oDMSSecondarySalesOrderRow.OrderType = "";
                    }


                    oDSSalesOrder.DMSSecondarySalesOrder.AddDMSSecondarySalesOrderRow(oDMSSecondarySalesOrderRow);
                    oDSSalesOrder.AcceptChanges();

                    DMSSecondarySalesOrder _oDMSSecondarySalesOrder = new DMSSecondarySalesOrder();
                    _oDMSSecondarySalesOrder.GetOrderItem(oDMSSecondarySalesOrderRow.OrderID, nWarehouseID);

                    foreach (DMSSecondarySalesOrderDetail oDMSSecondarySalesOrderDetail in _oDMSSecondarySalesOrder)
                    {
                        DSSalesOrder.DMSSecondarySalesOrderDetailRow oDMSSecondarySalesOrderDetailRow = oDSSalesOrderDetail.DMSSecondarySalesOrderDetail.NewDMSSecondarySalesOrderDetailRow();
                        oDMSSecondarySalesOrderDetailRow.OrderID = int.Parse(oDMSSecondarySalesOrderDetail.OrderID.ToString());
                        oDMSSecondarySalesOrderDetailRow.WarehouseID = int.Parse(oDMSSecondarySalesOrderDetail.WarehouseID.ToString());
                        oDMSSecondarySalesOrderDetailRow.ProductID = int.Parse(oDMSSecondarySalesOrderDetail.ProductID.ToString());
                        oDMSSecondarySalesOrderDetailRow.OrderQty = int.Parse(oDMSSecondarySalesOrderDetail.OrderQty.ToString());
                        oDMSSecondarySalesOrderDetailRow.ConfirmedQty = int.Parse(oDMSSecondarySalesOrderDetail.ConfirmedQty.ToString());
                        oDMSSecondarySalesOrderDetailRow.UnitPrice = Convert.ToDouble(oDMSSecondarySalesOrderDetail.UnitPrice.ToString());
                        oDSSalesOrderDetail.DMSSecondarySalesOrderDetail.AddDMSSecondarySalesOrderDetailRow(oDMSSecondarySalesOrderDetailRow);
                        oDSSalesOrderDetail.AcceptChanges();
                    }

                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get DMS Sales Order");

                oDSSalesOrder.Merge(oDSSalesOrderDetail);
                oDSSalesOrder.AcceptChanges();
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting DMS Sales Order /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSSalesOrder;
        }
        /// <summary>
        /// Get Custoemr Credit Approval
        /// </summary>
        /// <param name="oDSProductDetail"></param>
        /// <returns></returns>
        /// 
        public DSCustmerCreditApprval GetDSCustmerCreditApprval(DSCustmerCreditApprval oDSCustmerCreditApprval, int nWarehouseID)
        {
            oDSCustmerCreditApprval = new DSCustmerCreditApprval();
            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }

                OleDbCommand cmd = DBController.Instance.GetCommand();
                cmd.CommandText = " select * from t_CustomerCreditApproval a inner join t_DataTransfer b on b.DataID=a.ID  " +
                                  " where b.TableName='t_CustomerCreditApproval' and  " +
                                  " b.IsDownload=" + (int)Dictionary.IsDownload.No + " and a.WarehouseID= '" + nWarehouseID + "'  ";


                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSCustmerCreditApprval.CustomerCreditApprovalRow oCustomerCreditApprovalRow = oDSCustmerCreditApprval.CustomerCreditApproval.NewCustomerCreditApprovalRow();

                    oCustomerCreditApprovalRow.ID = (int)reader["ID"];
                    oCustomerCreditApprovalRow.CreditApprovalID = (int)reader["CreditApprovalID"];
                    oCustomerCreditApprovalRow.WarehouseID = (int)reader["WarehouseID"];
                    oCustomerCreditApprovalRow.CustomerID = (int)reader["CustomerID"];
                    oCustomerCreditApprovalRow.ApprovalNo = (string)reader["ApprovalNo"];
                    oCustomerCreditApprovalRow.ProductOrService = (string)reader["ProductOrService"];
                    oCustomerCreditApprovalRow.CreditPeriod = (int)reader["CreditPeriod"];
                    oCustomerCreditApprovalRow.CreditAmount = Convert.ToDouble(reader["CreditAmount"].ToString());
                    oCustomerCreditApprovalRow.InvoicedAmount = Convert.ToDouble(reader["InvoicedAmount"].ToString());
                    oCustomerCreditApprovalRow.CollectedAmount = Convert.ToDouble(reader["CollectedAmount"].ToString());
                    if (reader["Remarks"] != DBNull.Value)
                    {
                        oCustomerCreditApprovalRow.Remarks = (string)reader["Remarks"];
                    }
                    else
                    {
                        oCustomerCreditApprovalRow.Remarks = "";
                    }
                    oCustomerCreditApprovalRow.CreateDate = Convert.ToDateTime(reader["CreateDate"].ToString());


                    if (reader["ConsumerID"] != DBNull.Value)
                    {
                        oCustomerCreditApprovalRow.ConsumerID = Convert.ToInt32(reader["ConsumerID"].ToString());
                    }
                    else
                    {
                        oCustomerCreditApprovalRow.ConsumerID = 0;
                    }

                    if (reader["SalesType"] != DBNull.Value)
                    {
                        oCustomerCreditApprovalRow.SalesType = Convert.ToInt32(reader["SalesType"].ToString());
                    }
                    else
                    {
                        oCustomerCreditApprovalRow.SalesType = 0;
                    }


                    oDSCustmerCreditApprval.CustomerCreditApproval.AddCustomerCreditApprovalRow(oCustomerCreditApprovalRow);
                    oDSCustmerCreditApprval.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Customer Credit Approval");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Customer Credit Approval /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSCustmerCreditApprval;
        }


        /// <summary>
        /// Get Office Item
        /// </summary>
        /// <param name="oDSProductDetail"></param>
        /// <returns></returns>
        /// 
        public DSCalendarWeek GetCalendarWeek(DSCalendarWeek oDSCalendarWeek, int nWarehouseID)
        {
            oDSCalendarWeek = new DSCalendarWeek();
            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }

                OleDbCommand cmd = DBController.Instance.GetCommand();
                cmd.CommandText = " select * from t_CalendarWeek a inner join t_DataTransfer b on b.DataID=a.CalendarID  " +
                                  " where b.TableName='t_CalendarWeek' and  " +
                                  " b.IsDownload=1 and WarehouseID= '" + nWarehouseID + "'  ";


                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSCalendarWeek.CalendarWeekRow oCalendarWeekRow = oDSCalendarWeek.CalendarWeek.NewCalendarWeekRow();

                    oCalendarWeekRow.ID = (int)reader["ID"];
                    oCalendarWeekRow.CalendarID = (int)reader["CalendarID"];
                    oCalendarWeekRow.CYear = (int)reader["CYear"];
                    oCalendarWeekRow.CMonth = (int)reader["CMonth"];
                    oCalendarWeekRow.WeekNo = (int)reader["WeekNo"];
                    oCalendarWeekRow.FromDate = Convert.ToDateTime(reader["FromDate"].ToString());
                    oCalendarWeekRow.ToDate = Convert.ToDateTime(reader["ToDate"].ToString());

                    oDSCalendarWeek.CalendarWeek.AddCalendarWeekRow(oCalendarWeekRow);
                    oDSCalendarWeek.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get CalendarWeek");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting CalendarWeek /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSCalendarWeek;
        }


        /// <summary>
        /// Get Office Item
        /// </summary>
        /// <param name="oDSProductDetail"></param>
        /// <returns></returns>
        /// 
        public DSPlanCustomerTarget GetPlanCustomerTarget(DSPlanCustomerTarget oDSPlanCustomerTarget, int nWarehouseID)
        {
            oDSPlanCustomerTarget = new DSPlanCustomerTarget();
            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }

                OleDbCommand cmd = DBController.Instance.GetCommand();
                cmd.CommandText = " select * from t_PlanCustomerTarget a inner join t_DataTransfer b on b.DataID=a.VersionNo  " +
                                  " where b.TableName='t_PlanCustomerTarget' and  " +
                                  " b.IsDownload=1 and WarehouseID= '" + nWarehouseID + "' and CustomerID in (Select CustomerID From t_Showroom where WarehouseID='" + nWarehouseID + "')  ";


                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSPlanCustomerTarget.PlanCustomerTargetRow oPlanCustomerTargetRow = oDSPlanCustomerTarget.PlanCustomerTarget.NewPlanCustomerTargetRow();

                    oPlanCustomerTargetRow.VersionNo = (int)reader["VersionNo"];
                    oPlanCustomerTargetRow.TYear = (int)reader["TYear"];
                    oPlanCustomerTargetRow.TMonth = (int)reader["TMonth"];
                    oPlanCustomerTargetRow.WeekNo = (int)reader["WeekNo"];
                    oPlanCustomerTargetRow.CustomerID = (int)reader["CustomerID"];
                    oPlanCustomerTargetRow.OldCustomer = (int)reader["OldCustomer"];
                    oPlanCustomerTargetRow.NewCustomer = (int)reader["NewCustomer"];

                    oDSPlanCustomerTarget.PlanCustomerTarget.AddPlanCustomerTargetRow(oPlanCustomerTargetRow);
                    oDSPlanCustomerTarget.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Plan Customer Target");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Plan Customer Target /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSPlanCustomerTarget;
        }

        /// <summary>
        /// Get Office Item
        /// </summary>
        /// <param name="oDSProductDetail"></param>
        /// <returns></returns>
        /// 
        public DSPlanExecutiveWeekTarget GetPlanExecutiveWeekTarget(DSPlanExecutiveWeekTarget oDSPlanExecutiveWeekTarget, int nWarehouseID)
        {
            oDSPlanExecutiveWeekTarget = new DSPlanExecutiveWeekTarget();
            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }

                OleDbCommand cmd = DBController.Instance.GetCommand();
                cmd.CommandText = " select * from t_PlanExecutiveWeekTarget a inner join t_DataTransfer b on b.DataID=a.VersionNo  " +
                                  " where b.TableName='t_PlanExecutiveWeekTarget' and  " +
                                  " b.IsDownload=1 and WarehouseID= '" + nWarehouseID + "' and CustomerID in (Select CustomerID From t_Showroom where WarehouseID='" + nWarehouseID + "')  ";


                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSPlanExecutiveWeekTarget.PlanExecutiveWeekTargetRow oPlanExecutiveWeekTargetRow = oDSPlanExecutiveWeekTarget.PlanExecutiveWeekTarget.NewPlanExecutiveWeekTargetRow();

                    oPlanExecutiveWeekTargetRow.VersionNo = (int)reader["VersionNo"];
                    oPlanExecutiveWeekTargetRow.TYear = (int)reader["TYear"];
                    oPlanExecutiveWeekTargetRow.TMonth = (int)reader["TMonth"];
                    oPlanExecutiveWeekTargetRow.WeekNo = (int)reader["WeekNo"];
                    oPlanExecutiveWeekTargetRow.CustomerID = (int)reader["CustomerID"];
                    oPlanExecutiveWeekTargetRow.SalesPersonID = (int)reader["SalesPersonID"];
                    oPlanExecutiveWeekTargetRow.Category = (string)reader["Category"];
                    oPlanExecutiveWeekTargetRow.TargetAmount = (double)reader["TargetAmount"];

                    oDSPlanExecutiveWeekTarget.PlanExecutiveWeekTarget.AddPlanExecutiveWeekTargetRow(oPlanExecutiveWeekTargetRow);
                    oDSPlanExecutiveWeekTarget.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Plan Executive Week Target");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Plan Executive Week Target /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSPlanExecutiveWeekTarget;
        }

        /// <summary>
        /// DSPlanExecutiveLeadTarget
        /// </summary>
        /// <param name="oDSProductDetail"></param>
        /// <returns></returns>
        /// 
        public DSPlanExecutiveWeekTarget GetPlanExecutiveLeadTarget(DSPlanExecutiveWeekTarget oDSPlanExecutiveLeadTarget, int nWarehouseID)
        {
            oDSPlanExecutiveLeadTarget = new DSPlanExecutiveWeekTarget();
            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }

                OleDbCommand cmd = DBController.Instance.GetCommand();
                cmd.CommandText = " select * from t_PlanExecutiveLeadTarget a inner join t_DataTransfer b on b.DataID=a.VersionNo  " +
                                  " where b.TableName='t_PlanExecutiveLeadTarget' and  " +
                                  " b.IsDownload=1 and WarehouseID= '" + nWarehouseID + "' and CustomerID in (Select CustomerID From t_Showroom where WarehouseID='" + nWarehouseID + "')  ";


                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSPlanExecutiveWeekTarget.PlanExecutiveWeekTargetRow oPlanExecutiveWeekTargetRow = oDSPlanExecutiveLeadTarget.PlanExecutiveWeekTarget.NewPlanExecutiveWeekTargetRow();

                    oPlanExecutiveWeekTargetRow.VersionNo = (int)reader["VersionNo"];
                    oPlanExecutiveWeekTargetRow.TYear = (int)reader["TYear"];
                    oPlanExecutiveWeekTargetRow.TMonth = (int)reader["TMonth"];
                    oPlanExecutiveWeekTargetRow.WeekNo = (int)reader["WeekNo"];
                    oPlanExecutiveWeekTargetRow.CustomerID = (int)reader["CustomerID"];
                    oPlanExecutiveWeekTargetRow.SalesPersonID = (int)reader["SalesPersonID"];
                    oPlanExecutiveWeekTargetRow.MAGID = (int)reader["MAGID"];
                    oPlanExecutiveWeekTargetRow.BrandID = (int)reader["BrandID"];
                    oPlanExecutiveWeekTargetRow.TargetQty = (int)reader["TargetQty"];
                    oPlanExecutiveWeekTargetRow.TargetAmount = (double)reader["TargetAmount"];
                    oPlanExecutiveWeekTargetRow.Channel = (int)reader["Channel"];
                    oPlanExecutiveWeekTargetRow.TargetType = (int)reader["TargetType"];



                    oDSPlanExecutiveLeadTarget.PlanExecutiveWeekTarget.AddPlanExecutiveWeekTargetRow(oPlanExecutiveWeekTargetRow);
                    oDSPlanExecutiveLeadTarget.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Plan Executive Week Target");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Plan Executive Week Target /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSPlanExecutiveLeadTarget;
        }

        /// <summary>
        /// Plan MAGWeek Target Qty
        /// </summary>
        /// <returns></returns>
        /// 
        public DSPlanMAGWeekTargetQty GetPlanMAGWeekTargetQty(DSPlanMAGWeekTargetQty oDSPlanMAGWeekTargetQty, int nWarehouseID)
        {
            oDSPlanMAGWeekTargetQty = new DSPlanMAGWeekTargetQty();
            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }

                OleDbCommand cmd = DBController.Instance.GetCommand();
                cmd.CommandText = " select * from t_PlanMAGWeekTargetQty a inner join t_DataTransfer b on b.DataID=a.VersionNo  " +
                                  " where b.TableName='t_PlanMAGWeekTargetQty' and  " +
                                  " b.IsDownload=1 and WarehouseID= '" + nWarehouseID + "' and CustomerID in (Select CustomerID From t_Showroom where WarehouseID='" + nWarehouseID + "')  ";


                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSPlanMAGWeekTargetQty.PlanMAGWeekTargetQtyRow oPlanMAGWeekTargetQtyRow = oDSPlanMAGWeekTargetQty.PlanMAGWeekTargetQty.NewPlanMAGWeekTargetQtyRow();

                    oPlanMAGWeekTargetQtyRow.VersionNo = (int)reader["VersionNo"];
                    oPlanMAGWeekTargetQtyRow.TYear = (int)reader["TYear"];
                    oPlanMAGWeekTargetQtyRow.TMonth = (int)reader["TMonth"];
                    oPlanMAGWeekTargetQtyRow.WeekNo = (int)reader["WeekNo"];
                    oPlanMAGWeekTargetQtyRow.CustomerID = (int)reader["CustomerID"];
                    oPlanMAGWeekTargetQtyRow.MAGID = (int)reader["MAGID"];
                    oPlanMAGWeekTargetQtyRow.BrandID = (int)reader["BrandID"];
                    oPlanMAGWeekTargetQtyRow.TargetQty = (int)reader["TargetQty"];
                    oPlanMAGWeekTargetQtyRow.TargetValue = (double)reader["TargetValue"];
                    oPlanMAGWeekTargetQtyRow.Channel = (string)reader["Channel"];

                    oDSPlanMAGWeekTargetQty.PlanMAGWeekTargetQty.AddPlanMAGWeekTargetQtyRow(oPlanMAGWeekTargetQtyRow);
                    oDSPlanMAGWeekTargetQty.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Plan MAG Week Target Qty");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting MAG Week Target Qty /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSPlanMAGWeekTargetQty;
        }

        /// <summary>
        /// Outlet Display Position
        /// </summary>
        /// <returns></returns>
        /// 
        public DSOutletDisplayPosition GetOutletDisplayPosition(DSOutletDisplayPosition oDSOutletDisplayPosition, int nWarehouseID)
        {
            oDSOutletDisplayPosition = new DSOutletDisplayPosition();
            DSOutletDisplayPosition oDSOutletDisplayPositionHistory = new DSOutletDisplayPosition();
            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }

                OleDbCommand cmd = DBController.Instance.GetCommand();
                cmd.CommandText = " Select * from t_OutletDisplayPosition a inner join t_DataTransfer b on b.DataID=a.DisplayPositionID   " +
                                  " where b.TableName='t_OutletDisplayPosition' and b.IsDownload=1 and WarehouseID = " + nWarehouseID + "";


                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSOutletDisplayPosition.OutletDisplayPositionRow oOutletDisplayPositionRow = oDSOutletDisplayPosition.OutletDisplayPosition.NewOutletDisplayPositionRow();

                    oOutletDisplayPositionRow.DisplayPositionID = (int)reader["DisplayPositionID"];
                    oOutletDisplayPositionRow.PositionCode = (string)reader["PositionCode"];
                    oOutletDisplayPositionRow.PositionName = (string)reader["PositionName"];
                    oOutletDisplayPositionRow.MAGID = (int)reader["MAGID"];
                    oOutletDisplayPositionRow.WHID = (int)reader["WHID"];
                    oOutletDisplayPositionRow.ProductID = (int)reader["ProductID"];
                    oOutletDisplayPositionRow.CreateDate = Convert.ToDateTime(reader["CreateDate"].ToString());
                    oOutletDisplayPositionRow.CreateUserID = (int)reader["CreateUserID"];
                    if (reader["UpdateDate"] != DBNull.Value)
                    {
                        oOutletDisplayPositionRow.UpdateDate = Convert.ToDateTime(reader["UpdateDate"].ToString());
                    }
                    if (reader["UpdateUserID"] != DBNull.Value)
                        oOutletDisplayPositionRow.UpdateUserID = (int)reader["UpdateUserID"];
                    else oOutletDisplayPositionRow.UpdateUserID = -1;
                    if (reader["ProductSerialNo"] != DBNull.Value)
                        oOutletDisplayPositionRow.ProductSerialNo = (string)reader["ProductSerialNo"];
                    else oOutletDisplayPositionRow.ProductSerialNo = null;
                    if (reader["Status"] != DBNull.Value)
                        oOutletDisplayPositionRow.Status = (int)reader["Status"];
                    else oOutletDisplayPositionRow.Status = -1;
                    oOutletDisplayPositionRow.IsActive = (int)reader["IsActive"];

                    if (reader["AssignDate"] != DBNull.Value)
                    {
                        oOutletDisplayPositionRow.AssignDate = Convert.ToDateTime(reader["AssignDate"].ToString());
                    }

                    if (reader["AssignUserID"] != DBNull.Value)
                        oOutletDisplayPositionRow.AssignUserID = (int)reader["AssignUserID"];
                    else oOutletDisplayPositionRow.AssignUserID = -1;

                    if (reader["AssignProductID"] != DBNull.Value)
                        oOutletDisplayPositionRow.AssignProductID = (int)reader["AssignProductID"];
                    else oOutletDisplayPositionRow.AssignProductID = -1;
                    oOutletDisplayPositionRow.RackID = (int)reader["RackID"];
                    if (reader["SaleAfter"] != DBNull.Value)
                    {
                        oOutletDisplayPositionRow.SaleAfter = (DateTime)reader["SaleAfter"];
                    }
                    else
                    {
                        oOutletDisplayPositionRow.SetSaleAfterNull();
                    }
                    //SaleAfter NULL
                    oOutletDisplayPositionRow.OpenForAll = Convert.ToBoolean(reader["OpenForAll"]);
                    oDSOutletDisplayPosition.OutletDisplayPosition.AddOutletDisplayPositionRow(oOutletDisplayPositionRow);
                    oDSOutletDisplayPosition.AcceptChanges();

                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Outlet Display Position");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Outlet Display Position /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSOutletDisplayPosition;
        }

        public DSOutletDisplayPosition GetOutletDisplayPositionRack(DSOutletDisplayPosition oDSOutletDisplayPositionRack, int nWarehouseID)
        {

            oDSOutletDisplayPositionRack = new DSOutletDisplayPosition();
            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }

                OleDbCommand cmd = DBController.Instance.GetCommand();
                cmd.CommandText = "select RackID,RackName,a.CreateDate,a.CreateUserID,a.IsActive,isnull(a.Sort,0) Sort from t_OutletDisplayPositionRack a  " +
                                "inner join t_DataTransfer b on b.DataID=a.RackID   " +
                                "where b.TableName='t_OutletDisplayPositionRack' and   " +
                                "b.IsDownload=1 and WarehouseID= " + nWarehouseID + "";


                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSOutletDisplayPosition.OutletDisplayPositionRackRow oOutletDisplayPositionRackRow = oDSOutletDisplayPositionRack.OutletDisplayPositionRack.NewOutletDisplayPositionRackRow();

                    oOutletDisplayPositionRackRow.RackID = (int)reader["RackID"];
                    oOutletDisplayPositionRackRow.RackName = (string)reader["RackName"];
                    oOutletDisplayPositionRackRow.CreateDate = Convert.ToDateTime(reader["CreateDate"].ToString());
                    oOutletDisplayPositionRackRow.CreateUserID = (int)reader["CreateUserID"];
                    oOutletDisplayPositionRackRow.IsActive = (int)reader["IsActive"];
                    oOutletDisplayPositionRackRow.Sort = (int)reader["Sort"];

                    oDSOutletDisplayPositionRack.OutletDisplayPositionRack.AddOutletDisplayPositionRackRow(oOutletDisplayPositionRackRow);
                    oDSOutletDisplayPositionRack.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Outlet Display Position Rack Data");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Outlet Display Position Rack Data/" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSOutletDisplayPositionRack;
        }
        public DSSalesInvoiceEcommerce GetSalesInvoiceEcommerce(DSSalesInvoiceEcommerce oDSSalesInvoiceEcommerce, int nWarehouseID)
        {
            oDSSalesInvoiceEcommerce = new DSSalesInvoiceEcommerce();
            DSSalesInvoiceEcommerce oDSSalesInvoiceEcommerceDetail = new DSSalesInvoiceEcommerce();
            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }

                OleDbCommand cmd = DBController.Instance.GetCommand();

                cmd.CommandText = "select a.* from t_SalesInvoiceEcommerce a ,t_DataTransfer b  " +
                                "where b.DataID=a.EComOrderID and b.TableName='t_SalesInvoiceEcommerce'  " +
                                "and b.IsDownload=1 and b.WarehouseID = " + nWarehouseID + "";

                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSSalesInvoiceEcommerce.SalesInvoiceEcommerceRow oSalesInvoiceEcommerceRow = oDSSalesInvoiceEcommerce.SalesInvoiceEcommerce.NewSalesInvoiceEcommerceRow();

                    oSalesInvoiceEcommerceRow.EComOrderID = (int)reader["EComOrderID"];
                    oSalesInvoiceEcommerceRow.LeadType = (int)reader["LeadType"];
                    oSalesInvoiceEcommerceRow.OrderNo = (string)reader["OrderNo"];
                    oSalesInvoiceEcommerceRow.OrderDate = Convert.ToDateTime(reader["OrderDate"]);
                    oSalesInvoiceEcommerceRow.Outlet = (string)reader["Outlet"];
                    oSalesInvoiceEcommerceRow.Amount = Convert.ToDouble(reader["Amount"]);
                    if (reader["DeliveryCharge"] != DBNull.Value)
                    {
                        oSalesInvoiceEcommerceRow.DeliveryCharge = Convert.ToDouble(reader["DeliveryCharge"]);
                    }
                    else
                    {
                        oSalesInvoiceEcommerceRow.DeliveryCharge = 0;
                    }
                    if (reader["Discount"] != DBNull.Value)
                    {
                        oSalesInvoiceEcommerceRow.Discount = Convert.ToDouble(reader["Discount"]);
                    }
                    else
                    {
                        oSalesInvoiceEcommerceRow.Discount = 0;
                    }

                    if (reader["CopunNo"] != DBNull.Value)
                    {
                        oSalesInvoiceEcommerceRow.CopunNo = (string)reader["CopunNo"];
                    }
                    else
                    {
                        oSalesInvoiceEcommerceRow.CopunNo = "";
                    }
                    oSalesInvoiceEcommerceRow.ConsumerID = (int)reader["ConsumerID"];
                    oSalesInvoiceEcommerceRow.ConsumerName = (string)reader["ConsumerName"];
                    oSalesInvoiceEcommerceRow.Addrress = (string)reader["Addrress"];
                    oSalesInvoiceEcommerceRow.DeliveryAddress = (string)reader["DeliveryAddress"];
                    oSalesInvoiceEcommerceRow.ContactNo = (string)reader["ContactNo"];
                    oSalesInvoiceEcommerceRow.Email = (string)reader["Email"];
                    if (reader["Remarks"] != DBNull.Value)
                    {
                        oSalesInvoiceEcommerceRow.Remarks = (string)reader["Remarks"];
                    }
                    else
                    {
                        oSalesInvoiceEcommerceRow.Remarks = "";
                    }
                    oSalesInvoiceEcommerceRow.Status = (int)reader["Status"];
                    oSalesInvoiceEcommerceRow.PaymentType = (int)reader["PaymentType"];
                    if (reader["SalesPersonID"] != DBNull.Value)
                    {
                        oSalesInvoiceEcommerceRow.SalesPersonID = Convert.ToInt32(reader["SalesPersonID"]);
                    }
                    else
                    {
                        oSalesInvoiceEcommerceRow.SalesPersonID = 0;
                    }
                    if (reader["BankID"] != DBNull.Value)
                    {
                        oSalesInvoiceEcommerceRow.BankID = Convert.ToInt32(reader["BankID"]);
                    }
                    else
                    {
                        oSalesInvoiceEcommerceRow.BankID = 0;
                    }
                    if (reader["BankName"] != DBNull.Value)
                    {
                        oSalesInvoiceEcommerceRow.BankName = (string)reader["BankName"];
                    }
                    else
                    {
                        oSalesInvoiceEcommerceRow.BankName = "";
                    }
                    if (reader["CardTypeID"] != DBNull.Value)
                    {
                        oSalesInvoiceEcommerceRow.CardTypeID = Convert.ToInt32(reader["CardTypeID"]);
                    }
                    else
                    {
                        oSalesInvoiceEcommerceRow.CardTypeID = -1;
                    }
                    if (reader["CardType"] != DBNull.Value)
                    {
                        oSalesInvoiceEcommerceRow.CardType = (string)reader["CardType"];
                    }
                    else
                    {
                        oSalesInvoiceEcommerceRow.CardType = "";
                    }
                    if (reader["IsEMI"] != DBNull.Value)
                    {
                        oSalesInvoiceEcommerceRow.IsEMI = (int)reader["IsEMI"];
                    }
                    else
                    {
                        oSalesInvoiceEcommerceRow.IsEMI = 0;
                    }
                    if (reader["NoOfInstallment"] != DBNull.Value)
                    {
                        oSalesInvoiceEcommerceRow.NoOfInstallment = (int)reader["NoOfInstallment"];
                    }
                    else
                    {
                        oSalesInvoiceEcommerceRow.NoOfInstallment = 0;
                    }
                    if (reader["InstrumentNo"] != DBNull.Value)
                    {
                        oSalesInvoiceEcommerceRow.InstrumentNo = (string)reader["InstrumentNo"];
                    }
                    else
                    {
                        oSalesInvoiceEcommerceRow.InstrumentNo = "";
                    }
                    if (reader["InstrumentDate"] != DBNull.Value)
                    {
                        oSalesInvoiceEcommerceRow.InstrumentDate = Convert.ToDateTime(reader["InstrumentDate"]);
                    }
                    else
                    {
                        oSalesInvoiceEcommerceRow.InstrumentDate = DateTime.Now.Date;
                    }
                    if (reader["CardCategoryID"] != DBNull.Value)
                    {
                        oSalesInvoiceEcommerceRow.CardCategoryID = Convert.ToInt32(reader["CardCategoryID"]);
                    }
                    else
                    {
                        oSalesInvoiceEcommerceRow.CardCategoryID = -1;
                    }
                    if (reader["CardCategory"] != DBNull.Value)
                    {
                        oSalesInvoiceEcommerceRow.CardCategory = (string)reader["CardCategory"];
                    }
                    else
                    {
                        oSalesInvoiceEcommerceRow.CardCategory = "";
                    }
                    if (reader["ApprovalNo"] != DBNull.Value)
                    {
                        oSalesInvoiceEcommerceRow.ApprovalNo = (string)reader["ApprovalNo"];
                    }
                    else
                    {
                        oSalesInvoiceEcommerceRow.ApprovalNo = "";
                    }
                    if (reader["RefInvoiceNo"] != DBNull.Value)
                    {
                        oSalesInvoiceEcommerceRow.RefInvoiceNo = (string)reader["RefInvoiceNo"];
                    }
                    else
                    {
                        oSalesInvoiceEcommerceRow.RefInvoiceNo = "";
                    }
                    oDSSalesInvoiceEcommerce.SalesInvoiceEcommerce.AddSalesInvoiceEcommerceRow(oSalesInvoiceEcommerceRow);
                    oDSSalesInvoiceEcommerce.AcceptChanges();

                    EcommerceOrder oEcommerceOrder = new EcommerceOrder();
                    oEcommerceOrder.GetItemForHO(oSalesInvoiceEcommerceRow.EComOrderID);

                    foreach (EcommerceOrderDetail oItem in oEcommerceOrder)
                    {

                        DSSalesInvoiceEcommerce.SalesInvoiceEcommerceDetailRow oSalesInvoiceEcommerceDetailRow = oDSSalesInvoiceEcommerceDetail.SalesInvoiceEcommerceDetail.NewSalesInvoiceEcommerceDetailRow();

                        oSalesInvoiceEcommerceDetailRow.EcomOrderID = oItem.EcomOrderID;
                        oSalesInvoiceEcommerceDetailRow.ProductCode = oItem.ProductCode;
                        oSalesInvoiceEcommerceDetailRow.ProductName = oItem.ProductName;
                        oSalesInvoiceEcommerceDetailRow.UnitPrice = oItem.UnitPrice;
                        oSalesInvoiceEcommerceDetailRow.DiscountAmount = oItem.DiscountAmount;
                        oSalesInvoiceEcommerceDetailRow.Quantity = oItem.Quantity;
                        oSalesInvoiceEcommerceDetailRow.IsFreeQty = oItem.IsFreeQty;

                        oDSSalesInvoiceEcommerceDetail.SalesInvoiceEcommerceDetail.AddSalesInvoiceEcommerceDetailRow(oSalesInvoiceEcommerceDetailRow);
                        oDSSalesInvoiceEcommerceDetail.AcceptChanges();
                    }
                }
                oDSSalesInvoiceEcommerce.Merge(oDSSalesInvoiceEcommerceDetail);
                oDSSalesInvoiceEcommerce.AcceptChanges();
                reader.Close();

                AppLogger.LogInfo("Successfully Get SalesInvoice Ecommerce Detail");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting SalesInvoice Ecommerce Detail/" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return oDSSalesInvoiceEcommerce;
        }
        public void UpdateOutletDisplayPositionRack(DSOutletDisplayPosition oDSOutletDisplayPositionRack, int nWarehouseID)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            if (!DBController.Instance.CheckConnection())
            {
                DBController.Instance.OpenNewConnection();
            }
            try
            {
                foreach (DSOutletDisplayPosition.OutletDisplayPositionRackRow oOutletDisplayPositionRackRow in oDSOutletDisplayPositionRack.OutletDisplayPositionRack)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_OutletDisplayPositionRack");
                    cmd.Parameters.AddWithValue("DataID", oOutletDisplayPositionRackRow.RackID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }

        }

        /// <summary>
        /// Get Invoice Reverse Data 
        /// </summary>
        /// <returns></returns>

        public DSSalesLead GetSalesLeadData(DSSalesLead oDSSalesLead, int nWarehouseID)
        {
            oDSSalesLead = new DSSalesLead();
            try
            {
                DBController.Instance.OpenNewConnection();
                OleDbCommand cmd = DBController.Instance.GetCommand();

                cmd.CommandText = "Select LeadID,a.WarehouseID,LeadNo,LeadDate,ExpExecuteDate,CustomerType,CompanyName,Name,Address, " +
                                "ContactNo,Email,isnull(Profession,'') Profession,isnull(AgeLevel,'') AgeLevel,isnull(IncomLevel,'') IncomLevel, " +
                                "MAGID,BrandID,isnull(ModelName,'') ModelName,NextFollowUpDate,isnull(LeadAmount,0) LeadAmount,Status,isnull(Remarks,'') Remarks, " +
                                "isnull(Reason,'') Reason,isnull(InvoiceNo,'') InvoiceNo,a.CreateDate,CreateUserID, " +
                                "isnull(SalesPersonID,-1) SalesPersonID,isnull(Terminal,2) Terminal,isnull(ConversionPossibility,-1) ConversionPossibility, isnull(Qty,1) Qty,  " +
                                "isnull(IsExistingConsumer,0) IsExistingConsumer,   " +
                                "isnull(RefLeadNo, '') RefLeadNo,isnull(LeadSource, 0) LeadSource,  " +
                                "isnull(ActivationID, -1) ActivationID,isnull(ConsumerID, -1) ConsumerID,  " +
                                "isnull(ProductID, -1) ProductID,isnull(ThanaID, -1) ThanaID   " +
                                "from t_SalesLeadManagement a  " +
                                "inner join t_DataTransfer b on b.DataID=a.LeadID   " +
                                "where b.TableName='t_SalesLeadManagement' and  a.WarehouseID=b.WarehouseID and  " +
                                "b.IsDownload=1 and b.WarehouseID= " + nWarehouseID + "";


                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSSalesLead.SalesLeadRow oSalesLeadRow = oDSSalesLead.SalesLead.NewSalesLeadRow();

                    oSalesLeadRow.LeadID = (int)reader["LeadID"];
                    oSalesLeadRow.WarehouseID = (int)reader["WarehouseID"];
                    oSalesLeadRow.LeadNo = (string)reader["LeadNo"];
                    oSalesLeadRow.LeadDate = Convert.ToDateTime(reader["LeadDate"].ToString());
                    oSalesLeadRow.ExpExecuteDate = Convert.ToDateTime(reader["ExpExecuteDate"].ToString());
                    oSalesLeadRow.CustomerType = (int)reader["CustomerType"];
                    oSalesLeadRow.CompanyName = (string)reader["CompanyName"];
                    oSalesLeadRow.Name = (string)reader["Name"];
                    oSalesLeadRow.Address = (string)reader["Address"];
                    oSalesLeadRow.ContactNo = (string)reader["ContactNo"];
                    oSalesLeadRow.Email = (string)reader["Email"];
                    oSalesLeadRow.Profession = (string)reader["Profession"];
                    oSalesLeadRow.AgeLevel = (string)reader["AgeLevel"];
                    oSalesLeadRow.IncomLevel = (string)reader["IncomLevel"];
                    oSalesLeadRow.MAGID = (int)reader["MAGID"];
                    oSalesLeadRow.BrandID = (int)reader["BrandID"];
                    oSalesLeadRow.ModelName = (string)reader["ModelName"];
                    oSalesLeadRow.NextFollowUpDate = Convert.ToDateTime(reader["NextFollowUpDate"].ToString());
                    oSalesLeadRow.LeadAmount = Convert.ToDouble(reader["LeadAmount"].ToString());
                    oSalesLeadRow.Status = (int)reader["Status"];
                    oSalesLeadRow.Remarks = (string)reader["Remarks"];
                    oSalesLeadRow.Reason = (string)reader["Reason"];
                    oSalesLeadRow.InvoiceNo = (string)reader["InvoiceNo"];
                    oSalesLeadRow.CreateUserID = (int)reader["CreateUserID"];
                    oSalesLeadRow.CreateDate = Convert.ToDateTime(reader["CreateDate"].ToString());
                    oSalesLeadRow.SalesPersonID = (int)reader["SalesPersonID"];
                    oSalesLeadRow.Terminal = (int)reader["Terminal"];
                    oSalesLeadRow.ConversionPossibility = (int)reader["ConversionPossibility"];
                    oSalesLeadRow.Qty = (int)reader["Qty"];
                    oSalesLeadRow.IsExistingConsumer = (int)reader["IsExistingConsumer"];
                    oSalesLeadRow.RefLeadNo = (string)reader["RefLeadNo"];
                    oSalesLeadRow.LeadSource = (int)reader["LeadSource"];
                    oSalesLeadRow.ActivationID = (int)reader["ActivationID"];
                    oSalesLeadRow.ConsumerID = (int)reader["ConsumerID"];
                    oSalesLeadRow.ProductID = (int)reader["ProductID"];
                    oSalesLeadRow.ThanaID = (int)reader["ThanaID"];

                    oDSSalesLead.SalesLead.AddSalesLeadRow(oSalesLeadRow);
                    oDSSalesLead.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Sales Lead");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Sales Lead /" + ex.Message);
                throw (ex);
            }
            // DBController.Instance.CloseConnection();
            return oDSSalesLead;
        }

        public DSSalesLead GetSalesLeadHistoryData(DSSalesLead oDSSalesLead, int nWarehouseID)
        {
            oDSSalesLead = new DSSalesLead();
            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }

                OleDbCommand cmd = DBController.Instance.GetCommand();

                cmd.CommandText = "SELECT HistoryID,a.LeadNo,c.LeadID,a.WarehouseID, " +
                                "a.ExpExecuteDate,isnull(a.Remarks,'') Remarks,  " +
                                "isnull(a.Status,1) Status,isnull(a.CreateDate,getdate()) CreateDate " +
                                "FROM t_SalesLeadManagementHistory a      " +
                                "inner join t_DataTransfer b       " +
                                "on b.DataID=a.HistoryID and a.WarehouseID=b.WarehouseID      " +
                                "inner join t_SalesLeadManagement c       " +
                                "on a.LeadNo=c.LeadNo and a.WarehouseID=c.WarehouseID   " +
                                "where b.TableName = 't_SalesLeadManagementHistory'   " +
                                "and  b.IsDownload = 1 and b.WarehouseID = " + nWarehouseID + "";


                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSSalesLead.SalesLeadRow oSalesLeadRow = oDSSalesLead.SalesLead.NewSalesLeadRow();

                    oSalesLeadRow.HistoryID = (int)reader["HistoryID"];
                    oSalesLeadRow.WarehouseID = (int)reader["WarehouseID"];
                    oSalesLeadRow.LeadNo = (string)reader["LeadNo"];
                    oSalesLeadRow.ExpExecuteDate = Convert.ToDateTime(reader["ExpExecuteDate"].ToString());
                    oSalesLeadRow.LeadID = (int)reader["LeadID"];

                    oSalesLeadRow.Remarks = (string)reader["Remarks"];
                    oSalesLeadRow.Status = (int)reader["Status"];
                    oSalesLeadRow.CreateDate = Convert.ToDateTime(reader["CreateDate"].ToString());

                    oDSSalesLead.SalesLead.AddSalesLeadRow(oSalesLeadRow);
                    oDSSalesLead.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Sales Lead Management History");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Sales Lead Management History /" + ex.Message);
                throw (ex);
            }
            //DBController.Instance.CloseConnection();
            return oDSSalesLead;
        }

        #endregion

        #region Data Insert

        public bool InsertTest(string sName, string sAddress, DateTime dDateOfBirth)
        {
            bool bFlag = false;
            DBController.Instance.BeginNewTransaction();
            string sSql = "";
            int nCount = 0;

            OleDbCommand cmd = DBController.Instance.GetCommand();

            try
            {
                cmd.CommandText = "INSERT INTO TELSysDB.dbo.A_Text VALUES(?,?,?)";
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.AddWithValue("Name", sName);
                cmd.Parameters.AddWithValue("Address", sAddress);
                cmd.Parameters.AddWithValue("DateOfBirth", dDateOfBirth);

                cmd.ExecuteNonQuery();
                cmd.Dispose();
                bFlag = true;
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                bFlag = false;
                throw (ex);

            }

            DBController.Instance.CommitTransaction();
            return bFlag;

        }

        public int GetEcomOrderStatus(int nEcomOrderID)
        {
            DBController.Instance.OpenNewConnection();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            int nCount = 0;
            int _nStatus = 0;
            try
            {
                cmd.CommandText = "Select Status From dbo.t_SalesInvoiceEcommerce where EcomOrderID= ?";
                cmd.Parameters.AddWithValue("EcomOrderID", nEcomOrderID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                if (reader.Read())
                {
                    _nStatus = (int)reader["Status"];
                    nCount++;
                }
                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            return _nStatus;
        }

        public double GetRSPByProductCode(string sProductCode)
        {
            DBController.Instance.OpenNewConnection();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            int nCount = 0;
            double _RSP = 0;
            try
            {
                cmd.CommandText = "Select * From  " +
                                "(Select ProductCode,isnull(RSP,0) RSP From TELSysDB.DBO.v_productDetails   " +
                                "Union All  " +
                                "Select ProductCode,isnull(RSP,0) RSP From TMLSysDB.DBO.v_productDetails   " +
                                "Union All  " +
                                "Select ProductCode,isnull(RSP,0) RSP From BLLDBSERVER01.bllsysdb.dbo.v_ProductDetails) a  " +
                                "where ProductCode= ?";

                cmd.Parameters.AddWithValue("ProductCode", sProductCode);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                if (reader.Read())
                {
                    _RSP = (double)reader["RSP"];
                    nCount++;
                }
                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            return _RSP;
        }

        public double GetPromoDiscountByProductCode(string sProductCode)
        {
            DBController.Instance.OpenNewConnection();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            int nCount = 0;
            double _Discount = 0;
            try
            {

                //cmd.CommandText = "Select isnull(sum(DisAmount),0) DisAmount From  " +
                //                "(  " +
                //                "Select ProductCode,  " +
                //                "case when OfferType = 2 then RSP * Discount / 100 else Discount end DisAmount  " +
                //                "From  " +
                //                "(  " +
                //                "Select a.ConsumerPromoID, a.SlabID, a.OfferID, OfferType, Discount  " +
                //                "From  " +
                //                "(  " +
                //                "Select ConsumerPromoID, SlabID, min(OfferID) OfferID  " +
                //                "From TELSysDB.dbo.t_PromoCPOfferDetail where OfferType in (1, 2)  " +
                //                "group by ConsumerPromoID, SlabID having count(OfferID) = 1  " +
                //                ") a, TELSysDB.dbo.t_PromoCPOfferDetail b  " +
                //                "where a.ConsumerPromoID = b.ConsumerPromoID and a.SlabID = b.SlabID  " +
                //                "and a.OfferID = b.OfferID and OfferType in (1, 2)  " +
                //                ") a,  " +
                //                "(  " +
                //                "Select ConsumerPromoID, SlabID, ProductID  " +
                //                "From  " +
                //                "(  " +
                //                "Select ConsumerPromoID, ProductID, min(SlabID)SlabID  " +
                //                "From TELSysDB.dbo.t_PromoCPSlabRatio where Qty = 1 group by ConsumerPromoID,ProductID  " +
                //                ") a group by ConsumerPromoID, SlabID, ProductID  " +
                //                "having count(ProductID) = 1  " +
                //                ") b,TELSysDB.dbo.v_ProductDetails c, TELSysDB.dbo.t_PromoCP d  " +
                //                "where a.ConsumerPromoID = b.ConsumerPromoID and a.SlabID = b.SlabID  " +
                //                "and b.ProductID = c.ProductID and a.ConsumerPromoID = d.ConsumerPromoID  " +
                //                "and b.ConsumerPromoID = d.ConsumerPromoID and  " +
                //                "Cast(GETDATE() as Date) between FromDate and ToDate  " +
                //                "and d.IsActive = 1 and Status = 1  " +
                //                "and d.ConsumerPromoID in (  " +
                //                "Select ConsumerPromoID  " +
                //                "From TELSysDB.dbo.t_PromoCPSalesType where SalesType in (1, 6)  " +
                //                ")  and ConsumerPromoNo not in (Select SalesPromotionNo From [TELAddDB].dbo.[t_SalesPromoDisableforEcommerce] where Company='TEL')  " +
                //                "UNion All  " +
                //                "Select  " +
                //                "ProductCode, sum(Discount)Discount  " +
                //                "From  " +
                //                "(  " +
                //                "Select SalesPromotionNo, FromDate, ToDate, ProductCode, ProductName, AGName, ASgName, MAGName, PGName, Discount = Case When DiscountType = 2 then DiscountPercentage          " +
                //                "else RSP * DiscountPercentage / 100 end  " +
                //                "From TMLSYSDB.dbo.t_SalesPromoDiscount a, TMLSYSDB.dbo.v_ProductDetails b, TMLSYSDB.dbo.t_SalesPromo c, TMLSYSDB.dbo.t_SalesPromoChannel d  " +
                //                "where ProductGroupType = 5 and a.ProductGroupID = b.ProductID and a.SalesPromotionID = c.SalesPromotionID  " +
                //                "and c.SalesPromotionID = d.SalesPromotionID and DiscountType IN(1, 2) and c.IsActive = 1 and DATEADD(dd, 0, DATEDIFF(dd, 0, GETDATE())) between FromDate and ToDate  " +
                //                "and ChannelID = 16  and SalesPromotionNo not in (Select SalesPromotionNo From [TELAddDB].dbo.[t_SalesPromoDisableforEcommerce] where Company='TML') " +
                //                "Union All  " +
                //                "select SalesPromotionNo, FromDate, ToDate, ProductCode, ProductName, AGName, ASgName, MAGName, PGName, Discount = Case When DiscountType = 1 then Discount  " +
                //                "When DiscountType = 2 then RSP * Discount / 100 else 0 end  " +
                //                "from TMLSYSDB.dbo.t_SalesPromo a,  " +
                //                "TMLSYSDB.dbo.t_SalesPromoProduct b, TMLSYSDB.dbo.t_SalesPromoSlab c, TMLSYSDB.dbo.v_ProductDetails d, TMLSYSDB.dbo.t_SalesPromoChannel e  " +
                //                "Where a.SalesPromotionID = b.SalesPromotionID  and a.IsActive = 1  " +
                //                "and a.SalesPromotionID = c.SalesPromotionID and b.ProductID = d.ProductID  " +
                //                "and a.SalesPromotionID = e.SalesPromotionID  " +
                //                "and DATEADD(dd, 0, DATEDIFF(dd, 0, GETDATE())) between FromDate and ToDate and DiscountType IN(1, 2)  " +
                //                "and ChannelID = 16  and SalesPromotionNo not in (Select SalesPromotionNo From [TELAddDB].dbo.[t_SalesPromoDisableforEcommerce] where Company='TML')  " +
                //                ") Main group by ProductCode  " +
                //                ") Main where ProductCode = '" + sProductCode + "'";


                cmd.CommandText = "Select isnull(sum(DisAmount),0) DisAmount  " +
                                "From  " +
                                "(  " +
                                "Select ProductCode, min(DisAmount) DisAmount  " +
                                "From  " +
                                "(  " +
                                "Select A.ConsumerPromoID, A.SlabID, ProductCode, c.ProductID,  " +
                                "case when OfferType = 2 then RSP * Discount / 100 else Discount end DisAmount  " +
                                "From TELSYSDB.DBO.t_PromoCPOfferDetail a,  " +
                                "(  " +
                                "Select a.ConsumerPromoID, SlabID, a.ProductID  " +
                                "From TELSYSDB.DBO.t_PromoCPProductFor a, TELSYSDB.DBO.t_PromoCPSlabRatio b  " +
                                "where a.ConsumerPromoID = b.ConsumerPromoID and a.ProductID = b.ProductID and Qty = 1  " +
                                "and a.ConsumerPromoID in   " +
                                //--Single Product--
                                "(  " +
                                "Select ConsumerPromoID  " +
                                "From TELSYSDB.DBO.t_PromoCPProductFor group by ConsumerPromoID  " +
                                "having count(ProductID) = 1)  " +
                                //--Single Slab--
                                "and a.ConsumerPromoID in (Select ConsumerPromoID From TELSYSDB.DBO.t_PromoCPSlab  " +
                                "group by ConsumerPromoID having count(SlabID) = 1)  " +
                                ") B,TELSYSDB.DBO.v_ProductDetails c, TELSYSDB.DBO.t_PromoCP d, TELSYSDB.DBO.t_PromoCPSalesType e  " +
                                "where OfferType in (1, 2)   " +
                                "AND a.ConsumerPromoID = b.ConsumerPromoID and a.SlabID = b.SlabID  " +
                                "and b.ProductID = c.ProductID and a.ConsumerPromoID = d.ConsumerPromoID  " +
                                "and DATEADD(dd, 0, DATEDIFF(dd, 0, GETDATE())) between FromDate and ToDate  " +
                                "and d.IsActive = 1 and a.ConsumerPromoID = e.ConsumerPromoID and SalesType in (1, 6)   " +
                                "and ConsumerPromoNo not in (Select SalesPromotionNo From[TELAddDB].dbo.[t_SalesPromoDisableforEcommerce] where Company = 'TEL')  and d.Status=1  " +
                                ") xx  " +
                                "group by ConsumerPromoID, SlabID, ProductCode, ProductID  " +
                                "UNion All  " +
                                "Select  " +
                                "ProductCode, sum(Discount)Discount  " +
                                "From  " +
                                "(  " +
                                "Select SalesPromotionNo, FromDate, ToDate, ProductCode, ProductName, AGName, ASgName, MAGName, PGName, Discount = Case When DiscountType = 2 then DiscountPercentage            " +
                                "else RSP * DiscountPercentage / 100 end  " +
                                "From TMLSYSDB.dbo.t_SalesPromoDiscount a, TMLSYSDB.dbo.v_ProductDetails b, TMLSYSDB.dbo.t_SalesPromo c, TMLSYSDB.dbo.t_SalesPromoChannel d  " +
                                "where ProductGroupType = 5 and a.ProductGroupID = b.ProductID and a.SalesPromotionID = c.SalesPromotionID  " +
                                "and c.SalesPromotionID = d.SalesPromotionID and DiscountType IN(1, 2) and c.IsActive = 1 and DATEADD(dd, 0, DATEDIFF(dd, 0, GETDATE())) between FromDate and ToDate  " +
                                "and ChannelID = 16  and SalesPromotionNo not in (Select SalesPromotionNo From[TELAddDB].dbo.[t_SalesPromoDisableforEcommerce] where Company = 'TML')  " +
                                "Union All  " +
                                "select SalesPromotionNo, FromDate, ToDate, ProductCode, ProductName, AGName, ASgName, MAGName, PGName, Discount = Case When DiscountType = 1 then Discount  " +
                                "When DiscountType = 2 then RSP * Discount / 100 else 0 end  " +
                                "from TMLSYSDB.dbo.t_SalesPromo a,  " +
                                "TMLSYSDB.dbo.t_SalesPromoProduct b, TMLSYSDB.dbo.t_SalesPromoSlab c, TMLSYSDB.dbo.v_ProductDetails d, TMLSYSDB.dbo.t_SalesPromoChannel e  " +
                                "Where a.SalesPromotionID = b.SalesPromotionID  and a.IsActive = 1  " +
                                "and a.SalesPromotionID = c.SalesPromotionID and b.ProductID = d.ProductID  " +
                                "and a.SalesPromotionID = e.SalesPromotionID  " +
                                "and DATEADD(dd, 0, DATEDIFF(dd, 0, GETDATE())) between FromDate and ToDate and DiscountType IN(1, 2)  " +
                                "and ChannelID = 16  and SalesPromotionNo not in (Select SalesPromotionNo From[TELAddDB].dbo.[t_SalesPromoDisableforEcommerce] where Company = 'TML')    " +
                                ") Main group by ProductCode  " +
                                ") Main where ProductCode = '" + sProductCode + "'";

                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                if (reader.Read())
                {
                    _Discount = (double)reader["DisAmount"];
                    nCount++;
                }
                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            return _Discount;
        }

        public bool InsertEcomOrder(int nEComOrderID, int nOrderType, string sOrderNo, DateTime dtOrderDate, string sOutlet, double Amount, double DeliveryCharge, double Discount, string sCopunNo, int nConsumerID, string sConsumerName, string sAddrress, string sDeliveryAddress, string sContactNo, string sEmail, string sRemarks, int nStatus, int nPaymentType, string sBankName, string sCardType, int nISEMI, int nNoOfInstallment, string sInstrumentNo, DateTime dtInstrumentDate, string sCardCategory, string sApprovalNo)
        {
            bool bFlag = false;
            DBController.Instance.BeginNewTransaction();
            string sSql = "";
            int nCount = 0;

            OleDbCommand cmd = DBController.Instance.GetCommand();

            try
            {
                cmd.CommandText = " INSERT INTO t_SalesInvoiceEcommerce (EComOrderID, LeadType, OrderNo, " +
                                  " OrderDate, Outlet, Amount, DeliveryCharge, Discount, CopunNo, ConsumerID, " +
                                  " ConsumerName, Addrress, DeliveryAddress, ContactNo, Email, Remarks, Status, " +
                                  " PaymentType, BankName, CardType, IsEMI, NoOfInstallment, InstrumentNo, InstrumentDate, " +
                                  " CardCategory, ApprovalNo) " +
                                  " VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";


                cmd.CommandType = CommandType.Text;
                cmd.Parameters.AddWithValue("EComOrderID", nEComOrderID);
                cmd.Parameters.AddWithValue("LeadType", nOrderType);
                cmd.Parameters.AddWithValue("OrderNo", sOrderNo);
                cmd.Parameters.AddWithValue("OrderDate", dtOrderDate);
                cmd.Parameters.AddWithValue("Outlet", sOutlet);
                cmd.Parameters.AddWithValue("Amount", Amount);
                cmd.Parameters.AddWithValue("DeliveryCharge", DeliveryCharge);
                cmd.Parameters.AddWithValue("Discount", Discount);
                cmd.Parameters.AddWithValue("CopunNo", sCopunNo);
                cmd.Parameters.AddWithValue("ConsumerID", nConsumerID);
                cmd.Parameters.AddWithValue("ConsumerName", sConsumerName);
                cmd.Parameters.AddWithValue("Addrress", sAddrress);
                cmd.Parameters.AddWithValue("DeliveryAddress", sDeliveryAddress);
                cmd.Parameters.AddWithValue("ContactNo", sContactNo);
                cmd.Parameters.AddWithValue("Email", sEmail);
                cmd.Parameters.AddWithValue("Remarks", sRemarks.Substring(0, 250));
                if (nStatus == 60)
                {
                    cmd.Parameters.AddWithValue("Status", 1);
                }
                else
                {
                    cmd.Parameters.AddWithValue("Status", nStatus);
                }
                if (nPaymentType == 0)
                {
                    cmd.Parameters.AddWithValue("PaymentType", 2);
                }
                else
                {
                    cmd.Parameters.AddWithValue("PaymentType", 1);
                }

                //cmd.Parameters.AddWithValue("SalesPersonID", _nSalesPersonID);
                //cmd.Parameters.AddWithValue("BankID", _nBankID);
                cmd.Parameters.AddWithValue("BankName", sBankName);
                //cmd.Parameters.AddWithValue("CardTypeID", _nCardTypeID);
                cmd.Parameters.AddWithValue("CardType", sCardType);
                cmd.Parameters.AddWithValue("IsEMI", nISEMI);
                cmd.Parameters.AddWithValue("NoOfInstallment", nNoOfInstallment);
                cmd.Parameters.AddWithValue("InstrumentNo", sInstrumentNo);
                cmd.Parameters.AddWithValue("InstrumentDate", dtInstrumentDate);
                //cmd.Parameters.AddWithValue("CardCategoryID", _nCardCategoryID);
                cmd.Parameters.AddWithValue("CardCategory", sCardCategory);
                cmd.Parameters.AddWithValue("ApprovalNo", sApprovalNo);
                //cmd.Parameters.AddWithValue("RefInvoiceNo", _sRefInvoiceNo);

                cmd.ExecuteNonQuery();
                cmd.Dispose();
                bFlag = true;
                AppLogger.LogInfo("Successfully insert e-commerce order.EComOrderID=" + nEComOrderID + "");
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                bFlag = false;
                AppLogger.LogInfo("Error insert e-commerce order.EComOrderID=" + nEComOrderID + "  /" + ex.Message);
                throw (ex);

            }

            DBController.Instance.CommitTransaction();
            return bFlag;

        }
        public bool InsertEcomOrderDetail(int nEComOrderID, string sProductCode, string sProductName, double _UnitPrice, double _DiscountAmount, int nQuantity, int nIsFreeQty)
        {
            bool bFlag = false;
            DBController.Instance.BeginNewTransaction();
            string sSql = ""; 
            int nCount = 0;

            OleDbCommand cmd = DBController.Instance.GetCommand();

            try
            {
                cmd.CommandText = " INSERT INTO TELSysDB.dbo.t_SalesInvoiceEcommerceDetail (EcomOrderID,ProductCode,ProductName,UnitPrice,DiscountAmount,Quantity,IsFreeQty) VALUES(?,?,?,?,?,?,?)";
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.AddWithValue("EComOrderID", nEComOrderID);
                cmd.Parameters.AddWithValue("ProductCode", sProductCode);
                cmd.Parameters.AddWithValue("ProductName", sProductName);
                cmd.Parameters.AddWithValue("UnitPrice", _UnitPrice);
                cmd.Parameters.AddWithValue("DiscountAmount", _DiscountAmount);
                cmd.Parameters.AddWithValue("Quantity", nQuantity);
                cmd.Parameters.AddWithValue("IsFreeQty", nIsFreeQty);

                cmd.ExecuteNonQuery();
                cmd.Dispose();
                bFlag = true;
                AppLogger.LogInfo("Successfully insert e-commerce order detail. EComOrderID="+ nEComOrderID + "");
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                bFlag = false;
                AppLogger.LogInfo("error insert e-commerce order detail.EComOrderID=" + nEComOrderID + " /" + ex.Message);
                throw (ex);

            }

            DBController.Instance.CommitTransaction();
            return bFlag;

        }

        public bool InsertPotentialCustomerList(string sName, string sMobileNo, string sEmail, string sAddress, string sCompanyName, string sState, string sCity, string sCountry, string sEnquiryType, string sPreferredCategory, string sEnquiry, int nType, DateTime dtVisitDate)
        {

            bool bFlag = false;
            DBController.Instance.BeginNewTransaction();
            string sSql = "";
            int nCount = 0;
            int nMaxID = 0;

            OleDbCommand cmd = DBController.Instance.GetCommand();

            try
            {
                sSql = "SELECT MAX([ID]) FROM t_PotentialCustomerList";
                cmd.CommandText = sSql;
                object maxID = cmd.ExecuteScalar();
                if (maxID == DBNull.Value)
                {
                    nMaxID = 1;
                }
                else
                {
                    nMaxID = Convert.ToInt32(maxID) + 1;
                }

                sSql = "INSERT INTO t_PotentialCustomerList (ID, Outlet, CompanyName, Name, VisitDate, Designation, " +
                        "MobileNo, TelephoneNo, Address, Email, Remarks, CreateDate, " +
                        "CreateUserID, UpdateDate, UpdateUserID, Status, State,City,Country,  " +
                        "EnquiryType,PreferredCategory,CustType ) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                cmd.CommandText = sSql;
                cmd.CommandType = CommandType.Text;

                cmd.Parameters.AddWithValue("ID", nMaxID);
                cmd.Parameters.AddWithValue("Outlet", -1);
                cmd.Parameters.AddWithValue("CompanyName", sCompanyName);
                cmd.Parameters.AddWithValue("Name", sName);
                cmd.Parameters.AddWithValue("VisitDate", dtVisitDate);
                cmd.Parameters.AddWithValue("Designation", null);
                cmd.Parameters.AddWithValue("MobileNo", sMobileNo);
                cmd.Parameters.AddWithValue("TelephoneNo", null);
                cmd.Parameters.AddWithValue("Address", sAddress);
                cmd.Parameters.AddWithValue("Email", sEmail);
                cmd.Parameters.AddWithValue("Remarks", sEnquiry);
                cmd.Parameters.AddWithValue("CreateDate", DateTime.Now.Date);
                cmd.Parameters.AddWithValue("CreateUserID", -1);
                cmd.Parameters.AddWithValue("UpdateDate", null);
                cmd.Parameters.AddWithValue("UpdateUserID", null);
                cmd.Parameters.AddWithValue("Status", 1);
                cmd.Parameters.AddWithValue("State", sState);
                cmd.Parameters.AddWithValue("City", sCity);
                cmd.Parameters.AddWithValue("Country", sCountry);
                cmd.Parameters.AddWithValue("EnquiryType", sEnquiryType);
                cmd.Parameters.AddWithValue("PreferredCategory", sPreferredCategory);
                cmd.Parameters.AddWithValue("CustType", nType);

                cmd.ExecuteNonQuery();
                cmd.Dispose();
                bFlag = true;
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                bFlag = false;
                throw (ex);

            }

            DBController.Instance.CommitTransaction();
            return bFlag;

        }
        ///
        // Insert Stock Requisition
        ///
        public void InsertStockRequisition(DSRequisition oDSRequisition)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";
            int nCount = 0;

            /// Insert Stock Requisition

            foreach (DSRequisition.StockRequisitionRow oStockRequisitionRow in oDSRequisition.StockRequisition)
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                if (int.Parse(oStockRequisitionRow.TransferType.ToString()) == (int)Dictionary.DataTransferType.Add)
                {

                    try
                    {
                        POSRequisition _oPOSRequisition = new POSRequisition();
                        DSRequisition oDSRequisitionItem = new DSRequisition();

                        _oPOSRequisition.RequisitionID = oStockRequisitionRow.StockRequisitionID;
                        _oPOSRequisition.RequisitionNo = oStockRequisitionRow.RequisitionNo;
                        _oPOSRequisition.RequisitionDate = oStockRequisitionRow.RequisitionDate;
                        _oPOSRequisition.RequisitionType = oStockRequisitionRow.RequisitionType;
                        _oPOSRequisition.FromWHID = oStockRequisitionRow.FromWHID;
                        _oPOSRequisition.ToWHID = oStockRequisitionRow.ToWHID;
                        _oPOSRequisition.CreateUserID = oStockRequisitionRow.CreateUserID;
                        _oPOSRequisition.CreateDate = oStockRequisitionRow.CreateDate;
                        _oPOSRequisition.Status = oStockRequisitionRow.Status;
                        _oPOSRequisition.Remarks = oStockRequisitionRow.Remarks;
                        if (oStockRequisitionRow.RequisitionType != (int)Dictionary.StockRequisitionType.Requisition)
                        {
                            _oPOSRequisition.StockTranID = oStockRequisitionRow.StockTranID;
                        }
                        else
                        {
                            _oPOSRequisition.StockTranID = -1;
                        }
                        _oPOSRequisition.Terminal = oStockRequisitionRow.Terminal;


                        DataRow[] oDR = oDSRequisition.StockRequisitionItem.Select(" StockRequisitionID= '" + oStockRequisitionRow.StockRequisitionID + "'");
                        oDSRequisitionItem.Merge(oDR);
                        oDSRequisitionItem.AcceptChanges();

                        foreach (DSRequisition.StockRequisitionItemRow oStockRequisitionItemRow in oDSRequisitionItem.StockRequisitionItem)
                        {
                            POSRequisitionItem _oPOSRequisitionItem = new POSRequisitionItem();

                            _oPOSRequisitionItem.RequisitionID = Convert.ToInt32(oStockRequisitionItemRow.StockRequisitionID);
                            _oPOSRequisitionItem.ProductID = Convert.ToInt32(oStockRequisitionItemRow.ProductID);
                            _oPOSRequisitionItem.RequisitionQty = Convert.ToInt32(oStockRequisitionItemRow.RequisitingQty);
                            _oPOSRequisitionItem.AuthorizeQty = Convert.ToInt32(oStockRequisitionItemRow.AuthorizeQty);

                            _oPOSRequisition.Add(_oPOSRequisitionItem);
                        }
                        _oPOSRequisition.SendStockRequisition();


                        if (oStockRequisitionRow.RequisitionType != (int)Dictionary.StockRequisitionType.Requisition)
                        {
                            if (_oPOSRequisition.StockTranID != -1)
                            {
                                DataRow[] oDRT = oDSRequisition.ProductStockTran.Select(" TranID= '" + oStockRequisitionRow.StockTranID + "'");
                                oDSRequisitionItem.Merge(oDRT);
                                oDSRequisitionItem.AcceptChanges();

                                foreach (DSRequisition.ProductStockTranRow oProductStockTranRow in oDSRequisitionItem.ProductStockTran)
                                {
                                    DSRequisition oDSProductStockTranItem = new DSRequisition();
                                    DSRequisition oDSProductTransferProductSerial = new DSRequisition();
                                    ProductTransaction oProductTransaction = new ProductTransaction();


                                    oProductTransaction.TranID = Convert.ToInt32(oProductStockTranRow.TranID);
                                    oProductTransaction.CreateDate = oProductStockTranRow.CreateDate;
                                    oProductTransaction.TranNo = oProductStockTranRow.TranNo;
                                    oProductTransaction.TranDate = oProductStockTranRow.TranDate;
                                    oProductTransaction.TranTypeID = oProductStockTranRow.TranTypeID;
                                    oProductTransaction.ToWHID = Convert.ToInt32(oProductStockTranRow.ToWHID);
                                    oProductTransaction.ToChannelID = Convert.ToInt32(oProductStockTranRow.ToChannelID);
                                    oProductTransaction.FromWHID = Convert.ToInt32(oProductStockTranRow.FromWHID);
                                    oProductTransaction.FromChannelID = Convert.ToInt32(oProductStockTranRow.FromChannelID);
                                    oProductTransaction.UserID = Convert.ToInt32(oProductStockTranRow.UserID);
                                    oProductTransaction.Status = Convert.ToInt16(oProductStockTranRow.Status);
                                    oProductTransaction.Remarks = oProductStockTranRow.Remarks;
                                    oProductTransaction.LastUpdateUserID = oProductStockTranRow.LastUpdateUserID;
                                    oProductTransaction.LastUpdateDate = oProductStockTranRow.LastUpdateDate;

                                    DataRow[] oDRTD = oDSRequisition.ProductStockTranItem.Select(" TranID= '" + oProductStockTranRow.TranID + "'");
                                    oDSProductStockTranItem.Merge(oDRTD);
                                    oDSProductStockTranItem.AcceptChanges();

                                    foreach (DSRequisition.ProductStockTranItemRow oProductStockTranItemRow in oDSProductStockTranItem.ProductStockTranItem)
                                    {

                                        ProductTransactionDetail oProductTransactionDetail = new ProductTransactionDetail();

                                        oProductTransactionDetail.TranID = int.Parse(oProductStockTranItemRow.TranID.ToString());
                                        oProductTransactionDetail.ProductID = int.Parse(oProductStockTranItemRow.ProductID.ToString());
                                        oProductTransactionDetail.Qty = oProductStockTranItemRow.Qty;
                                        oProductTransactionDetail.StockPrice = oProductStockTranItemRow.StockPrice;

                                        oProductTransaction.Add(oProductTransactionDetail);
                                    }
                                    oProductTransaction.InsertProductTran();


                                    _oPOSRequisition.StockTranID = oProductTransaction.TranID;
                                    _oPOSRequisition.UpdateStockTranID_POS();

                                    ProductTransferProductSerials _oProductTransferProductSerials = new ProductTransferProductSerials();

                                    DataRow[] oDRTDS = oDSRequisition.ProductTransferProductSerial.Select(" TranID= '" + oProductStockTranRow.TranID + "'");
                                    oDSProductTransferProductSerial.Merge(oDRTDS);
                                    oDSProductTransferProductSerial.AcceptChanges();

                                    foreach (DSRequisition.ProductTransferProductSerialRow oProductTransferProductSerialRow in oDSProductTransferProductSerial.ProductTransferProductSerial)
                                    {

                                        ProductTransferProductSerial oProductTransferProductSerial = new ProductTransferProductSerial();

                                        oProductTransferProductSerial.TranID = int.Parse(oProductTransferProductSerialRow.TranID.ToString());
                                        oProductTransferProductSerial.ProductID = int.Parse(oProductTransferProductSerialRow.ProductID.ToString());
                                        oProductTransferProductSerial.SerialNo = int.Parse(oProductTransferProductSerialRow.SerialNo.ToString());
                                        oProductTransferProductSerial.ProductSerialNo = oProductTransferProductSerialRow.ProductSerialNo;

                                        oProductTransferProductSerial.Insert(oProductTransaction.TranID);

                                        ProductBarcode oProductBarcode = new ProductBarcode();
                                        if (oProductTransaction.FromWHID == (int)Dictionary.Warehouse.Service_Return_Stock_from_TD_Outlet)
                                        {
                                            oProductBarcode.Status = (int)Dictionary.ProductSerialStatus.Send_from_CSD_to_Outlet;
                                        }
                                        else
                                        {
                                            oProductBarcode.Status = (int)Dictionary.ProductSerialStatus.Send_from_Outlet_to_Outlet;
                                        }
                                        oProductBarcode.ProductSerialNo = oProductTransferProductSerial.ProductSerialNo;

                                        oProductBarcode.GetProductSerialID(oProductBarcode.ProductSerialNo);

                                        if (oProductBarcode.Found == false)
                                        {

                                            oProductBarcode.ProductStockTranID = oProductTransaction.TranID;
                                            oProductBarcode.ProductId = oProductTransferProductSerial.ProductID;
                                            oProductBarcode.InsertProductSerial();
                                        }
                                        else
                                        {
                                            oProductBarcode.UpdateProductSerial();
                                        }

                                        oProductBarcode.FromWHID = oProductTransaction.FromWHID;
                                        oProductBarcode.ToWHID = oProductTransaction.ToWHID;
                                        oProductBarcode.CreateDate = DateTime.Now;
                                        oProductBarcode.InsertProductSerialHistory();
                                    }

                                }

                            }
                        }

                        AppLogger.LogInfo("Successfully Update Stock Requisition Item Where StockRequisitionID=" + _oPOSRequisition.RequisitionID + "");
                    }
                    catch (Exception ex)
                    {
                        AppLogger.LogError("Error Updating Stock Requisition /" + ex.Message);
                        throw (ex);
                    }

                }
                else if (int.Parse(oStockRequisitionRow.TransferType.ToString()) == (int)Dictionary.DataTransferType.Edit)
                {
                    try
                    {
                        cmd.Dispose();
                        cmd = DBController.Instance.GetCommand();

                        sSql = "Update t_StockRequisition SET AuthorizedBy=?,AuthorizeDate=?,AuthorizeRemarks=?,TransferedBy=?, TransferDate=?, TransferRemarks=?, " +
                               "ReceivedBy=?, ReceiveDate=?, ReceiveRemarks=?,Status=? Where RequisitionNo=? ";
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("AuthorizedBy", oStockRequisitionRow.AuthorizedBy);
                        cmd.Parameters.AddWithValue("AuthorizeDate", oStockRequisitionRow.AuthorizeDate);
                        cmd.Parameters.AddWithValue("AuthorizeRemarks", oStockRequisitionRow.AuthorizeRemarks);

                        if (oStockRequisitionRow.TransferedBy != -1)
                        {
                            cmd.Parameters.AddWithValue("TransferedBy", oStockRequisitionRow.TransferedBy);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("TransferedBy", null);
                        }
                        if (oStockRequisitionRow.IsTransferDateNull())
                        {
                            cmd.Parameters.AddWithValue("TransferDate", null);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("TransferDate", oStockRequisitionRow.TransferDate);
                        }
                        if (oStockRequisitionRow.TransferRemarks != "")
                        {
                            cmd.Parameters.AddWithValue("TransferRemarks", oStockRequisitionRow.TransferRemarks);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("TransferRemarks", null);
                        }
                        if (oStockRequisitionRow.ReceivedBy != -1)
                        {
                            cmd.Parameters.AddWithValue("ReceivedBy", oStockRequisitionRow.ReceivedBy);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("ReceivedBy", null);
                        }
                        if (oStockRequisitionRow.IsReceiveDateNull())
                        {
                            cmd.Parameters.AddWithValue("ReceiveDate", null);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("ReceiveDate", oStockRequisitionRow.ReceiveDate);
                        }
                        if (oStockRequisitionRow.ReceiveRemarks != "")
                        {
                            cmd.Parameters.AddWithValue("ReceiveRemarks", oStockRequisitionRow.ReceiveRemarks);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("ReceiveRemarks", null);
                        }
                        cmd.Parameters.AddWithValue("Status", oStockRequisitionRow.Status);
                        cmd.Parameters.AddWithValue("RequisitionNo", oStockRequisitionRow.RequisitionNo);


                        cmd.ExecuteNonQuery();
                        cmd.Dispose();
                        AppLogger.LogInfo("Successfully Update Stock Requisition");

                        SystemInfo oSystemInfo = new SystemInfo();
                        oSystemInfo.Refresh();

                        if (oStockRequisitionRow.Status == (int)Dictionary.StockRequisitionStatus.Approve_By_HO
                            || oStockRequisitionRow.Status == (int)Dictionary.StockRequisitionStatus.Transfer_To_Branch)
                        {

                            POSRequisition oPOSRequisition = new POSRequisition();
                            oPOSRequisition.GetStockRequisitionIDByRequistionNo(oStockRequisitionRow.RequisitionNo);
                            oPOSRequisition.GetStockRequisitionByID(oPOSRequisition.RequisitionID);

                            if (oStockRequisitionRow.RequisitionType != (int)Dictionary.StockRequisitionType.Requisition)
                            {
                                ProductTransaction oProductTransaction = new ProductTransaction();
                                oProductTransaction.Status = (int)Dictionary.StockTransactionStatus.COMPLETE;
                                oProductTransaction.TranID = oPOSRequisition.StockTranID;
                                oProductTransaction.UpdateStockTranStatus();


                                oProductTransaction.LastUpdateUserID = Utility.UserId;
                                oProductTransaction.LastUpdateDate = Convert.ToDateTime(oSystemInfo.OperationDate);
                                oProductTransaction.UpdateLastUser();
                            }

                            DSRequisition oDSRequisitionItem = new DSRequisition();
                            DataRow[] oDR = oDSRequisition.StockRequisitionItem.Select(" StockRequisitionID= '" + oStockRequisitionRow.StockRequisitionID + "'");
                            oDSRequisitionItem.Merge(oDR);
                            oDSRequisitionItem.AcceptChanges();

                            if (oStockRequisitionRow.Status != (int)Dictionary.StockRequisitionStatus.Receive_At_Branch)
                            {
                                foreach (DSRequisition.StockRequisitionItemRow oStockRequisitionItemRow in oDSRequisitionItem.StockRequisitionItem)
                                {

                                    //oPOSRequisition = new POSRequisition();
                                    if (oPOSRequisition.CheckRequisitionItem(oPOSRequisition.RequisitionID, oStockRequisitionItemRow.ProductID))
                                    {
                                        cmd.Dispose();
                                        cmd = DBController.Instance.GetCommand();

                                        sSql = "Update t_StockRequisitionItem SET AuthorizeQty=? where StockRequisitionID=? and ProductID=? ";
                                        cmd.CommandText = sSql;
                                        cmd.CommandType = CommandType.Text;

                                        cmd.Parameters.AddWithValue("AuthorizeQty", oStockRequisitionItemRow.AuthorizeQty);
                                        cmd.Parameters.AddWithValue("StockRequisitionID", oPOSRequisition.RequisitionID);
                                        cmd.Parameters.AddWithValue("ProductID", oStockRequisitionItemRow.ProductID);

                                        cmd.ExecuteNonQuery();
                                        cmd.Dispose();
                                    }
                                    else
                                    {
                                        cmd.Dispose();
                                        cmd = DBController.Instance.GetCommand();

                                        sSql = "Insert Into t_StockRequisitionItem Values (?,?,?,?)";
                                        cmd.CommandText = sSql;
                                        cmd.CommandType = CommandType.Text;

                                        cmd.Parameters.AddWithValue("StockRequisitionID", oPOSRequisition.RequisitionID);
                                        cmd.Parameters.AddWithValue("ProductID", oStockRequisitionItemRow.ProductID);
                                        cmd.Parameters.AddWithValue("RequisitingQty", oStockRequisitionItemRow.RequisitingQty);
                                        cmd.Parameters.AddWithValue("AuthorizeQty", oStockRequisitionItemRow.AuthorizeQty);

                                        cmd.ExecuteNonQuery();
                                        cmd.Dispose();

                                    }


                                    AppLogger.LogInfo("Successfully Update Stock Requisition Item Where StockRequisitionID=" + oPOSRequisition.RequisitionID + "");
                                }
                            }
                        }
                        else if (oStockRequisitionRow.Status == (int)Dictionary.StockRequisitionStatus.Reject_By_HO)
                        {
                            ProductBarcode oProductBarcode;
                            POSRequisition _oPOSRequisition;
                            _oPOSRequisition = new POSRequisition();

                            _oPOSRequisition.GetStockRequisitionIDByRequistionNo(oStockRequisitionRow.RequisitionNo);


                            ProductTransferProductSerials oPTPSs = new ProductTransferProductSerials();
                            oPTPSs.GetProductTransferProductSerial(_oPOSRequisition.StockTranID);
                            foreach (ProductTransferProductSerial oPTPS in oPTPSs)
                            {
                                oProductBarcode = new ProductBarcode();

                                oProductBarcode.Status = (int)Dictionary.ProductSerialStatus.Received_at_Outlet;
                                oProductBarcode.ProductSerialNo = oPTPS.ProductSerialNo;
                                oProductBarcode.UpdateProductSerial();

                                oProductBarcode.GetProductSerialID(oPTPS.ProductSerialNo);

                                oProductBarcode.DeleteProductSerialHistory(oProductBarcode.ProductStockSerialID);

                            }


                            StockTran oStockTran = new StockTran();
                            oStockTran.DeleteTran(_oPOSRequisition.StockTranID);

                            _oPOSRequisition.StockTranID = -1;
                            _oPOSRequisition.UpdateStockTranID_POS();

                            _oPOSRequisition.RefreshStockRequisitionItem();
                            if (oStockRequisitionRow.RequisitionType != (int)Dictionary.StockRequisitionType.Requisition)
                            {
                                foreach (POSRequisitionItem oitem in _oPOSRequisition)
                                {

                                    ProductStock oProductStock = new ProductStock();
                                    oProductStock.WarehouseID = oSystemInfo.WarehouseID;
                                    oProductStock.ChannelID = oSystemInfo.ChannelID;
                                    oProductStock.ProductID = oitem.ProductID;
                                    oProductStock.Quantity = oitem.RequisitionQty;

                                    oProductStock.UpdateCurrentStock(true);

                                }
                            }

                            AppLogger.LogInfo("Successfully Update Stock Requisition Item Where StockRequisitionID=" + _oPOSRequisition.RequisitionID + "");

                        }

                    }
                    catch (Exception ex)
                    {
                        AppLogger.LogError("Error Updating Stock Requisition /" + ex.Message);
                        throw (ex);
                    }

                }
            }
        }

        public void InsertStockRequisitionforNewVat(DSRequisition oDSRequisition, int nWHID)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";
            int nCount = 0;
            int nVatPaidID = 0;

            /// Insert Stock Requisition

            foreach (DSRequisition.StockRequisitionRow oStockRequisitionRow in oDSRequisition.StockRequisition)
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                ///if (int.Parse(oStockRequisitionRow.TransferType.ToString()) == (int)Dictionary.DataTransferType.Add)
                if (CheckProductStockRequisition(oStockRequisitionRow.RequisitionNo))
                {

                    try
                    {
                        POSRequisition _oPOSRequisition = new POSRequisition();
                        DSRequisition oDSRequisitionItem = new DSRequisition();

                        _oPOSRequisition.RequisitionID = oStockRequisitionRow.StockRequisitionID;
                        _oPOSRequisition.RequisitionNo = oStockRequisitionRow.RequisitionNo;
                        _oPOSRequisition.RequisitionDate = oStockRequisitionRow.RequisitionDate;
                        _oPOSRequisition.RequisitionType = oStockRequisitionRow.RequisitionType;
                        _oPOSRequisition.FromWHID = oStockRequisitionRow.FromWHID;
                        _oPOSRequisition.ToWHID = oStockRequisitionRow.ToWHID;
                        _oPOSRequisition.CreateUserID = oStockRequisitionRow.CreateUserID;
                        _oPOSRequisition.CreateDate = oStockRequisitionRow.CreateDate;
                        _oPOSRequisition.Status = oStockRequisitionRow.Status;
                        _oPOSRequisition.Remarks = oStockRequisitionRow.Remarks;
                        if (oStockRequisitionRow.RequisitionType != (int)Dictionary.StockRequisitionType.Requisition)
                        {
                            _oPOSRequisition.StockTranID = oStockRequisitionRow.StockTranID;
                        }
                        else
                        {
                            _oPOSRequisition.StockTranID = -1;
                        }
                        _oPOSRequisition.Terminal = oStockRequisitionRow.Terminal;


                        DataRow[] oDR = oDSRequisition.StockRequisitionItem.Select(" StockRequisitionID= '" + oStockRequisitionRow.StockRequisitionID + "'");
                        oDSRequisitionItem.Merge(oDR);
                        oDSRequisitionItem.AcceptChanges();

                        foreach (DSRequisition.StockRequisitionItemRow oStockRequisitionItemRow in oDSRequisitionItem.StockRequisitionItem)
                        {
                            POSRequisitionItem _oPOSRequisitionItem = new POSRequisitionItem();

                            _oPOSRequisitionItem.RequisitionID = Convert.ToInt32(oStockRequisitionItemRow.StockRequisitionID);
                            _oPOSRequisitionItem.ProductID = Convert.ToInt32(oStockRequisitionItemRow.ProductID);
                            _oPOSRequisitionItem.RequisitionQty = Convert.ToInt32(oStockRequisitionItemRow.RequisitingQty);
                            _oPOSRequisitionItem.AuthorizeQty = Convert.ToInt32(oStockRequisitionItemRow.AuthorizeQty);

                            _oPOSRequisitionItem.DutyTranNo = oStockRequisitionItemRow.DutyTranNo;
                            _oPOSRequisitionItem.DutyPrice = Convert.ToDouble(oStockRequisitionItemRow.DutyPrice);
                            _oPOSRequisitionItem.DutyRate = Convert.ToDouble(oStockRequisitionItemRow.DutyRate);


                            _oPOSRequisition.Add(_oPOSRequisitionItem);
                        }
                        _oPOSRequisition.SendStockRequisition();


                        if (oStockRequisitionRow.RequisitionType != (int)Dictionary.StockRequisitionType.Requisition)
                        {
                            if (_oPOSRequisition.StockTranID != -1)
                            {
                                DataRow[] oDRT = oDSRequisition.ProductStockTran.Select(" TranID= '" + oStockRequisitionRow.StockTranID + "'");
                                oDSRequisitionItem.Merge(oDRT);
                                oDSRequisitionItem.AcceptChanges();

                                foreach (DSRequisition.ProductStockTranRow oProductStockTranRow in oDSRequisitionItem.ProductStockTran)
                                {
                                    DSRequisition oDSProductStockTranItem = new DSRequisition();
                                    DSRequisition oDSProductTransferProductSerial = new DSRequisition();
                                    ProductTransaction oProductTransaction = new ProductTransaction();


                                    oProductTransaction.TranID = Convert.ToInt32(oProductStockTranRow.TranID);
                                    oProductTransaction.CreateDate = oProductStockTranRow.CreateDate;
                                    oProductTransaction.TranNo = oProductStockTranRow.TranNo;
                                    oProductTransaction.TranDate = oProductStockTranRow.TranDate;
                                    oProductTransaction.TranTypeID = oProductStockTranRow.TranTypeID;
                                    oProductTransaction.ToWHID = Convert.ToInt32(oProductStockTranRow.ToWHID);
                                    oProductTransaction.ToChannelID = Convert.ToInt32(oProductStockTranRow.ToChannelID);
                                    oProductTransaction.FromWHID = Convert.ToInt32(oProductStockTranRow.FromWHID);
                                    oProductTransaction.FromChannelID = Convert.ToInt32(oProductStockTranRow.FromChannelID);
                                    oProductTransaction.UserID = Convert.ToInt32(oProductStockTranRow.UserID);
                                    oProductTransaction.Status = Convert.ToInt16(oProductStockTranRow.Status);
                                    oProductTransaction.Remarks = oProductStockTranRow.Remarks;
                                    oProductTransaction.LastUpdateUserID = oProductStockTranRow.LastUpdateUserID;
                                    oProductTransaction.LastUpdateDate = oProductStockTranRow.LastUpdateDate;

                                    DataRow[] oDRTD = oDSRequisition.ProductStockTranItem.Select(" TranID= '" + oProductStockTranRow.TranID + "'");
                                    oDSProductStockTranItem.Merge(oDRTD);
                                    oDSProductStockTranItem.AcceptChanges();

                                    foreach (DSRequisition.ProductStockTranItemRow oProductStockTranItemRow in oDSProductStockTranItem.ProductStockTranItem)
                                    {

                                        ProductTransactionDetail oProductTransactionDetail = new ProductTransactionDetail();

                                        oProductTransactionDetail.TranID = int.Parse(oProductStockTranItemRow.TranID.ToString());
                                        oProductTransactionDetail.ProductID = int.Parse(oProductStockTranItemRow.ProductID.ToString());
                                        oProductTransactionDetail.Qty = oProductStockTranItemRow.Qty;
                                        oProductTransactionDetail.StockPrice = oProductStockTranItemRow.StockPrice;

                                        oProductTransactionDetail.DutyTranNo = oProductStockTranItemRow.DutyTranNo;
                                        oProductTransactionDetail.DutyPrice = oProductStockTranItemRow.DutyPrice;
                                        oProductTransactionDetail.DutyRate = oProductStockTranItemRow.DutyRate;

                                        oProductTransaction.Add(oProductTransactionDetail);
                                    }
                                    oProductTransaction.InsertProductTranWithVATData();


                                    _oPOSRequisition.StockTranID = oProductTransaction.TranID;
                                    _oPOSRequisition.UpdateStockTranID_POS();

                                    ProductTransferProductSerials _oProductTransferProductSerials = new ProductTransferProductSerials();

                                    DataRow[] oDRTDS = oDSRequisition.ProductTransferProductSerial.Select(" TranID= '" + oProductStockTranRow.TranID + "'");
                                    oDSProductTransferProductSerial.Merge(oDRTDS);
                                    oDSProductTransferProductSerial.AcceptChanges();

                                    foreach (DSRequisition.ProductTransferProductSerialRow oProductTransferProductSerialRow in oDSProductTransferProductSerial.ProductTransferProductSerial)
                                    {

                                        ProductTransferProductSerial oProductTransferProductSerial = new ProductTransferProductSerial();

                                        oProductTransferProductSerial.TranID = int.Parse(oProductTransferProductSerialRow.TranID.ToString());
                                        oProductTransferProductSerial.ProductID = int.Parse(oProductTransferProductSerialRow.ProductID.ToString());
                                        oProductTransferProductSerial.SerialNo = int.Parse(oProductTransferProductSerialRow.SerialNo.ToString());
                                        oProductTransferProductSerial.ProductSerialNo = oProductTransferProductSerialRow.ProductSerialNo;

                                        oProductTransferProductSerial.Insert(oProductTransaction.TranID);

                                        ProductBarcode oProductBarcode = new ProductBarcode();
                                        if (oProductTransaction.FromWHID == (int)Dictionary.Warehouse.Service_Return_Stock_from_TD_Outlet)
                                        {
                                            oProductBarcode.Status = (int)Dictionary.ProductSerialStatus.Send_from_CSD_to_Outlet;
                                        }
                                        else
                                        {
                                            oProductBarcode.Status = (int)Dictionary.ProductSerialStatus.Send_from_Outlet_to_Outlet;
                                        }
                                        oProductBarcode.ProductSerialNo = oProductTransferProductSerial.ProductSerialNo;

                                        oProductBarcode.GetProductSerialID(oProductBarcode.ProductSerialNo);

                                        //int IsVatVapidSL = oProductBarcode.GetVatPaidBarcode(oProductBarcode.ProductSerialNo);
                                        int IsVatVapidSL = oProductTransferProductSerialRow.IsVATPaidProduct;


                                        if (oProductBarcode.Found == false)
                                        {

                                            oProductBarcode.ProductStockTranID = oProductTransaction.TranID;
                                            oProductBarcode.ProductId = oProductTransferProductSerial.ProductID;
                                            oProductBarcode.IsVatPaidProduct = IsVatVapidSL;
                                            oProductBarcode.InsertProductSerialNewVatData();
                                        }
                                        else
                                        {
                                            oProductBarcode.UpdateProductSerial();
                                        }

                                        oProductBarcode.FromWHID = oProductTransaction.FromWHID;
                                        oProductBarcode.ToWHID = oProductTransaction.ToWHID;
                                        oProductBarcode.CreateDate = DateTime.Now;
                                        oProductBarcode.InsertProductSerialHistory();
                                        if (IsVatVapidSL == 1)
                                        {
                                            int nCounts = 0;
                                            if (nCounts == 0)
                                            {
                                                ProductBarcode _oMAXID = new ProductBarcode();
                                                nVatPaidID = _oMAXID.GetMaxID();
                                                nCounts++;
                                            }
                                            oProductBarcode.VatPaidID = nVatPaidID;
                                            oProductBarcode.WarehouseID = nWHID;
                                            oProductBarcode.TranNo = oProductTransaction.TranNo;
                                            oProductBarcode.TranDate = oProductTransaction.TranDate;
                                            oProductBarcode.Status = (int)Dictionary.ProductSerialStatus.Received_at_Outlet;
                                            oProductBarcode.InsertVatPaidProductSerial();
                                        }
                                    }

                                }

                            }
                        }

                        AppLogger.LogInfo("Successfully Update Stock Requisition Item Where StockRequisitionID=" + _oPOSRequisition.RequisitionID + "");
                    }
                    catch (Exception ex)
                    {
                        AppLogger.LogError("Error Updating Stock Requisition /" + ex.Message);
                        throw (ex);
                    }

                }
                //else if (int.Parse(oStockRequisitionRow.TransferType.ToString()) == (int)Dictionary.DataTransferType.Edit)
                else
                {
                    try
                    {
                        cmd.Dispose();
                        cmd = DBController.Instance.GetCommand();

                        sSql = "Update t_StockRequisition SET FromWHID=?,ToWHID=?,AuthorizedBy=?,AuthorizeDate=?,AuthorizeRemarks=?,TransferedBy=?, TransferDate=?, TransferRemarks=?, " +
                               "ReceivedBy=?, ReceiveDate=?, ReceiveRemarks=?,Status=? Where RequisitionNo=? ";
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("FromWHID", oStockRequisitionRow.FromWHID);
                        cmd.Parameters.AddWithValue("ToWHID", oStockRequisitionRow.ToWHID);

                        cmd.Parameters.AddWithValue("AuthorizedBy", oStockRequisitionRow.AuthorizedBy);
                        cmd.Parameters.AddWithValue("AuthorizeDate", oStockRequisitionRow.AuthorizeDate);
                        cmd.Parameters.AddWithValue("AuthorizeRemarks", oStockRequisitionRow.AuthorizeRemarks);


                        if (oStockRequisitionRow.TransferedBy != -1)
                        {
                            cmd.Parameters.AddWithValue("TransferedBy", oStockRequisitionRow.TransferedBy);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("TransferedBy", null);
                        }
                        if (oStockRequisitionRow.IsTransferDateNull())
                        {
                            cmd.Parameters.AddWithValue("TransferDate", null);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("TransferDate", oStockRequisitionRow.TransferDate);
                        }
                        if (oStockRequisitionRow.TransferRemarks != "")
                        {
                            cmd.Parameters.AddWithValue("TransferRemarks", oStockRequisitionRow.TransferRemarks);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("TransferRemarks", null);
                        }
                        if (oStockRequisitionRow.ReceivedBy != -1)
                        {
                            cmd.Parameters.AddWithValue("ReceivedBy", oStockRequisitionRow.ReceivedBy);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("ReceivedBy", null);
                        }
                        if (oStockRequisitionRow.IsReceiveDateNull())
                        {
                            cmd.Parameters.AddWithValue("ReceiveDate", null);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("ReceiveDate", oStockRequisitionRow.ReceiveDate);
                        }
                        if (oStockRequisitionRow.ReceiveRemarks != "")
                        {
                            cmd.Parameters.AddWithValue("ReceiveRemarks", oStockRequisitionRow.ReceiveRemarks);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("ReceiveRemarks", null);
                        }
                        cmd.Parameters.AddWithValue("Status", oStockRequisitionRow.Status);
                        cmd.Parameters.AddWithValue("RequisitionNo", oStockRequisitionRow.RequisitionNo);


                        cmd.ExecuteNonQuery();
                        cmd.Dispose();
                        AppLogger.LogInfo("Successfully Update Stock Requisition");

                        SystemInfo oSystemInfo = new SystemInfo();
                        oSystemInfo.Refresh();

                        if (oStockRequisitionRow.Status == (int)Dictionary.StockRequisitionStatus.Approve_By_HO
                            || oStockRequisitionRow.Status == (int)Dictionary.StockRequisitionStatus.Transfer_To_Branch)
                        {

                            POSRequisition oPOSRequisition = new POSRequisition();
                            oPOSRequisition.GetStockRequisitionIDByRequistionNo(oStockRequisitionRow.RequisitionNo);
                            oPOSRequisition.GetStockRequisitionByID(oPOSRequisition.RequisitionID);

                            if (oStockRequisitionRow.RequisitionType != (int)Dictionary.StockRequisitionType.Requisition)
                            {
                                ProductTransaction oProductTransaction = new ProductTransaction();
                                oProductTransaction.Status = (int)Dictionary.StockTransactionStatus.COMPLETE;
                                oProductTransaction.TranID = oPOSRequisition.StockTranID;
                                oProductTransaction.UpdateStockTranStatus();


                                oProductTransaction.LastUpdateUserID = Utility.UserId;
                                oProductTransaction.LastUpdateDate = Convert.ToDateTime(oSystemInfo.OperationDate);
                                oProductTransaction.UpdateLastUser();
                            }

                            DSRequisition oDSRequisitionItem = new DSRequisition();
                            DataRow[] oDR = oDSRequisition.StockRequisitionItem.Select(" StockRequisitionID= '" + oStockRequisitionRow.StockRequisitionID + "'");
                            oDSRequisitionItem.Merge(oDR);
                            oDSRequisitionItem.AcceptChanges();

                            if (oStockRequisitionRow.Status != (int)Dictionary.StockRequisitionStatus.Receive_At_Branch)
                            {
                                foreach (DSRequisition.StockRequisitionItemRow oStockRequisitionItemRow in oDSRequisitionItem.StockRequisitionItem)
                                {

                                    //oPOSRequisition = new POSRequisition();
                                    if (oPOSRequisition.CheckRequisitionItem(oPOSRequisition.RequisitionID, oStockRequisitionItemRow.ProductID))
                                    {
                                        cmd.Dispose();
                                        cmd = DBController.Instance.GetCommand();

                                        sSql = "Update t_StockRequisitionItem SET AuthorizeQty=?,DutyTranNo = ?,DutyPrice = ?,DutyRate = ? where StockRequisitionID=? and ProductID=? ";
                                        cmd.CommandText = sSql;
                                        cmd.CommandType = CommandType.Text;

                                        cmd.Parameters.AddWithValue("AuthorizeQty", oStockRequisitionItemRow.AuthorizeQty);
                                        cmd.Parameters.AddWithValue("DutyTranNo", oStockRequisitionItemRow.DutyTranNo);
                                        cmd.Parameters.AddWithValue("DutyPrice", oStockRequisitionItemRow.DutyPrice);
                                        cmd.Parameters.AddWithValue("DutyRate", oStockRequisitionItemRow.DutyRate);

                                        cmd.Parameters.AddWithValue("StockRequisitionID", oPOSRequisition.RequisitionID);
                                        cmd.Parameters.AddWithValue("ProductID", oStockRequisitionItemRow.ProductID);


                                        cmd.ExecuteNonQuery();
                                        cmd.Dispose();
                                    }
                                    else
                                    {
                                        cmd.Dispose();
                                        cmd = DBController.Instance.GetCommand();

                                        sSql = "Insert Into t_StockRequisitionItem (StockRequisitionID,ProductID,RequisitionQty,AuthorizeQty,DutyTranNo,DutyPrice,DutyRate) Values (?,?,?,?,?,?,?)";
                                        cmd.CommandText = sSql;
                                        cmd.CommandType = CommandType.Text;

                                        cmd.Parameters.AddWithValue("StockRequisitionID", oPOSRequisition.RequisitionID);
                                        cmd.Parameters.AddWithValue("ProductID", oStockRequisitionItemRow.ProductID);
                                        cmd.Parameters.AddWithValue("RequisitionQty", oStockRequisitionItemRow.RequisitingQty);
                                        cmd.Parameters.AddWithValue("AuthorizeQty", oStockRequisitionItemRow.AuthorizeQty);

                                        cmd.Parameters.AddWithValue("DutyTranNo", oStockRequisitionItemRow.DutyTranNo);
                                        cmd.Parameters.AddWithValue("DutyPrice", oStockRequisitionItemRow.DutyPrice);
                                        cmd.Parameters.AddWithValue("DutyRate", oStockRequisitionItemRow.DutyRate);

                                        cmd.ExecuteNonQuery();
                                        cmd.Dispose();

                                    }


                                    AppLogger.LogInfo("Successfully Update Stock Requisition Item Where StockRequisitionID=" + oPOSRequisition.RequisitionID + "");
                                }
                            }
                        }
                        else if (oStockRequisitionRow.Status == (int)Dictionary.StockRequisitionStatus.Reject_By_HO)
                        {
                            ProductBarcode oProductBarcode;
                            POSRequisition _oPOSRequisition;
                            _oPOSRequisition = new POSRequisition();

                            _oPOSRequisition.GetStockRequisitionIDByRequistionNo(oStockRequisitionRow.RequisitionNo);


                            ProductTransferProductSerials oPTPSs = new ProductTransferProductSerials();
                            oPTPSs.GetProductTransferProductSerial(_oPOSRequisition.StockTranID);
                            foreach (ProductTransferProductSerial oPTPS in oPTPSs)
                            {
                                oProductBarcode = new ProductBarcode();

                                oProductBarcode.Status = (int)Dictionary.ProductSerialStatus.Received_at_Outlet;
                                oProductBarcode.ProductSerialNo = oPTPS.ProductSerialNo;
                                oProductBarcode.UpdateProductSerial();

                                //update Vat Paid Data
                                oProductBarcode.UpdateVatPaidProductSerial(oStockRequisitionRow.FromWHID, oPTPS.TradePrice, oPTPS.VAT, (int)Dictionary.ProductStockTranType.TRANSFER, oStockRequisitionRow.RequisitionNo, Convert.ToDateTime(oStockRequisitionRow.RequisitionDate));


                                oProductBarcode.GetProductSerialID(oPTPS.ProductSerialNo);

                                oProductBarcode.DeleteProductSerialHistory(oProductBarcode.ProductStockSerialID);

                            }


                            StockTran oStockTran = new StockTran();
                            oStockTran.DeleteTran(_oPOSRequisition.StockTranID);

                            _oPOSRequisition.StockTranID = -1;
                            _oPOSRequisition.UpdateStockTranID_POS();

                            _oPOSRequisition.RefreshStockRequisitionItem();
                            if (oStockRequisitionRow.RequisitionType != (int)Dictionary.StockRequisitionType.Requisition)
                            {
                                foreach (POSRequisitionItem oitem in _oPOSRequisition)
                                {

                                    ProductStock oProductStock = new ProductStock();
                                    oProductStock.WarehouseID = oSystemInfo.WarehouseID;
                                    oProductStock.ChannelID = oSystemInfo.ChannelID;
                                    oProductStock.ProductID = oitem.ProductID;
                                    oProductStock.Quantity = oitem.RequisitionQty;

                                    oProductStock.UpdateCurrentStock(true);

                                }
                            }

                            AppLogger.LogInfo("Successfully Update Stock Requisition Item Where StockRequisitionID=" + _oPOSRequisition.RequisitionID + "");

                        }

                    }
                    catch (Exception ex)
                    {
                        AppLogger.LogError("Error Updating Stock Requisition /" + ex.Message);
                        throw (ex);
                    }

                }
            }

        }

        ///
        // Sending Customer Tran & Invoice wise Payment for Dealer
        ///
        public void InsertCustomerTran(DSCustomerTransaction oDSCustomerTransaction, int nWarehouseID)
        {
            foreach (DSCustomerTransaction.CustomerTranRow oCustomerTranRow in oDSCustomerTransaction.CustomerTran)
            {
                try
                {
                    DBController.Instance.BeginNewTransaction();
                    ///
                    // Insert in SalesInvoice and SalesInvoiceDetail.
                    ///
                    CustomerTransaction _oCustomerTransaction = new CustomerTransaction();

                    _oCustomerTransaction = GetDataForCustomerTran(_oCustomerTransaction, oCustomerTranRow, oDSCustomerTransaction);

                    if (CheckCustomerTran(_oCustomerTransaction.TranNo))
                    {
                        _oCustomerTransaction.SendCustomerTran(nWarehouseID, false);
                    }


                    //oCustomerTranRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                }
                catch (Exception ex)
                {
                    DBController.Instance.RollbackTransaction();
                    //oCustomerTranRow.IsDownload = (int)Dictionary.YesOrNoStatus.NO;
                }
                DBController.Instance.CommitTran();
            }

        }

        ///
        // Get Data for  Customer Tran and Invoice Wise Payment.
        ///
        public CustomerTransaction GetDataForCustomerTran(CustomerTransaction _oCustomerTransaction, DSCustomerTransaction.CustomerTranRow oCustomerTranRow, DSCustomerTransaction oDSCustomerTransaction)
        {
            DSCustomerTransaction oDSCustomerTransactionDetail = new DSCustomerTransaction();

            _oCustomerTransaction.TranID = oCustomerTranRow.TranID;
            _oCustomerTransaction.TranNo = oCustomerTranRow.TranNo;
            _oCustomerTransaction.CustomerID = oCustomerTranRow.CustomerID;
            _oCustomerTransaction.TranDate = oCustomerTranRow.TranDate;
            _oCustomerTransaction.TranTypeID = oCustomerTranRow.TranTypeID;
            _oCustomerTransaction.Amount = oCustomerTranRow.Amount;
            _oCustomerTransaction.InstrumentNo = oCustomerTranRow.InstrumentNo;
            if (!oCustomerTranRow.IsInstrumentDateNull())
                _oCustomerTransaction.InstrumentDate = oCustomerTranRow.InstrumentDate;

            _oCustomerTransaction.InstrumentType = oCustomerTranRow.InstrumentType;
            _oCustomerTransaction.InstrumentStatus = oCustomerTranRow.InstrumentStatus;
            _oCustomerTransaction.BranchID = oCustomerTranRow.BranchID;
            _oCustomerTransaction.BranchName = oCustomerTranRow.BranchName;
            _oCustomerTransaction.EntryUserID = oCustomerTranRow.EntryUserID;
            _oCustomerTransaction.EntryDate = oCustomerTranRow.EntryDate;
            _oCustomerTransaction.Remarks = oCustomerTranRow.Remarks;
            //_oCustomerTransaction.CustomerTranType.TranSide = oCustomerTranRow.TranSide;
            _oCustomerTransaction.TranSide = oCustomerTranRow.TranSide;

            DataRow[] oDR = oDSCustomerTransaction.InvoiceWisePayment.Select(" CustomerTranID= '" + oCustomerTranRow.TranID + "'");
            oDSCustomerTransactionDetail.Merge(oDR);
            oDSCustomerTransactionDetail.AcceptChanges();

            // = new InvoiceWisePayments();

            foreach (DSCustomerTransaction.InvoiceWisePaymentRow oInvoiceWisePaymentRow in oDSCustomerTransactionDetail.InvoiceWisePayment)
            {

                InvoiceWisePayment _oInvoiceWisePayment = new InvoiceWisePayment();

                _oInvoiceWisePayment.RecordID = Convert.ToInt32(oInvoiceWisePaymentRow.RecordID);
                _oInvoiceWisePayment.CustomerTranID = Convert.ToInt32(oInvoiceWisePaymentRow.CustomerTranID);
                _oInvoiceWisePayment.InvoiceID = oInvoiceWisePaymentRow.InvoiceID;
                _oInvoiceWisePayment.CustomerID = Convert.ToInt32(oInvoiceWisePaymentRow.CustomerID);
                _oInvoiceWisePayment.Amount = oInvoiceWisePaymentRow.Amount;
                _oInvoiceWisePayment.CreateDate = oInvoiceWisePaymentRow.CreateDate;
                _oInvoiceWisePayment.CreateUserID = oInvoiceWisePaymentRow.CreateUserID;
                _oInvoiceWisePayment.InvoiceNo = oInvoiceWisePaymentRow.InvoiceNo;
                _oCustomerTransaction.Add(_oInvoiceWisePayment);
            }
            return _oCustomerTransaction;
        }


        ///
        // Insert Product
        ///
        public void InsertProduct(DSProduct oDSProduct)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Product Insert

            foreach (DSProduct.ProductRow oProductRow in oDSProduct.Product)
            {

                if (CheckProduct(oProductRow.ProductID))
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();
                    sSql = "INSERT INTO t_Product (ProductID,ProductCode,ProductName,ProductDesc,ProductModel,SmallUnitOfMeasure, " +
                    "LargeUnitOfMeasure,UOMConversionFactor,EntryDate,ProductType,ProductGroupID,BrandID,IsActive,HSCodeID, MidUnitOfMeasure, " +
                    "MSRatio,LSRatio, SupplyType,VatApplicable,ProductSBUs,InventoryCategory,ItemCategory,IsBarcodeItem,FeatureTypeID,VATType,PetName,IsVatApplicableonNetPrice " +
                    ") VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                    try
                    {
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("ProductID", oProductRow.ProductID);
                        cmd.Parameters.AddWithValue("ProductCode", oProductRow.ProductCode);
                        cmd.Parameters.AddWithValue("ProductName", oProductRow.ProductName);
                        cmd.Parameters.AddWithValue("ProductDesc", oProductRow.ProductDesc);
                        cmd.Parameters.AddWithValue("ProductModel", oProductRow.ProductModel);
                        cmd.Parameters.AddWithValue("SmallUnitOfMeasure", oProductRow.SmallUnitOfMeasure);
                        cmd.Parameters.AddWithValue("LargeUnitOfMeasure", oProductRow.LargeUnitOfMeasure);
                        cmd.Parameters.AddWithValue("UOMConversionFactor", oProductRow.UOMConversionFactor);
                        cmd.Parameters.AddWithValue("EntryDate", oProductRow.EntryDate);
                        cmd.Parameters.AddWithValue("ProductType", oProductRow.ProductType);
                        cmd.Parameters.AddWithValue("ProductGroupID", oProductRow.ProductGroupID);
                        cmd.Parameters.AddWithValue("BrandID", oProductRow.BrandID);
                        cmd.Parameters.AddWithValue("IsActive", oProductRow.IsActive);
                        if (oProductRow.HSCodeID != -1)
                            cmd.Parameters.AddWithValue("HSCodeID", oProductRow.HSCodeID);
                        else cmd.Parameters.AddWithValue("HSCodeID", null);
                        cmd.Parameters.AddWithValue("MidUnitOfMeasure", oProductRow.MidUnitOfMeasure);
                        if (oProductRow.MSRatio != -1)
                            cmd.Parameters.AddWithValue("MSRatio", oProductRow.MSRatio);
                        else cmd.Parameters.AddWithValue("MSRatio", null);
                        if (oProductRow.LSRatio != -1)
                            cmd.Parameters.AddWithValue("LSRatio", oProductRow.LSRatio);
                        else cmd.Parameters.AddWithValue("LSRatio", null);
                        if (oProductRow.SupplyType != -1)
                            cmd.Parameters.AddWithValue("SupplyType", oProductRow.SupplyType);
                        else cmd.Parameters.AddWithValue("SupplyType", null);
                        if (oProductRow.VatApplicable != -1)
                            cmd.Parameters.AddWithValue("VatApplicable", oProductRow.VatApplicable);
                        else cmd.Parameters.AddWithValue("VatApplicable", null);
                        cmd.Parameters.AddWithValue("ProductSBUs", oProductRow.ProductSBUs);
                        if (oProductRow.InventoryCategory != -1)
                            cmd.Parameters.AddWithValue("InventoryCategory", oProductRow.InventoryCategory);
                        else cmd.Parameters.AddWithValue("InventoryCategory", null);
                        if (oProductRow.ItemCategory != -1)
                            cmd.Parameters.AddWithValue("ItemCategory", oProductRow.ItemCategory);
                        else cmd.Parameters.AddWithValue("ItemCategory", null);
                        cmd.Parameters.AddWithValue("IsBarcodeItem", oProductRow.IsBarcodeItem);
                        cmd.Parameters.AddWithValue("FeatureTypeID", oProductRow.FeatureTypeID);
                        cmd.Parameters.AddWithValue("VATType", oProductRow.VATType);

                        cmd.Parameters.AddWithValue("PetName", oProductRow.PetName);
                        cmd.Parameters.AddWithValue("IsVatApplicableonNetPrice", oProductRow.IsVatApplicableonNetPrice);

                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
                else
                {
                    try
                    {
                        cmd.Dispose();
                        cmd = DBController.Instance.GetCommand();

                        sSql = "Update  t_Product Set ProductCode=?,ProductName=?,ProductDesc=?,ProductModel=?,SmallUnitOfMeasure=?,LargeUnitOfMeasure=?, "
                               + " UOMConversionFactor=?,EntryDate=?,ProductType=?,ProductGroupID=?,BrandID=?,IsActive=?,HSCodeID=?,MidUnitOfMeasure=?,MSRatio=?,LSRatio=?, "
                               + " SupplyType=?,VatApplicable=?,ProductSBUs=?,InventoryCategory=?,ItemCategory=?, IsBarcodeItem=?, FeatureTypeID = ?, VATType = ?,PetName = ?,IsVatApplicableonNetPrice = ? "
                               + " Where ProductID=?";

                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("ProductCode", oProductRow.ProductCode);
                        cmd.Parameters.AddWithValue("ProductName", oProductRow.ProductName);
                        cmd.Parameters.AddWithValue("ProductDesc", oProductRow.ProductDesc);
                        cmd.Parameters.AddWithValue("ProductModel", oProductRow.ProductModel);
                        cmd.Parameters.AddWithValue("SmallUnitOfMeasure", oProductRow.SmallUnitOfMeasure);
                        cmd.Parameters.AddWithValue("LargeUnitOfMeasure", oProductRow.LargeUnitOfMeasure);
                        cmd.Parameters.AddWithValue("UOMConversionFactor", oProductRow.UOMConversionFactor);
                        cmd.Parameters.AddWithValue("EntryDate", oProductRow.EntryDate);
                        cmd.Parameters.AddWithValue("ProductType", oProductRow.ProductType);
                        cmd.Parameters.AddWithValue("ProductGroupID", oProductRow.ProductGroupID);
                        cmd.Parameters.AddWithValue("BrandID", oProductRow.BrandID);
                        cmd.Parameters.AddWithValue("IsActive", oProductRow.IsActive);
                        if (oProductRow.HSCodeID != -1)
                            cmd.Parameters.AddWithValue("HSCodeID", oProductRow.HSCodeID);
                        else cmd.Parameters.AddWithValue("HSCodeID", null);
                        cmd.Parameters.AddWithValue("MidUnitOfMeasure", oProductRow.MidUnitOfMeasure);
                        if (oProductRow.MSRatio != -1)
                            cmd.Parameters.AddWithValue("MSRatio", oProductRow.MSRatio);
                        else cmd.Parameters.AddWithValue("MSRatio", null);
                        if (oProductRow.LSRatio != -1)
                            cmd.Parameters.AddWithValue("LSRatio", oProductRow.LSRatio);
                        else cmd.Parameters.AddWithValue("LSRatio", null);
                        if (oProductRow.SupplyType != -1)
                            cmd.Parameters.AddWithValue("SupplyType", oProductRow.SupplyType);
                        else cmd.Parameters.AddWithValue("SupplyType", null);
                        if (oProductRow.VatApplicable != -1)
                            cmd.Parameters.AddWithValue("VatApplicable", oProductRow.VatApplicable);
                        else cmd.Parameters.AddWithValue("VatApplicable", null);
                        cmd.Parameters.AddWithValue("ProductSBUs", oProductRow.ProductSBUs);
                        if (oProductRow.InventoryCategory != -1)
                            cmd.Parameters.AddWithValue("InventoryCategory", oProductRow.InventoryCategory);
                        else cmd.Parameters.AddWithValue("InventoryCategory", null);
                        if (oProductRow.ItemCategory != -1)
                            cmd.Parameters.AddWithValue("ItemCategory", oProductRow.ItemCategory);
                        else cmd.Parameters.AddWithValue("ItemCategory", null);
                        cmd.Parameters.AddWithValue("IsBarcodeItem", oProductRow.IsBarcodeItem);
                        cmd.Parameters.AddWithValue("FeatureTypeID", oProductRow.FeatureTypeID);
                        cmd.Parameters.AddWithValue("VATType", oProductRow.VATType);
                        cmd.Parameters.AddWithValue("PetName", oProductRow.PetName);
                        cmd.Parameters.AddWithValue("IsVatApplicableonNetPrice", oProductRow.IsVatApplicableonNetPrice);

                        cmd.Parameters.AddWithValue("ProductID", oProductRow.ProductID);

                        int nCount = cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
            }
        }


        public void InsertProductFactory(DSProduct oDSProduct)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Product Insert

            foreach (DSProduct.ProductRow oProductRow in oDSProduct.Product)
            {

                if (CheckProduct(oProductRow.ProductID))
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();
                    sSql = "INSERT INTO t_Product (ProductID,ProductCode,ProductName,ProductDesc,ProductModel,ProductType,IsActive,SupplyType,VATApplicable, " +
                           "InventoryCategory,ItemCategory,IsBarcodeItem,VATType,PetName,AGID,AGName,ASGID,ASGName,MAGID,MAGName,PGID, " +
                           "PGName,BrandID,BrandDesc,CostPrice,NSP,RSP,VAT,TradePrice) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                    try
                    {
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;
                        cmd.CommandTimeout = 0;
                        
                        cmd.Parameters.AddWithValue("ProductID", oProductRow.ProductID);
                        cmd.Parameters.AddWithValue("ProductCode", oProductRow.ProductCode);
                        cmd.Parameters.AddWithValue("ProductName", oProductRow.ProductName);
                        cmd.Parameters.AddWithValue("ProductDesc", oProductRow.ProductDesc);
                        cmd.Parameters.AddWithValue("ProductModel", oProductRow.ProductModel);
                        cmd.Parameters.AddWithValue("ProductType", oProductRow.ProductType);


                        cmd.Parameters.AddWithValue("IsActive", oProductRow.IsActive);
                        if (oProductRow.SupplyType != -1)
                            cmd.Parameters.AddWithValue("SupplyType", oProductRow.SupplyType);
                        else cmd.Parameters.AddWithValue("SupplyType", null);

                        if (oProductRow.VatApplicable != -1)
                            cmd.Parameters.AddWithValue("VatApplicable", oProductRow.VatApplicable);
                        else cmd.Parameters.AddWithValue("VatApplicable", null);

                        if (oProductRow.InventoryCategory != -1)
                            cmd.Parameters.AddWithValue("InventoryCategory", oProductRow.InventoryCategory);
                        else cmd.Parameters.AddWithValue("InventoryCategory", null);

                        if (oProductRow.ItemCategory != -1)
                            cmd.Parameters.AddWithValue("ItemCategory", oProductRow.ItemCategory);
                        else cmd.Parameters.AddWithValue("ItemCategory", null);

                        cmd.Parameters.AddWithValue("IsBarcodeItem", oProductRow.IsBarcodeItem);
                        cmd.Parameters.AddWithValue("VATType", oProductRow.VATType);
                        cmd.Parameters.AddWithValue("PetName", oProductRow.PetName);
                        cmd.Parameters.AddWithValue("AGID", oProductRow.AGID);
                        cmd.Parameters.AddWithValue("ASGName", oProductRow.ASGName);
                        cmd.Parameters.AddWithValue("ASGID", oProductRow.ASGID);
                        cmd.Parameters.AddWithValue("ASGName", oProductRow.ASGName);
                        cmd.Parameters.AddWithValue("MAGID", oProductRow.MAGID);
                        cmd.Parameters.AddWithValue("MAGName", oProductRow.MAGName);
                        cmd.Parameters.AddWithValue("PGID", oProductRow.PGID);
                        cmd.Parameters.AddWithValue("PGName", oProductRow.PGName);
                        cmd.Parameters.AddWithValue("BrandID", oProductRow.BrandID);
                        cmd.Parameters.AddWithValue("BrandDesc", oProductRow.BrandDesc);
                        cmd.Parameters.AddWithValue("CostPrice", oProductRow.CostPrice);
                        cmd.Parameters.AddWithValue("NSP", oProductRow.NSP);
                        cmd.Parameters.AddWithValue("RSP", oProductRow.RSP);
                        cmd.Parameters.AddWithValue("VAT", oProductRow.VAT);
                        cmd.Parameters.AddWithValue("TradePrice", oProductRow.TradePrice);


                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
                else
                {
                    try
                    {
                        cmd.Dispose();
                        cmd = DBController.Instance.GetCommand();

                        sSql = "Update  t_Product Set ProductCode = ?,ProductName = ?,ProductDesc = ?,ProductModel = ?,ProductType = ?,IsActive = ?,SupplyType = ?,  " +
                                "VATApplicable = ?,InventoryCategory = ?,ItemCategory = ?,IsBarcodeItem = ?,VATType = ?,PetName = ?,AGID = ?,AGName = ?,  " +
                                "ASGID = ?,ASGName = ?,MAGID = ?,MAGName = ?,PGID = ?,PGName = ?,BrandID = ?,BrandDesc = ?,CostPrice = ?,NSP = ?,RSP = ?,  " +
                                "VAT = ?,TradePrice = ? Where ProductID = ?";

                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;
                        cmd.CommandTimeout = 0;

                        cmd.Parameters.AddWithValue("ProductCode", oProductRow.ProductCode);
                        cmd.Parameters.AddWithValue("ProductName", oProductRow.ProductName);
                        cmd.Parameters.AddWithValue("ProductDesc", oProductRow.ProductDesc);
                        cmd.Parameters.AddWithValue("ProductModel", oProductRow.ProductModel);
                        cmd.Parameters.AddWithValue("ProductType", oProductRow.ProductType);
                        cmd.Parameters.AddWithValue("IsActive", oProductRow.IsActive);
                        if (oProductRow.SupplyType != -1)
                            cmd.Parameters.AddWithValue("SupplyType", oProductRow.SupplyType);
                        else cmd.Parameters.AddWithValue("SupplyType", null);
                        if (oProductRow.VatApplicable != -1)
                            cmd.Parameters.AddWithValue("VatApplicable", oProductRow.VatApplicable);
                        else cmd.Parameters.AddWithValue("VatApplicable", null);
                        if (oProductRow.InventoryCategory != -1)
                            cmd.Parameters.AddWithValue("InventoryCategory", oProductRow.InventoryCategory);
                        else cmd.Parameters.AddWithValue("InventoryCategory", null);
                        if (oProductRow.ItemCategory != -1)
                            cmd.Parameters.AddWithValue("ItemCategory", oProductRow.ItemCategory);
                        else cmd.Parameters.AddWithValue("ItemCategory", null);
                        cmd.Parameters.AddWithValue("IsBarcodeItem", oProductRow.IsBarcodeItem);
                        cmd.Parameters.AddWithValue("VATType", oProductRow.VATType);
                        cmd.Parameters.AddWithValue("PetName", oProductRow.PetName);
                        cmd.Parameters.AddWithValue("AGID", oProductRow.AGID);
                        cmd.Parameters.AddWithValue("ASGName", oProductRow.ASGName);
                        cmd.Parameters.AddWithValue("ASGID", oProductRow.ASGID);
                        cmd.Parameters.AddWithValue("ASGName", oProductRow.ASGName);
                        cmd.Parameters.AddWithValue("MAGID", oProductRow.MAGID);
                        cmd.Parameters.AddWithValue("MAGName", oProductRow.MAGName);
                        cmd.Parameters.AddWithValue("PGID", oProductRow.PGID);
                        cmd.Parameters.AddWithValue("PGName", oProductRow.PGName);
                        cmd.Parameters.AddWithValue("BrandID", oProductRow.BrandID);
                        cmd.Parameters.AddWithValue("BrandDesc", oProductRow.BrandDesc);
                        cmd.Parameters.AddWithValue("CostPrice", oProductRow.CostPrice);
                        cmd.Parameters.AddWithValue("NSP", oProductRow.NSP);
                        cmd.Parameters.AddWithValue("RSP", oProductRow.RSP);
                        cmd.Parameters.AddWithValue("VAT", oProductRow.VAT);
                        cmd.Parameters.AddWithValue("TradePrice", oProductRow.TradePrice);

                        cmd.Parameters.AddWithValue("ProductID", oProductRow.ProductID);

                        int nCount = cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
            }
        }


        public void InsertProductFeatureType(DSProduct oDSProductFeatureType)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Product Insert Feature Type

            foreach (DSProduct.ProductFeatureTypeRow oProductFeatureTypeRow in oDSProductFeatureType.ProductFeatureType)
            {

                if (CheckProductFeatureType(oProductFeatureTypeRow.FeatureTypeID))
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();
                    sSql = "INSERT INTO t_ProductFeatureType (FeatureTypeID,FeatureTypeName,IsActive, " +
                            "CreateDate,CreateUserID,UpdateDate,UpdateUserID) VALUES(?,?,?,?,?,?,?)";

                    try
                    {
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.AddWithValue("FeatureTypeID", oProductFeatureTypeRow.FeatureTypeID);
                        cmd.Parameters.AddWithValue("FeatureTypeName", oProductFeatureTypeRow.FeatureTypeName);
                        cmd.Parameters.AddWithValue("IsActive", oProductFeatureTypeRow.IsActive);
                        cmd.Parameters.AddWithValue("CreateDate", oProductFeatureTypeRow.CreateDate);
                        cmd.Parameters.AddWithValue("CreateUserID", oProductFeatureTypeRow.CreateUserID);
                        cmd.Parameters.AddWithValue("UpdateDate", null);
                        cmd.Parameters.AddWithValue("UpdateUserID", null);


                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
                else
                {
                    try
                    {
                        cmd.Dispose();
                        cmd = DBController.Instance.GetCommand();

                        sSql = "Update t_ProductFeatureType Set FeatureTypeName=?, IsActive=?, CreateDate=?, CreateUserID=?, UpdateDate=?, UpdateUserID=? Where FeatureTypeID=?";

                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("FeatureTypeName", oProductFeatureTypeRow.FeatureTypeName);
                        cmd.Parameters.AddWithValue("IsActive", oProductFeatureTypeRow.IsActive);
                        cmd.Parameters.AddWithValue("CreateDate", oProductFeatureTypeRow.CreateDate);
                        cmd.Parameters.AddWithValue("CreateUserID", oProductFeatureTypeRow.CreateUserID);
                        if (oProductFeatureTypeRow.UpdateDate != null)
                            cmd.Parameters.AddWithValue("UpdateDate", oProductFeatureTypeRow.UpdateDate);
                        else cmd.Parameters.AddWithValue("UpdateDate", null);
                        if (oProductFeatureTypeRow.UpdateUserID != null)
                            cmd.Parameters.AddWithValue("UpdateUserID", oProductFeatureTypeRow.UpdateUserID);
                        else cmd.Parameters.AddWithValue("UpdateUserID", null);
                        cmd.Parameters.AddWithValue("FeatureTypeID", oProductFeatureTypeRow.FeatureTypeID);

                        int nCount = cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
            }
        }


        public void InsertNewVatActivation(DSBasicData oDSNewVatActivation)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Product New Vat Activation Data

            foreach (DSBasicData.NewVatActivationRow oNewVatActivationRow in oDSNewVatActivation.NewVatActivation)
            {

                if (CheckNewVatActivation(oNewVatActivationRow.ID))
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();
                    sSql = "INSERT INTO t_NewVatActivation (ID,IsNewVat) VALUES(?,?)";

                    try
                    {
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.AddWithValue("ID", oNewVatActivationRow.ID);
                        cmd.Parameters.AddWithValue("IsNewVat", oNewVatActivationRow.IsNewVat);

                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
                else
                {
                    try
                    {
                        cmd.Dispose();
                        cmd = DBController.Instance.GetCommand();

                        sSql = "Update t_NewVatActivation Set IsNewVat=? Where ID=?";

                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("ID", oNewVatActivationRow.ID);
                        cmd.Parameters.AddWithValue("IsNewVat", oNewVatActivationRow.IsNewVat);

                        int nCount = cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
            }
        }

        public void InsertBankGuarenty(DSBank oDSBankGuarenty)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            ///Bank Guarenty

            foreach (DSBank.BankGuarantyRow oBankGuarantyRow in oDSBankGuarenty.BankGuaranty)
            {

                if (CheckBG(oBankGuarantyRow.BGID))
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();
                    sSql = "INSERT INTO t_CustomerBankGuaranty (BGID,CustomerID,BankID,EffectiveDate,ExpiryDate,BGAmount,IsActive, " +
                           "Remarks,CreateDate,CreateuserID,UpdateDate,UpdateUserID) VALUES(?,?,?,?,?,?,?,?,?,?,?,?)";

                    try
                    {
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.AddWithValue("BGID", oBankGuarantyRow.BGID);
                        cmd.Parameters.AddWithValue("CustomerID", oBankGuarantyRow.CustomerID);
                        cmd.Parameters.AddWithValue("BankID", oBankGuarantyRow.BankID);
                        cmd.Parameters.AddWithValue("EffectiveDate", oBankGuarantyRow.EffectiveDate);
                        cmd.Parameters.AddWithValue("ExpiryDate", oBankGuarantyRow.ExpiryDate);
                        cmd.Parameters.AddWithValue("BGAmount", oBankGuarantyRow.BGAmount);
                        cmd.Parameters.AddWithValue("IsActive", oBankGuarantyRow.IsActive);
                        if (oBankGuarantyRow.Remarks != null)
                        {
                            cmd.Parameters.AddWithValue("Remarks", oBankGuarantyRow.Remarks);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("Remarks", "");
                        }
                        cmd.Parameters.AddWithValue("CreateDate", oBankGuarantyRow.CreateDate);
                        cmd.Parameters.AddWithValue("CreateuserID", oBankGuarantyRow.CreateuserID);
                        cmd.Parameters.AddWithValue("UpdateDate", null);
                        cmd.Parameters.AddWithValue("UpdateUserID", null);


                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
                else
                {
                    try
                    {
                        cmd.Dispose();
                        cmd = DBController.Instance.GetCommand();

                        sSql = "Update t_CustomerBankGuaranty Set CustomerID =?,BankID =?,EffectiveDate =?,ExpiryDate =?,BGAmount =?,IsActive =?, " +
                               "Remarks =?,UpdateDate =?,UpdateUserID =?  Where BGID =?";

                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("CustomerID", oBankGuarantyRow.CustomerID);
                        cmd.Parameters.AddWithValue("BankID", oBankGuarantyRow.BankID);
                        cmd.Parameters.AddWithValue("EffectiveDate", oBankGuarantyRow.EffectiveDate);
                        cmd.Parameters.AddWithValue("ExpiryDate", oBankGuarantyRow.ExpiryDate);
                        cmd.Parameters.AddWithValue("BGAmount", oBankGuarantyRow.BGAmount);
                        cmd.Parameters.AddWithValue("IsActive", oBankGuarantyRow.IsActive);
                        if (oBankGuarantyRow.Remarks != null)
                        {
                            cmd.Parameters.AddWithValue("Remarks", oBankGuarantyRow.Remarks);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("Remarks", "");
                        }
                        if (oBankGuarantyRow.UpdateDate != null)
                        {
                            cmd.Parameters.AddWithValue("UpdateDate", oBankGuarantyRow.UpdateDate);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("UpdateDate", null);
                        }
                        if (oBankGuarantyRow.UpdateUserID != null)
                        {
                            cmd.Parameters.AddWithValue("UpdateUserID", oBankGuarantyRow.UpdateUserID);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("UpdateUserID", null);
                        }

                        cmd.Parameters.AddWithValue("BGID", oBankGuarantyRow.BGID);

                        int nCount = cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
            }
        }

        public void InsertCustomerAccount(DSCustomer oDSCustomerAccount)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            ///Bank Guarenty

            foreach (DSCustomer.CustomerRow oCustomerRow in oDSCustomerAccount.Customer)
            {

                if (CheckCustomerAccount(oCustomerRow.CustomerID))
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();
                    sSql = "INSERT INTO t_CustomerAccount (CustomerID,CurrentBalance) VALUES(?,?)";

                    try
                    {
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.AddWithValue("CustomerID", oCustomerRow.CustomerID);
                        cmd.Parameters.AddWithValue("CurrentBalance", oCustomerRow.CurrentBalance);

                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
                else
                {
                    try
                    {
                        cmd.Dispose();
                        cmd = DBController.Instance.GetCommand();

                        sSql = "Update t_CustomerAccount Set CurrentBalance = ? Where CustomerID = ?";

                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("CurrentBalance", oCustomerRow.CurrentBalance);
                        cmd.Parameters.AddWithValue("CustomerID", oCustomerRow.CustomerID);

                        int nCount = cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
            }
        }

        public void InsertTDActivation(DSBasicData oDSTDActivation)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            ///TD Activation 

            foreach (DSBasicData.TDActivationRow oTDActivationRow in oDSTDActivation.TDActivation)
            {

                if (CheckCustomerAccount(oTDActivationRow.ActivationID))
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();
                    sSql = "INSERT INTO t_TDActivation (ActivationID,ActivationName,StartDate,EndDate,CreateDate,CreateUserID,UpdateDate,UpdateUserID,IsActive) VALUES(?,?,?,?,?,?,?,?,?)";

                    try
                    {
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.AddWithValue("ActivationID", oTDActivationRow.ActivationID);
                        cmd.Parameters.AddWithValue("ActivationName", oTDActivationRow.ActivationName);
                        cmd.Parameters.AddWithValue("StartDate", oTDActivationRow.StartDate);
                        cmd.Parameters.AddWithValue("EndDate", oTDActivationRow.EndDate);
                        cmd.Parameters.AddWithValue("CreateDate", oTDActivationRow.CreateDate);
                        cmd.Parameters.AddWithValue("CreateUserID", oTDActivationRow.CreateUserID);
                        cmd.Parameters.AddWithValue("UpdateDate", null);
                        cmd.Parameters.AddWithValue("UpdateUserID", null);
                        cmd.Parameters.AddWithValue("IsActive", oTDActivationRow.IsActive);


                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
                else
                {
                    try
                    {
                        cmd.Dispose();
                        cmd = DBController.Instance.GetCommand();

                        sSql = "Update t_TDActivation Set ActivationName = ?, StartDate = ?, EndDate = ?, IsActive = ? Where ActivationID = ?";

                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.AddWithValue("ActivationName", oTDActivationRow.ActivationName);
                        cmd.Parameters.AddWithValue("StartDate", oTDActivationRow.StartDate);
                        cmd.Parameters.AddWithValue("EndDate", oTDActivationRow.EndDate);
                        cmd.Parameters.AddWithValue("IsActive", oTDActivationRow.IsActive);

                        int nCount = cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
            }
        }

        public void InsertPettyCashExpenseHead(DSBasicData oDSPettyCashExpenseHead)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            ///Petty Cash Expense Head 

            foreach (DSBasicData.PettyCashExpenseHeadRow oPettyCashExpenseHeadRow in oDSPettyCashExpenseHead.PettyCashExpenseHead)
            {


                if (CheckPettyCashExpenseHead(oPettyCashExpenseHeadRow.ExpenseHeadID))
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();
                    sSql = "INSERT INTO t_PettyCashExpenseHead (ExpenseHeadID,Description,CreateDate,CreateUserID,IsActive) VALUES(?,?,?,?,?)";

                    try
                    {
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.AddWithValue("ExpenseHeadID", oPettyCashExpenseHeadRow.ExpenseHeadID);
                        cmd.Parameters.AddWithValue("Description", oPettyCashExpenseHeadRow.Description);
                        cmd.Parameters.AddWithValue("CreateDate", oPettyCashExpenseHeadRow.CreateDate);
                        cmd.Parameters.AddWithValue("CreateUserID", oPettyCashExpenseHeadRow.CreateUserID);
                        cmd.Parameters.AddWithValue("IsActive", oPettyCashExpenseHeadRow.IsActive);


                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
                else
                {
                    try
                    {
                        cmd.Dispose();
                        cmd = DBController.Instance.GetCommand();

                        sSql = "Update t_PettyCashExpenseHead Set Description = ?,CreateDate = ?,CreateUserID = ?, IsActive = ? Where ExpenseHeadID = ?";

                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("Description", oPettyCashExpenseHeadRow.Description);
                        cmd.Parameters.AddWithValue("CreateDate", oPettyCashExpenseHeadRow.CreateDate);
                        cmd.Parameters.AddWithValue("CreateUserID", oPettyCashExpenseHeadRow.CreateUserID);
                        cmd.Parameters.AddWithValue("IsActive", oPettyCashExpenseHeadRow.IsActive);
                        cmd.Parameters.AddWithValue("ExpenseHeadID", oPettyCashExpenseHeadRow.ExpenseHeadID);

                        int nCount = cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
            }
        }

        public void InsertPromoDiscountSpecialAuthority(DSBasicData oDSPromoDiscountSpecialAuthority)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            ///Promo Discount Special Authority

            foreach (DSBasicData.PromoDiscountSpecialAuthorityRow oPromoDiscountSpecialAuthorityRow in oDSPromoDiscountSpecialAuthority.PromoDiscountSpecialAuthority)
            {

                if (CheckPromoDiscountSpecialAuthority(oPromoDiscountSpecialAuthorityRow.AuthorityID))
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();
                    sSql = "INSERT INTO t_PromoDiscountSpecialAuthority (AuthorityID,EmployeeID,EmployeeName,CreateDate,CreateUserID,IsActive,Sort) VALUES(?,?,?,?,?,?,?)";

                    try
                    {
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.AddWithValue("AuthorityID", oPromoDiscountSpecialAuthorityRow.AuthorityID);
                        cmd.Parameters.AddWithValue("EmployeeID", oPromoDiscountSpecialAuthorityRow.EmployeeID);
                        cmd.Parameters.AddWithValue("EmployeeName", oPromoDiscountSpecialAuthorityRow.EmployeeName);
                        cmd.Parameters.AddWithValue("CreateDate", oPromoDiscountSpecialAuthorityRow.CreateDate);
                        cmd.Parameters.AddWithValue("CreateUserID", oPromoDiscountSpecialAuthorityRow.CreateUserID);
                        cmd.Parameters.AddWithValue("IsActive", oPromoDiscountSpecialAuthorityRow.IsActive);
                        cmd.Parameters.AddWithValue("Sort", oPromoDiscountSpecialAuthorityRow.Sort);


                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
                else
                {
                    try
                    {
                        cmd.Dispose();
                        cmd = DBController.Instance.GetCommand();

                        sSql = "Update t_PromoDiscountSpecialAuthority Set EmployeeID = ?, EmployeeName = ?, CreateDate = ?, CreateUserID = ?, IsActive = ?, Sort = ? Where AuthorityID = ?";

                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("EmployeeID", oPromoDiscountSpecialAuthorityRow.EmployeeID);
                        cmd.Parameters.AddWithValue("EmployeeName", oPromoDiscountSpecialAuthorityRow.EmployeeName);
                        cmd.Parameters.AddWithValue("CreateDate", oPromoDiscountSpecialAuthorityRow.CreateDate);
                        cmd.Parameters.AddWithValue("CreateUserID", oPromoDiscountSpecialAuthorityRow.CreateUserID);
                        cmd.Parameters.AddWithValue("IsActive", oPromoDiscountSpecialAuthorityRow.IsActive);
                        cmd.Parameters.AddWithValue("Sort", oPromoDiscountSpecialAuthorityRow.Sort);
                        cmd.Parameters.AddWithValue("AuthorityID", oPromoDiscountSpecialAuthorityRow.AuthorityID);

                        int nCount = cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
            }
        }
        public void InsertPromoDiscountAllData(DSPromotion oDSPromoDiscount, string sTableName, int nWHID)
        {
            try
            {
                foreach (DSPromotion.PromoDiscountRow oPromoDiscountRow in oDSPromoDiscount.PromoDiscount)
                {
                    if (sTableName == "t_PromoDiscountBank")
                    {
                        PromoDiscountBank oPromoDiscountBank = new PromoDiscountBank();
                        oPromoDiscountBank.BankDiscountID = oPromoDiscountRow.DiscountID;
                        oPromoDiscountBank.BankID = oPromoDiscountRow.BankID;
                        oPromoDiscountBank.AGID = oPromoDiscountRow.AGID;
                        oPromoDiscountBank.BrandID = oPromoDiscountRow.BrandID;
                        oPromoDiscountBank.DiscountPercent = oPromoDiscountRow.DiscountPercent;
                        oPromoDiscountBank.IsActive = oPromoDiscountRow.IsActive;
                        oPromoDiscountBank.Status = oPromoDiscountRow.Status;
                        oPromoDiscountBank.FromDate = oPromoDiscountRow.FromDate;
                        oPromoDiscountBank.ToDate = oPromoDiscountRow.ToDate;
                        oPromoDiscountBank.CreateUserID = oPromoDiscountRow.CreateUserID;
                        oPromoDiscountBank.CreateDate = oPromoDiscountRow.CreateDate;
                        if (!oPromoDiscountRow.IsApproveUserIDNull())
                            oPromoDiscountBank.ApproveUserID = oPromoDiscountRow.ApproveUserID;
                        if (!oPromoDiscountRow.IsApproveDateNull())
                            oPromoDiscountBank.ApproveDate = oPromoDiscountRow.ApproveDate;
                        if (!oPromoDiscountRow.IsUpdateUserIDNull())
                            oPromoDiscountBank.UpdateUserID = oPromoDiscountRow.UpdateUserID;
                        if (!oPromoDiscountRow.IsUpdateDateNull())
                            oPromoDiscountBank.UpdateDate = oPromoDiscountRow.UpdateDate;

                        if (!oPromoDiscountRow.IsPaymentModeIDNull())
                            oPromoDiscountBank.PaymentModeID = oPromoDiscountRow.PaymentModeID;
                        if (!oPromoDiscountRow.IsMaxDiscountAmountNull())
                            oPromoDiscountBank.MaxDiscountAmount = oPromoDiscountRow.MaxDiscountAmount;
                        if (!oPromoDiscountRow.IsIsBankDiscountNull())
                            oPromoDiscountBank.IsBankDiscount = oPromoDiscountRow.IsBankDiscount;
                        if (!oPromoDiscountRow.IsCardTypeNull())
                            oPromoDiscountBank.CardType = oPromoDiscountRow.CardType;

                        if (CheckPromoDiscountData(sTableName, oPromoDiscountBank.BankDiscountID))
                        {
                            oPromoDiscountBank.AddForPOS();
                            oPromoDiscountBank.MaxBankDiscountID = oPromoDiscountBank.GetMaxID();
                            oPromoDiscountBank.IsActive = (int)Dictionary.IsActive.InActive;
                            oPromoDiscountBank.UpdateBankDiscountPOS();
                            AppLogger.LogInfo("Successfully Add Promo Discount Bank (t_PromoDiscountBank)(BankDiscountID=" + oPromoDiscountRow.DiscountID + " and WHID=" + nWHID + ")");
                        }
                        else
                        {
                            oPromoDiscountBank.Edit();
                            //oPromoDiscountBank.UpdateBankDiscount();
                            AppLogger.LogInfo("Successfully Update Promo Discount Bank (t_PromoDiscountBank)(BankDiscountID=" + oPromoDiscountRow.DiscountID + " and WHID=" + nWHID + ")");
                        }

                        /////Discount Contribution
                        //DSPromotion oDSPromoDiscountContribution = new DSPromotion();
                        
                        //DataRow[] oDRPromoDiscountContribution = oDSPromoDiscount.PromoDiscountContribution.Select(" BankDiscountID= '" + oPromoDiscountRow.DiscountID + "'");
                        //oDSPromoDiscountContribution.Merge(oDRPromoDiscountContribution);
                        //oDSPromoDiscountContribution.PromoDiscountContribution.AcceptChanges();
                        
                        //try
                        //{
                        //    foreach (DSPromotion.PromoDiscountContributionRow oPromoDiscountContributionRow in oDSPromoDiscountContribution.PromoDiscountContribution)
                        //    {
                        //        PromoDiscountContributor oPromoDiscountContributor = new PromoDiscountContributor();
                                
                        //        oPromoDiscountContributor.ConsumerPromoID = oPromoDiscountContributionRow.ConsumerPromoID;
                        //        oPromoDiscountContributor.DiscountContributorID = oPromoDiscountContributionRow.DiscountContributorID;
                        //        oPromoDiscountContributor.Amount = oPromoDiscountContributionRow.Amount;
                        //        oPromoDiscountContributor.AddTPDiscountContribution();
                                
                        //    }
                           
                        //    AppLogger.LogInfo("Successfully Add Bank Discount Contribution (t_PromoDiscountBankContribution)(BankDiscountID=" + oPromoDiscountBank.BankDiscountID + " and WHID=" + nWHID + ")");
                            
                        //}
                        //catch (Exception ex)
                        //{
                           
                        //    AppLogger.LogInfo("Error Adding Trade Promo (t_PromoTPWarehouse)(BankDiscountID=" + oPromoDiscountBank.BankDiscountID + " and WHID=" + nWHID + ")");
                            
                        //    DBController.Instance.RollbackTransaction();
                        //    throw (ex);

                        //}
                    }
                    else if (sTableName == "t_PromoDiscountASGBrandEMI")
                    {
                        DiscountASGBrandEMI oDiscountASGBrandEMI = new DiscountASGBrandEMI();
                        oDiscountASGBrandEMI.ID = oPromoDiscountRow.DiscountID;
                        oDiscountASGBrandEMI.AGID = oPromoDiscountRow.AGID;
                        oDiscountASGBrandEMI.BrandID = oPromoDiscountRow.BrandID;
                        oDiscountASGBrandEMI.EMITenureID = oPromoDiscountRow.EMITenureID;
                        oDiscountASGBrandEMI.IsActive = oPromoDiscountRow.IsActive;
                        oDiscountASGBrandEMI.Status = oPromoDiscountRow.Status;
                        oDiscountASGBrandEMI.EffectiveDate = oPromoDiscountRow.EffectiveDate;
                        oDiscountASGBrandEMI.CreateUserID = oPromoDiscountRow.CreateUserID;
                        oDiscountASGBrandEMI.CreateDate = oPromoDiscountRow.CreateDate;
                        if (!oPromoDiscountRow.IsApproveUserIDNull())
                            oDiscountASGBrandEMI.ApproveUserID = oPromoDiscountRow.ApproveUserID;
                        if (!oPromoDiscountRow.IsApproveDateNull())
                            oDiscountASGBrandEMI.ApproveDate = oPromoDiscountRow.ApproveDate;
                        if (!oPromoDiscountRow.IsUpdateUserIDNull())
                            oDiscountASGBrandEMI.UpdateUserID = oPromoDiscountRow.UpdateUserID;
                        if (!oPromoDiscountRow.IsUpdateDateNull())
                            oDiscountASGBrandEMI.UpdateDate = oPromoDiscountRow.UpdateDate;
                        if (CheckPromoDiscountData(sTableName, oDiscountASGBrandEMI.ID))
                        {
                            oDiscountASGBrandEMI.AddForPOS();
                            AppLogger.LogInfo("Successfully Add Promo Discount ASG Brand EMI (t_PromoDiscountASGBrandEMI)(BankDiscountID=" + oPromoDiscountRow.DiscountID + " and WHID=" + nWHID + ")");
                        }
                        else
                        {
                            oDiscountASGBrandEMI.EditForPOS();
                            AppLogger.LogInfo("Successfully Update Promo Discount ASG Brand EMI (t_PromoDiscountASGBrandEMI)(BankDiscountID=" + oPromoDiscountRow.DiscountID + " and WHID=" + nWHID + ")");
                        }
                    }
                    else if (sTableName == "t_PromoDiscountB2B")
                    {
                        PromoDiscountB2B oPromoDiscountB2B = new PromoDiscountB2B();
                        oPromoDiscountB2B.B2BDiscountID = oPromoDiscountRow.DiscountID;
                        oPromoDiscountB2B.CustomerID = oPromoDiscountRow.CustomerID;
                        oPromoDiscountB2B.DiscountPercentage = oPromoDiscountRow.DiscountPercent;
                        oPromoDiscountB2B.IsActive = oPromoDiscountRow.IsActive;
                        oPromoDiscountB2B.Status = oPromoDiscountRow.Status;
                        oPromoDiscountB2B.EffectiveDate = oPromoDiscountRow.EffectiveDate;
                        oPromoDiscountB2B.CreateUserID = oPromoDiscountRow.CreateUserID;
                        oPromoDiscountB2B.CreateUserDate = oPromoDiscountRow.CreateDate;
                        if (!oPromoDiscountRow.IsApproveUserIDNull())
                            oPromoDiscountB2B.ApproveUserID = oPromoDiscountRow.ApproveUserID;
                        if (!oPromoDiscountRow.IsApproveDateNull())
                            oPromoDiscountB2B.ApproveDate = oPromoDiscountRow.ApproveDate;
                        if (!oPromoDiscountRow.IsUpdateUserIDNull())
                            oPromoDiscountB2B.UpdateUserID = oPromoDiscountRow.UpdateUserID;
                        if (!oPromoDiscountRow.IsUpdateDateNull())
                            oPromoDiscountB2B.UpdateDate = oPromoDiscountRow.UpdateDate;

                        if (CheckPromoDiscountData(sTableName, oPromoDiscountB2B.B2BDiscountID))
                        {
                            oPromoDiscountB2B.AddForPOS();
                            AppLogger.LogInfo("Successfully Add Promo Discount B2B (t_PromoDiscountB2B)(BankDiscountID=" + oPromoDiscountRow.DiscountID + " and WHID=" + nWHID + ")");
                        }
                        else
                        {
                            oPromoDiscountB2B.EditForPOS();
                            AppLogger.LogInfo("Successfully Update Promo Discount B2B (t_PromoDiscountB2B)(BankDiscountID=" + oPromoDiscountRow.DiscountID + " and WHID=" + nWHID + ")");
                        }
                    }
                    else if (sTableName == "t_PromoDiscountMAGBrand")
                    {
                        PromoDiscountMAGBrand oPromoDiscountMAGBrand = new PromoDiscountMAGBrand();
                        oPromoDiscountMAGBrand.DiscountID = oPromoDiscountRow.DiscountID;
                        oPromoDiscountMAGBrand.SalesType = oPromoDiscountRow.SalesType;
                        oPromoDiscountMAGBrand.MAGID = oPromoDiscountRow.MAGID;
                        oPromoDiscountMAGBrand.BrandID = oPromoDiscountRow.BrandID;
                        oPromoDiscountMAGBrand.DiscountPercent = oPromoDiscountRow.DiscountPercent;
                        oPromoDiscountMAGBrand.IsActive = oPromoDiscountRow.IsActive;
                        oPromoDiscountMAGBrand.Status = oPromoDiscountRow.Status;
                        oPromoDiscountMAGBrand.EffectiveDate = oPromoDiscountRow.EffectiveDate;
                        oPromoDiscountMAGBrand.CreateUserID = oPromoDiscountRow.CreateUserID;
                        oPromoDiscountMAGBrand.CreateDate = oPromoDiscountRow.CreateDate;
                        if (!oPromoDiscountRow.IsApproveUserIDNull())
                            oPromoDiscountMAGBrand.ApproveUserID = oPromoDiscountRow.ApproveUserID;
                        if (!oPromoDiscountRow.IsApproveDateNull())
                            oPromoDiscountMAGBrand.ApproveDate = oPromoDiscountRow.ApproveDate;
                        if (!oPromoDiscountRow.IsUpdateUserIDNull())
                            oPromoDiscountMAGBrand.UpdateUserID = oPromoDiscountRow.UpdateUserID;
                        if (!oPromoDiscountRow.IsUpdateDateNull())
                            oPromoDiscountMAGBrand.UpdateDate = oPromoDiscountRow.UpdateDate;
                        if (!oPromoDiscountRow.IsRemarksNull())
                            oPromoDiscountMAGBrand.Remarks = oPromoDiscountRow.Remarks;
                        if (CheckPromoDiscountData(sTableName, oPromoDiscountMAGBrand.DiscountID))
                        {
                            oPromoDiscountMAGBrand.AddForPOS();
                            AppLogger.LogInfo("Successfully Add Promo Discount MAG Brand (t_PromoDiscountMAGBrand)(BankDiscountID=" + oPromoDiscountRow.DiscountID + " and WHID=" + nWHID + ")");
                        }
                        else
                        {
                            oPromoDiscountMAGBrand.EditForPOS();
                            AppLogger.LogInfo("Successfully Update Promo Discount MAG Brand (t_PromoDiscountMAGBrand)(BankDiscountID=" + oPromoDiscountRow.DiscountID + " and WHID=" + nWHID + ")");
                        }
                    }
                    else if (sTableName == "t_EMITenure")
                    {
                        CJ.Class.Accounts.EMITenure oEMITenure = new CJ.Class.Accounts.EMITenure();
                        oEMITenure.EMITenureID = oPromoDiscountRow.DiscountID;
                        oEMITenure.Tenure = oPromoDiscountRow.Tenure;
                        oEMITenure.Status = oPromoDiscountRow.Status;
                        oEMITenure.CreateUserID = oPromoDiscountRow.CreateUserID;
                        oEMITenure.CreateDate = oPromoDiscountRow.CreateDate;
                        if (!oPromoDiscountRow.IsApproveUserIDNull())
                            oEMITenure.ApproveUserID = oPromoDiscountRow.ApproveUserID;
                        if (!oPromoDiscountRow.IsApproveDateNull())
                            oEMITenure.ApproveDate = oPromoDiscountRow.ApproveDate;
                        if (CheckPromoDiscountData(sTableName, oEMITenure.EMITenureID))
                        {
                            oEMITenure.AddForPOS();
                            AppLogger.LogInfo("Successfully Add EMI Tenure (t_EMITenure)(BankDiscountID=" + oPromoDiscountRow.DiscountID + " and WHID=" + nWHID + ")");
                        }
                        else
                        {
                            oEMITenure.EditForPOS();
                            AppLogger.LogInfo("Successfully Add EMI Tenure (t_EMITenure)(BankDiscountID=" + oPromoDiscountRow.DiscountID + " and WHID=" + nWHID + ")");
                        }

                    }
                    else if (sTableName == "t_EMIExtendedCharge")
                    {
                        EMIExtendedCharge oEMIExtendedCharge = new EMIExtendedCharge();
                        oEMIExtendedCharge.ID = oPromoDiscountRow.DiscountID;
                        oEMIExtendedCharge.EMITenureID = oPromoDiscountRow.EMITenureID;
                        oEMIExtendedCharge.ChargePercent = oPromoDiscountRow.ChargePercent;
                        oEMIExtendedCharge.BankID = oPromoDiscountRow.BankID;
                        if (CheckPromoDiscountData(sTableName, oEMIExtendedCharge.ID))
                        {
                            oEMIExtendedCharge.AddForPOS();
                            AppLogger.LogInfo("Successfully Add EMI Extended Charge (t_EMIExtendedCharge)(BankDiscountID=" + oPromoDiscountRow.DiscountID + " and WHID=" + nWHID + ")");
                        }
                        else
                        {
                            oEMIExtendedCharge.Edit();
                            AppLogger.LogInfo("Successfully Update EMI Extended Charge (t_EMIExtendedCharge)(BankDiscountID=" + oPromoDiscountRow.DiscountID + " and WHID=" + nWHID + ")");
                        }
                    }
                    else if (sTableName == "t_EMIBankMapping")
                    {
                        EMIBankMapping oEMIBankMapping = new EMIBankMapping();
                        oEMIBankMapping.ID = oPromoDiscountRow.DiscountID;
                        oEMIBankMapping.EMITenureID = oPromoDiscountRow.EMITenureID;
                        oEMIBankMapping.BankID = oPromoDiscountRow.BankID;
                        if (CheckPromoDiscountData(sTableName, oEMIBankMapping.ID))
                        {
                            oEMIBankMapping.AddForPOS();
                            AppLogger.LogInfo("Successfully Add EMI Bank Mapping (t_EMIBankMapping)(BankDiscountID=" + oPromoDiscountRow.DiscountID + " and WHID=" + nWHID + ")");
                        }
                        else
                        {
                            oEMIBankMapping.Edit();
                            AppLogger.LogInfo("Successfully Update EMI Bank Mapping (t_EMIBankMapping)(BankDiscountID=" + oPromoDiscountRow.DiscountID + " and WHID=" + nWHID + ")");
                        }

                    }
                    else if (sTableName == "t_PromoDiscountSpecial")
                    {
                        PromoDiscountSpecial oPromoDiscountSpecial = new PromoDiscountSpecial();
                        oPromoDiscountSpecial.SpecialDiscountID = oPromoDiscountRow.DiscountID;
                        oPromoDiscountSpecial.ApprovalNumber = oPromoDiscountRow.ApprovalNumber;
                        oPromoDiscountSpecial.SalesType = oPromoDiscountRow.SalesType;
                        oPromoDiscountSpecial.CustomerID = oPromoDiscountRow.CustomerID;
                        oPromoDiscountSpecial.Type = oPromoDiscountRow.Type;
                        oPromoDiscountSpecial.ConsumerID = oPromoDiscountRow.ConsumerID;
                        oPromoDiscountSpecial.WarehouseID = oPromoDiscountRow.WarehouseID;
                        oPromoDiscountSpecial.Amount = oPromoDiscountRow.Amount;
                        oPromoDiscountSpecial.IsApplicableB2BDiscount = oPromoDiscountRow.IsApplicableB2BDiscount;
                        oPromoDiscountSpecial.Status = oPromoDiscountRow.Status;
                        oPromoDiscountSpecial.CreateUserID = oPromoDiscountRow.CreateUserID;
                        oPromoDiscountSpecial.CreateDate = oPromoDiscountRow.CreateDate;
                        oPromoDiscountSpecial.ApproveUserID = oPromoDiscountRow.ApproveUserID;
                        if (!oPromoDiscountRow.IsApproveDateNull())
                            oPromoDiscountSpecial.ApproveDate = oPromoDiscountRow.ApproveDate;
                        oPromoDiscountSpecial.Reason = oPromoDiscountRow.Reason;
                        oPromoDiscountSpecial.ApproveRemarks = oPromoDiscountRow.ApproveRemarks;
                        oPromoDiscountSpecial.AuthorityID = oPromoDiscountRow.AuthorityID;
                        oPromoDiscountSpecial.DiscountType = oPromoDiscountRow.DiscountType;
                        oPromoDiscountSpecial.ProductID = oPromoDiscountRow.ProductID;
                        oPromoDiscountSpecial.EMITenureID = oPromoDiscountRow.EMITenureID;
                        oPromoDiscountSpecial.Terminal = oPromoDiscountRow.Terminal;

                        if (oPromoDiscountSpecial.CheckPromoDiscountSpecial(oPromoDiscountRow.ApprovalNumber))
                        {
                            oPromoDiscountSpecial.AddForPos();
                            AppLogger.LogInfo("Successfully Add Promo Discount Special (t_PromoDiscountSpecial)(ApprovalNumber=" + oPromoDiscountRow.ApprovalNumber + " and WHID=" + nWHID + ")");
                        }
                        else
                        {
                            oPromoDiscountSpecial.EditForPOS();
                            AppLogger.LogInfo("Successfully Update Promo Discount Special (t_PromoDiscountSpecial)(ApprovalNumber=" + oPromoDiscountRow.ApprovalNumber + " and WHID=" + nWHID + ")");
                        }

                    }
                    else if (sTableName == "t_SalesInvoiceDiscountType")
                    {
                        SalesInvoiceDiscountType oSalesInvoiceDiscountType = new SalesInvoiceDiscountType();
                        oSalesInvoiceDiscountType.DiscountTypeID = oPromoDiscountRow.DiscountID;
                        oSalesInvoiceDiscountType.DiscountTypeName = oPromoDiscountRow.DiscountTypeName;
                        oSalesInvoiceDiscountType.Type = oPromoDiscountRow.Type;
                        oSalesInvoiceDiscountType.SalesType = oPromoDiscountRow.SalesTypeDiscountType;
                        oSalesInvoiceDiscountType.IsActive = oPromoDiscountRow.IsActive;
                        oSalesInvoiceDiscountType.IsSystem = oPromoDiscountRow.IsSystem;
                        oSalesInvoiceDiscountType.CreateUserID = oPromoDiscountRow.CreateUserID;
                        oSalesInvoiceDiscountType.CreateDate = oPromoDiscountRow.CreateDate;
                        oSalesInvoiceDiscountType.UpdateUserID = oPromoDiscountRow.UpdateUserID;
                        if (!oPromoDiscountRow.IsUpdateDateNull())
                            oSalesInvoiceDiscountType.UpdateDate = oPromoDiscountRow.UpdateDate;
                        if (!oPromoDiscountRow.IsIsMandatoryInstrumentNoNull())
                            oSalesInvoiceDiscountType.IsMandatoryInstrumentNo = oPromoDiscountRow.IsMandatoryInstrumentNo;


                        if (CheckPromoDiscountData(sTableName, oSalesInvoiceDiscountType.DiscountTypeID))
                        {
                            oSalesInvoiceDiscountType.AddForPOS();
                            AppLogger.LogInfo("Successfully Add Sales Invoice Discount Type (t_SalesInvoiceDiscountType)(DiscountTypeID=" + oPromoDiscountRow.DiscountID + " and WHID=" + nWHID + ")");
                        }
                        else
                        {
                            oSalesInvoiceDiscountType.EditForPOS();
                            AppLogger.LogInfo("Successfully Update Sales Invoice Discount Type (t_SalesInvoiceDiscountType)(DiscountTypeID=" + oPromoDiscountRow.DiscountID + " and WHID=" + nWHID + ")");
                        }

                    }

                    else if (sTableName == "t_PromoDiscountContributor")
                    {

                        PromoDiscountContributor oConsumerPromotionDiscountSharingType = new PromoDiscountContributor();
                        oConsumerPromotionDiscountSharingType.DiscountContributorID = oPromoDiscountRow.DiscountID;
                        oConsumerPromotionDiscountSharingType.DiscountContributorName = oPromoDiscountRow.DiscountContributorName;
                        oConsumerPromotionDiscountSharingType.CreateDate = oPromoDiscountRow.CreateDate;
                        oConsumerPromotionDiscountSharingType.CreateUserID = oPromoDiscountRow.CreateUserID;


                        if (CheckPromoDiscountData(sTableName, oConsumerPromotionDiscountSharingType.DiscountContributorID))
                        {
                            oConsumerPromotionDiscountSharingType.AddForPos();
                            AppLogger.LogInfo("Successfully Add Sales Invoice Discount Type (t_PromoDiscountContributor)(DiscountContributorID=" + oPromoDiscountRow.DiscountID + " and WHID=" + nWHID + ")");
                        }
                        else
                        {
                            oConsumerPromotionDiscountSharingType.EditForPOS();
                            AppLogger.LogInfo("Successfully Update Sales Invoice Discount Type (t_PromoDiscountContributor)(DiscountContributorID=" + oPromoDiscountRow.DiscountID + " and WHID=" + nWHID + ")");
                        }

                    }

                }
            }
            catch (Exception ex)
            {
                AppLogger.LogInfo("Error Insert/Update TableName=" + sTableName + " and WHID=" + nWHID + ")");
                throw (ex);
            }
        }

        ///
        // Insert Product TML
        ///
        public void InsertProductTML(DSProduct oDSProduct)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Product Insert

            foreach (DSProduct.ProductRow oProductRow in oDSProduct.Product)
            {

                if (CheckProduct(oProductRow.ProductID))
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();
                    sSql = "INSERT INTO t_Product VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                    try
                    {
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("ProductID", oProductRow.ProductID);
                        cmd.Parameters.AddWithValue("ProductCode", oProductRow.ProductCode);
                        cmd.Parameters.AddWithValue("ProductName", oProductRow.ProductName);
                        cmd.Parameters.AddWithValue("ProductDesc", oProductRow.ProductDesc);
                        cmd.Parameters.AddWithValue("ProductModel", oProductRow.ProductModel);
                        cmd.Parameters.AddWithValue("SmallUnitOfMeasure", oProductRow.SmallUnitOfMeasure);
                        cmd.Parameters.AddWithValue("LargeUnitOfMeasure", oProductRow.LargeUnitOfMeasure);
                        cmd.Parameters.AddWithValue("UOMConversionFactor", oProductRow.UOMConversionFactor);
                        cmd.Parameters.AddWithValue("EntryDate", oProductRow.EntryDate);
                        cmd.Parameters.AddWithValue("LastUpdateDate", null);
                        cmd.Parameters.AddWithValue("ProductType", oProductRow.ProductType);
                        cmd.Parameters.AddWithValue("ProductGroupID", oProductRow.ProductGroupID);
                        cmd.Parameters.AddWithValue("BrandID", oProductRow.BrandID);
                        cmd.Parameters.AddWithValue("IsActive", oProductRow.IsActive);
                        if (oProductRow.HSCodeID != -1)
                        {
                            cmd.Parameters.AddWithValue("HSCodeID", oProductRow.HSCodeID);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("HSCodeID", null);
                        }
                        cmd.Parameters.AddWithValue("MidUnitOfMeasure", oProductRow.MidUnitOfMeasure);
                        if (oProductRow.LSRatio != -1)
                        {
                            cmd.Parameters.AddWithValue("LSRatio", oProductRow.LSRatio);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("LSRatio", null);
                        }
                        if (oProductRow.MSRatio != -1)
                        {
                            cmd.Parameters.AddWithValue("MSRatio", oProductRow.MSRatio);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("MSRatio", null);
                        }

                        if (oProductRow.SupplyType != -1)
                        {
                            cmd.Parameters.AddWithValue("SupplyType", oProductRow.SupplyType);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("SupplyType", null);
                        }
                        if (oProductRow.VatApplicable != -1)
                        {
                            cmd.Parameters.AddWithValue("VatApplicable", oProductRow.VatApplicable);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("VatApplicable", null);
                        }
                        cmd.Parameters.AddWithValue("ProductSBUs", oProductRow.ProductSBUs);
                        cmd.Parameters.AddWithValue("UploadStatus", null);
                        cmd.Parameters.AddWithValue("UploadDate", null);
                        cmd.Parameters.AddWithValue("DownloadDate", null);
                        cmd.Parameters.AddWithValue("RowStatus", null);
                        if (oProductRow.InventoryCategory != -1)
                        {
                            cmd.Parameters.AddWithValue("InventoryCategory", oProductRow.InventoryCategory);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("InventoryCategory", null);
                        }
                        if (oProductRow.ItemCategory != -1)
                        {
                            cmd.Parameters.AddWithValue("ItemCategory", oProductRow.ItemCategory);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("ItemCategory", null);
                        }
                        cmd.Parameters.AddWithValue("PetName", oProductRow.PetName);

                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
                else
                {
                    try
                    {
                        cmd.Dispose();
                        cmd = DBController.Instance.GetCommand();

                        sSql = "Update  t_Product Set ProductCode=?,ProductName=?,ProductDesc=?,ProductModel=?,SmallUnitOfMeasure=?,LargeUnitOfMeasure=?, "
                               + " UOMConversionFactor=?,EntryDate=?, LastUpdateDate=?,ProductType=?,ProductGroupID=?,BrandID=?,IsActive=?,HSCodeID=?,MidUnitOfMeasure=?,LSRatio=?,MSRatio=?, "
                               + " SupplyType=?,VatApplicable=?,ProductSBUs=?,UploadStatus=?, UploadDate=?,DownloadDate=?, RowStatus=?,InventoryCategory=?,ItemCategory=?, "
                               + " PetName=? Where ProductID=?";

                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;


                        cmd.Parameters.AddWithValue("ProductCode", oProductRow.ProductCode);
                        cmd.Parameters.AddWithValue("ProductName", oProductRow.ProductName);
                        cmd.Parameters.AddWithValue("ProductDesc", oProductRow.ProductDesc);
                        cmd.Parameters.AddWithValue("ProductModel", oProductRow.ProductModel);
                        cmd.Parameters.AddWithValue("SmallUnitOfMeasure", oProductRow.SmallUnitOfMeasure);
                        cmd.Parameters.AddWithValue("LargeUnitOfMeasure", oProductRow.LargeUnitOfMeasure);
                        cmd.Parameters.AddWithValue("UOMConversionFactor", oProductRow.UOMConversionFactor);
                        cmd.Parameters.AddWithValue("EntryDate", oProductRow.EntryDate);
                        cmd.Parameters.AddWithValue("LastUpdateDate", null);
                        cmd.Parameters.AddWithValue("ProductType", oProductRow.ProductType);
                        cmd.Parameters.AddWithValue("ProductGroupID", oProductRow.ProductGroupID);
                        cmd.Parameters.AddWithValue("BrandID", oProductRow.BrandID);
                        cmd.Parameters.AddWithValue("IsActive", oProductRow.IsActive);
                        if (oProductRow.HSCodeID != -1)
                        {
                            cmd.Parameters.AddWithValue("HSCodeID", oProductRow.HSCodeID);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("HSCodeID", null);
                        }
                        cmd.Parameters.AddWithValue("MidUnitOfMeasure", oProductRow.MidUnitOfMeasure);
                        if (oProductRow.LSRatio != -1)
                        {
                            cmd.Parameters.AddWithValue("LSRatio", oProductRow.LSRatio);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("LSRatio", null);
                        }
                        if (oProductRow.MSRatio != -1)
                        {
                            cmd.Parameters.AddWithValue("MSRatio", oProductRow.MSRatio);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("MSRatio", null);
                        }

                        if (oProductRow.SupplyType != -1)
                        {
                            cmd.Parameters.AddWithValue("SupplyType", oProductRow.SupplyType);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("SupplyType", null);
                        }
                        if (oProductRow.VatApplicable != -1)
                        {
                            cmd.Parameters.AddWithValue("VatApplicable", oProductRow.VatApplicable);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("VatApplicable", null);
                        }
                        cmd.Parameters.AddWithValue("ProductSBUs", oProductRow.ProductSBUs);
                        cmd.Parameters.AddWithValue("UploadStatus", null);
                        cmd.Parameters.AddWithValue("UploadDate", null);
                        cmd.Parameters.AddWithValue("DownloadDate", null);
                        cmd.Parameters.AddWithValue("RowStatus", null);
                        if (oProductRow.InventoryCategory != -1)
                        {
                            cmd.Parameters.AddWithValue("InventoryCategory", oProductRow.InventoryCategory);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("InventoryCategory", null);
                        }
                        if (oProductRow.ItemCategory != -1)
                        {
                            cmd.Parameters.AddWithValue("ItemCategory", oProductRow.ItemCategory);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("ItemCategory", null);
                        }
                        cmd.Parameters.AddWithValue("PetName", oProductRow.PetName);

                        cmd.Parameters.AddWithValue("ProductID", oProductRow.ProductID);

                        int nCount = cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
            }
        }

        public void InsertCustomerCreditLimit(DSCustomer oDSCustomerCreditLimit)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Insert

            foreach (DSCustomer.CustomerCreditLimitRow oCustomerCreditLimitRow in oDSCustomerCreditLimit.CustomerCreditLimit)
            {

                if (CheckCustomerCreditLimit(oCustomerCreditLimitRow.CreditLimitID))
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();
                    sSql = "INSERT INTO t_CustomerCreditLimit (CreditLimitID,CustomerID,MinCreditLimit,EffectiveDate,ExpiryDate,UserID,MaxCreditLimit) VALUES(?,?,?,?,?,?,?)";

                    try
                    {

                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("CreditLimitID", oCustomerCreditLimitRow.CreditLimitID);
                        cmd.Parameters.AddWithValue("CustomerID", oCustomerCreditLimitRow.CustomerID);
                        cmd.Parameters.AddWithValue("MinCreditLimit", oCustomerCreditLimitRow.MinCreditLimit);
                        cmd.Parameters.AddWithValue("EffectiveDate", oCustomerCreditLimitRow.EffectiveDate);
                        cmd.Parameters.AddWithValue("ExpiryDate", oCustomerCreditLimitRow.ExpiryDate);
                        cmd.Parameters.AddWithValue("UserID", oCustomerCreditLimitRow.UserID);
                        cmd.Parameters.AddWithValue("MaxCreditLimit", oCustomerCreditLimitRow.MaxCreditLimit);

                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
                else
                {
                    try
                    {
                        cmd.Dispose();
                        cmd = DBController.Instance.GetCommand();

                        sSql = "Update  t_CustomerCreditLimit Set CustomerID=?,MinCreditLimit=?,EffectiveDate=?,ExpiryDate=?,UserID=?,MaxCreditLimit=? Where CreditLimitID=?";

                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;


                        cmd.Parameters.AddWithValue("CustomerID", oCustomerCreditLimitRow.CustomerID);
                        cmd.Parameters.AddWithValue("MinCreditLimit", oCustomerCreditLimitRow.MinCreditLimit);
                        cmd.Parameters.AddWithValue("EffectiveDate", oCustomerCreditLimitRow.EffectiveDate);
                        cmd.Parameters.AddWithValue("ExpiryDate", oCustomerCreditLimitRow.ExpiryDate);
                        cmd.Parameters.AddWithValue("UserID", oCustomerCreditLimitRow.UserID);
                        cmd.Parameters.AddWithValue("MaxCreditLimit", oCustomerCreditLimitRow.MaxCreditLimit);
                        cmd.Parameters.AddWithValue("CreditLimitID", oCustomerCreditLimitRow.CreditLimitID);

                        int nCount = cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
            }
        }

        ///
        // Insert Product Price
        ///
        public void InsertProductPrice(DSFinishedGoodsPrice oDSFinishedGoodsPrice)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Product Price Insert

            foreach (DSFinishedGoodsPrice.PriceRow oPriceRow in oDSFinishedGoodsPrice.Price)
            {

                if (CheckProductPrice(oPriceRow.PriceID))
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();
                    sSql = "INSERT INTO t_FinishedGoodsPrice (PriceID,ProductID,EffectiveDate,CostPrice,TradePrice,NSP,RSP, "
                               + " SpecialPrice,DistributorPrice,VAT,IsCurrent,VATCP) VALUES(?,?,?,?,?,?,?,?,?,?,?,?)";

                    try
                    {

                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("PriceID", oPriceRow.PriceID);
                        cmd.Parameters.AddWithValue("ProductID", oPriceRow.ProductID);
                        cmd.Parameters.AddWithValue("EffectiveDate", oPriceRow.EffectiveDate);
                        cmd.Parameters.AddWithValue("CostPrice", oPriceRow.CostPrice);
                        if (oPriceRow.TradePrice != -1)
                            cmd.Parameters.AddWithValue("TradePrice", oPriceRow.TradePrice);
                        else cmd.Parameters.AddWithValue("TradePrice", null);
                        cmd.Parameters.AddWithValue("NSP", oPriceRow.NSP);
                        cmd.Parameters.AddWithValue("RSP", oPriceRow.RSP);
                        if (oPriceRow.SpecialPrice != -1)
                            cmd.Parameters.AddWithValue("SpecialPrice", oPriceRow.SpecialPrice);
                        else cmd.Parameters.AddWithValue("SpecialPrice", null);
                        if (oPriceRow.DistributorPrice != -1)
                            cmd.Parameters.AddWithValue("DistributorPrice", oPriceRow.DistributorPrice);
                        else cmd.Parameters.AddWithValue("DistributorPrice", null);
                        if (oPriceRow.VAT != -1)
                            cmd.Parameters.AddWithValue("VAT", oPriceRow.VAT);
                        else cmd.Parameters.AddWithValue("VAT", null);
                        if (oPriceRow.IsCurrent != -1)
                            cmd.Parameters.AddWithValue("IsCurrent", oPriceRow.IsCurrent);
                        else cmd.Parameters.AddWithValue("IsCurrent", null);
                        cmd.Parameters.AddWithValue("VATCP", oPriceRow.VATCP);
                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
                else
                {
                    try
                    {
                        cmd.Dispose();
                        cmd = DBController.Instance.GetCommand();

                        sSql = "Update  t_FinishedGoodsPrice Set ProductID=?,EffectiveDate=?,CostPrice=?,TradePrice=?,NSP=?,RSP=?, "
                               + " SpecialPrice=?,DistributorPrice=?,VAT=?,IsCurrent=? "
                               + " Where PriceID=?";

                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("ProductID", oPriceRow.ProductID);
                        cmd.Parameters.AddWithValue("EffectiveDate", oPriceRow.EffectiveDate);
                        cmd.Parameters.AddWithValue("CostPrice", oPriceRow.CostPrice);
                        if (oPriceRow.TradePrice != -1)
                            cmd.Parameters.AddWithValue("TradePrice", oPriceRow.TradePrice);
                        else cmd.Parameters.AddWithValue("TradePrice", null);
                        cmd.Parameters.AddWithValue("NSP", oPriceRow.NSP);
                        cmd.Parameters.AddWithValue("RSP", oPriceRow.RSP);
                        if (oPriceRow.SpecialPrice != -1)
                            cmd.Parameters.AddWithValue("SpecialPrice", oPriceRow.SpecialPrice);
                        else cmd.Parameters.AddWithValue("SpecialPrice", null);
                        if (oPriceRow.DistributorPrice != -1)
                            cmd.Parameters.AddWithValue("DistributorPrice", oPriceRow.DistributorPrice);
                        else cmd.Parameters.AddWithValue("DistributorPrice", null);
                        if (oPriceRow.VAT != -1)
                            cmd.Parameters.AddWithValue("VAT", oPriceRow.VAT);
                        else cmd.Parameters.AddWithValue("VAT", null);
                        if (oPriceRow.IsCurrent != -1)
                            cmd.Parameters.AddWithValue("IsCurrent", oPriceRow.IsCurrent);
                        else cmd.Parameters.AddWithValue("IsCurrent", null);


                        cmd.Parameters.AddWithValue("PriceID", oPriceRow.PriceID);

                        int nCount = cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }

                ProductDetail oProductDetail = new ProductDetail();
                int nMaxPriceID = oProductDetail.GetMaxPriceID(oPriceRow.ProductID);

                //Max Price ID Is Not Current
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                sSql = " Update t_FinishedGoodsPrice SET IsCurrent=" + (int)Dictionary.YesOrNoStatus.NO + " Where ProductID = " + oPriceRow.ProductID + " and PriceID <> " + nMaxPriceID + "";

                cmd.CommandText = sSql;
                cmd.CommandType = CommandType.Text;
                cmd.ExecuteNonQuery();
                cmd.Dispose();
                //Max Price ID Is Current
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                sSql = " Update t_FinishedGoodsPrice SET IsCurrent=" + (int)Dictionary.YesOrNoStatus.YES + " Where ProductID = " + oPriceRow.ProductID + " and PriceID = " + nMaxPriceID + "";

                cmd.CommandText = sSql;
                cmd.CommandType = CommandType.Text;
                cmd.ExecuteNonQuery();
                cmd.Dispose();
            }
        }


        public void InsertProductPriceTML(DSFinishedGoodsPrice oDSFinishedGoodsPrice)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Product Price Insert

            foreach (DSFinishedGoodsPrice.PriceRow oPriceRow in oDSFinishedGoodsPrice.Price)
            {

                if (CheckProductPrice(oPriceRow.PriceID))
                {

                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();
                    sSql = "INSERT INTO t_FinishedGoodsPrice VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                    try
                    {

                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("PriceID", oPriceRow.PriceID);
                        cmd.Parameters.AddWithValue("ProductID", oPriceRow.ProductID);
                        cmd.Parameters.AddWithValue("EffectiveDate", oPriceRow.EffectiveDate);
                        cmd.Parameters.AddWithValue("CostPrice", oPriceRow.CostPrice);
                        if (oPriceRow.TradePrice != -1)
                        {
                            cmd.Parameters.AddWithValue("TradePrice", oPriceRow.TradePrice);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("TradePrice", null);
                        }
                        cmd.Parameters.AddWithValue("NSP", oPriceRow.NSP);
                        cmd.Parameters.AddWithValue("RSP", oPriceRow.RSP);
                        if (oPriceRow.SpecialPrice != -1)
                        {
                            cmd.Parameters.AddWithValue("SpecialPrice", oPriceRow.SpecialPrice);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("SpecialPrice", null);
                        }
                        if (oPriceRow.DistributorPrice != -1)
                        {
                            cmd.Parameters.AddWithValue("DistributorPrice", oPriceRow.DistributorPrice);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("DistributorPrice", null);
                        }
                        if (oPriceRow.VAT != -1)
                        {
                            cmd.Parameters.AddWithValue("VAT", oPriceRow.VAT);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("VAT", null);
                        }
                        if (oPriceRow.IsCurrent != -1)
                        {
                            cmd.Parameters.AddWithValue("IsCurrent", oPriceRow.IsCurrent);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("IsCurrent", null);
                        }
                        cmd.Parameters.AddWithValue("UploadStatus", null);
                        cmd.Parameters.AddWithValue("UploadDate", null);
                        cmd.Parameters.AddWithValue("DownloadDate", null);
                        cmd.Parameters.AddWithValue("RowStatus", null);
                        cmd.Parameters.AddWithValue("Terminal", null);
                        cmd.Parameters.AddWithValue("EntryUserID", oPriceRow.EntryUserID);
                        cmd.Parameters.AddWithValue("MRP", oPriceRow.MRP);


                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
                else
                {
                    try
                    {
                        cmd.Dispose();
                        cmd = DBController.Instance.GetCommand();

                        sSql = "Update t_FinishedGoodsPrice Set ProductID=?,EffectiveDate=?,CostPrice=?,TradePrice=?,NSP=?,RSP=?, "
                               + " SpecialPrice=?,DistributorPrice=?,VAT=?,IsCurrent=?,UploadStatus=?, UploadDate=?,DownloadDate=?, "
                               + " RowStatus=?, Terminal=?,EntryUserID=?,MRP=? Where PriceID=?";

                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("ProductID", oPriceRow.ProductID);
                        cmd.Parameters.AddWithValue("EffectiveDate", oPriceRow.EffectiveDate);
                        cmd.Parameters.AddWithValue("CostPrice", oPriceRow.CostPrice);
                        if (oPriceRow.TradePrice != -1)
                        {
                            cmd.Parameters.AddWithValue("TradePrice", oPriceRow.TradePrice);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("TradePrice", null);
                        }
                        cmd.Parameters.AddWithValue("NSP", oPriceRow.NSP);
                        cmd.Parameters.AddWithValue("RSP", oPriceRow.RSP);
                        if (oPriceRow.SpecialPrice != -1)
                        {
                            cmd.Parameters.AddWithValue("SpecialPrice", oPriceRow.SpecialPrice);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("SpecialPrice", null);
                        }
                        if (oPriceRow.DistributorPrice != -1)
                        {
                            cmd.Parameters.AddWithValue("DistributorPrice", oPriceRow.DistributorPrice);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("DistributorPrice", null);
                        }
                        if (oPriceRow.VAT != -1)
                        {
                            cmd.Parameters.AddWithValue("VAT", oPriceRow.VAT);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("VAT", null);
                        }
                        if (oPriceRow.IsCurrent != -1)
                        {
                            cmd.Parameters.AddWithValue("IsCurrent", oPriceRow.IsCurrent);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("IsCurrent", null);
                        }
                        cmd.Parameters.AddWithValue("UploadStatus", null);
                        cmd.Parameters.AddWithValue("UploadDate", null);
                        cmd.Parameters.AddWithValue("DownloadDate", null);
                        cmd.Parameters.AddWithValue("RowStatus", null);
                        cmd.Parameters.AddWithValue("Terminal", null);
                        cmd.Parameters.AddWithValue("EntryUserID", oPriceRow.EntryUserID);
                        cmd.Parameters.AddWithValue("MRP", oPriceRow.MRP);

                        cmd.Parameters.AddWithValue("PriceID", oPriceRow.PriceID);

                        int nCount = cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
            }
        }

        ///
        // Insert Product Group
        ///
        public void InsertProductGroup(DSProductGroups oDSProductGroups)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";
            int nCount = 0;
            ProductGroup oProductGroup;
            /// Insert Product Group

            foreach (DSProductGroups.ProductGroupRow oProductGroupRow in oDSProductGroups.ProductGroup)
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                if (CheckProductGroup(Convert.ToInt32(oProductGroupRow.PdtGroupId)))
                {

                    try
                    {
                        oProductGroup = new ProductGroup();
                        oProductGroup.PdtGroupID = Convert.ToInt32(oProductGroupRow.PdtGroupId);
                        oProductGroup.PdtGroupCode = oProductGroupRow.PdtGroupCode;
                        oProductGroup.PdtGroupName = oProductGroupRow.PdtGroupName;
                        oProductGroup.PdtGroupType = oProductGroupRow.PdtGroupType;
                        oProductGroup.ParentID = oProductGroupRow.ParentId;
                        oProductGroup.POS = oProductGroupRow.Pos;
                        oProductGroup.IsActive = oProductGroupRow.IsActive;
                        oProductGroup.Add();
                    }
                    catch (Exception ex)
                    {

                        throw (ex);
                    }

                }
                else
                {
                    try
                    {
                        oProductGroup = new ProductGroup();
                        oProductGroup.PdtGroupID = Convert.ToInt32(oProductGroupRow.PdtGroupId);
                        oProductGroup.PdtGroupCode = oProductGroupRow.PdtGroupCode;
                        oProductGroup.PdtGroupName = oProductGroupRow.PdtGroupName;
                        oProductGroup.PdtGroupType = oProductGroupRow.PdtGroupType;
                        oProductGroup.ParentID = oProductGroupRow.ParentId;
                        oProductGroup.POS = oProductGroupRow.Pos;
                        oProductGroup.IsActive = oProductGroupRow.IsActive;

                        oProductGroup.Edit();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
            }
        }

        ///
        // Insert Product Brand
        ///
        public void InsertProductBrand(DSBrand oDSBrand)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";
            int nCount = 0;
            Brand oBrand;
            /// Insert Product Brand

            foreach (DSBrand.BrandRow oBrandRow in oDSBrand.Brand)
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();
                if (CheckProductBrand(Convert.ToInt32(oBrandRow.BrandID)))
                {
                    try
                    {
                        oBrand = new Brand();

                        oBrand.BrandID = Convert.ToInt32(oBrandRow.BrandID);
                        oBrand.BrandCode = oBrandRow.BrandCode;
                        oBrand.BrandDesc = oBrandRow.BrandDesc;
                        oBrand.IsActive = Convert.ToInt32(oBrandRow.IsActive);
                        oBrand.BrandLevel = Convert.ToInt32(oBrandRow.BrandLevel);
                        oBrand.ParentID = Convert.ToInt32(oBrandRow.ParentID);
                        oBrand.BrandPos = Convert.ToInt32(oBrandRow.BrandPos);

                        oBrand.Add();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
                else
                {

                    try
                    {

                        oBrand = new Brand();

                        oBrand.BrandID = Convert.ToInt32(oBrandRow.BrandID);
                        oBrand.BrandCode = oBrandRow.BrandCode;
                        oBrand.BrandDesc = oBrandRow.BrandDesc;
                        oBrand.IsActive = Convert.ToInt32(oBrandRow.IsActive);
                        oBrand.BrandLevel = Convert.ToInt32(oBrandRow.BrandLevel);
                        oBrand.ParentID = Convert.ToInt32(oBrandRow.ParentID);
                        oBrand.BrandPos = Convert.ToInt32(oBrandRow.BrandPos);
                        oBrand.Edit();


                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
            }
        }
        ///
        // Update This System
        ///
        public void UpdateThisSystem(DSThisSystem oDSThisSystem)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";
            int nCount = 0;

            foreach (DSThisSystem.ThisSystemRow oThisSystemRow in oDSThisSystem.ThisSystem)
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                sSql = "Update t_ThisSystem SET HCMobileNo=?, HCPhoneNo=?,HCEmail=?,VATRegistrationNo=?,POSVersionNo=?,IsNewVat = ?,NewVatActivationDate=?,IsActiveSalesOrder=?,CentralRegisteredPersonAddress=?,IsThermalPrintEnable=?";

                try
                {
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("HCMobileNo", oThisSystemRow.HCMobileNo);
                    cmd.Parameters.AddWithValue("HCPhoneNo", oThisSystemRow.HCPhoneNo);
                    cmd.Parameters.AddWithValue("HCEmail", oThisSystemRow.HCEmail);
                    cmd.Parameters.AddWithValue("VATRegistrationNo", oThisSystemRow.VATRegistrationNo);
                    cmd.Parameters.AddWithValue("POSVersionNo", oThisSystemRow.POSVersionNo);
                    cmd.Parameters.AddWithValue("IsNewVat", oThisSystemRow.IsNewVat);
                    if (!oThisSystemRow.IsNewVatActivationDateNull())
                    {
                        cmd.Parameters.AddWithValue("NewVatActivationDate", oThisSystemRow.NewVatActivationDate);
                    }
                    else
                    {
                        cmd.Parameters.AddWithValue("NewVatActivationDate", null);
                    }
                    if (!oThisSystemRow.IsIsActiveSalesOrderNull())
                    {
                        cmd.Parameters.AddWithValue("IsActiveSalesOrder", oThisSystemRow.IsActiveSalesOrder);
                    }
                    else
                    {
                        cmd.Parameters.AddWithValue("IsActiveSalesOrder", 0);
                    }
                    cmd.Parameters.AddWithValue("CentralRegisteredPersonAddress", oThisSystemRow.CentralRegisteredPersonAddress);
                    cmd.Parameters.AddWithValue("IsThermalPrintEnable", oThisSystemRow.IsThermalPrintEnable);


                    cmd.ExecuteNonQuery();
                    cmd.Dispose();

                }
                catch (Exception ex)
                {
                    throw (ex);
                }
            }
        }
        ///
        // Insert Warehouse
        ///
        public void InsertWarehouse(DSWarehouse oDSWarehouse)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Insert Warehouse
            foreach (DSWarehouse.WarehouseRow oWarehouseRow in oDSWarehouse.Warehouse)
            {

                if (CheckWarehouse(oWarehouseRow.WarehouseID))
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();
                    sSql = "INSERT INTO t_Warehouse (WarehouseID,WarehouseCode,WarehouseName,WarehouseParentID,  " +
                           "StockType,IsActive,ChannelID,WarehouseType,ViewPosition,ThanaID,  " +
                           "Remark,LocationID, ShortCode ) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?)";

                    try
                    {
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("WarehouseID", oWarehouseRow.WarehouseID);
                        cmd.Parameters.AddWithValue("WarehouseCode", oWarehouseRow.WarehouseCode);
                        cmd.Parameters.AddWithValue("WarehouseName", oWarehouseRow.WarehouseName);
                        cmd.Parameters.AddWithValue("WarehouseParentID", oWarehouseRow.WarehouseParentID);
                        cmd.Parameters.AddWithValue("StockType", oWarehouseRow.StockType);
                        cmd.Parameters.AddWithValue("IsActive", oWarehouseRow.IsActive);
                        cmd.Parameters.AddWithValue("ChannelID", oWarehouseRow.ChannelID);
                        cmd.Parameters.AddWithValue("WarehouseType", oWarehouseRow.WarehouseType);
                        cmd.Parameters.AddWithValue("ViewPosition", oWarehouseRow.ViewPosition);
                        cmd.Parameters.AddWithValue("ThanaID", oWarehouseRow.ThanaID);
                        cmd.Parameters.AddWithValue("Remark", oWarehouseRow.Remark);
                        cmd.Parameters.AddWithValue("LocationID", oWarehouseRow.LocationID);
                        cmd.Parameters.AddWithValue("ShortCode", oWarehouseRow.ShortCode);


                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
                else
                {
                    try
                    {
                        cmd.Dispose();
                        cmd = DBController.Instance.GetCommand();

                        sSql = "Update t_Warehouse Set WarehouseCode = ?,WarehouseName  = ?,WarehouseParentID  = ?,  " +
                           "StockType  = ?,IsActive  = ?,ChannelID  = ?,WarehouseType  = ?,ViewPosition  = ?,ThanaID  = ?,  " +
                           "Remark  = ?,LocationID  = ?, ShortCode  = ? Where WarehouseID =? ";

                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;


                        cmd.Parameters.AddWithValue("WarehouseCode", oWarehouseRow.WarehouseCode);
                        cmd.Parameters.AddWithValue("WarehouseName", oWarehouseRow.WarehouseName);
                        cmd.Parameters.AddWithValue("WarehouseParentID", oWarehouseRow.WarehouseParentID);
                        cmd.Parameters.AddWithValue("StockType", oWarehouseRow.StockType);
                        cmd.Parameters.AddWithValue("IsActive", oWarehouseRow.IsActive);
                        cmd.Parameters.AddWithValue("ChannelID", oWarehouseRow.ChannelID);
                        cmd.Parameters.AddWithValue("WarehouseType", oWarehouseRow.WarehouseType);
                        cmd.Parameters.AddWithValue("ViewPosition", oWarehouseRow.ViewPosition);
                        cmd.Parameters.AddWithValue("ThanaID", oWarehouseRow.ThanaID);
                        cmd.Parameters.AddWithValue("Remark", oWarehouseRow.Remark);
                        cmd.Parameters.AddWithValue("LocationID", oWarehouseRow.LocationID);
                        cmd.Parameters.AddWithValue("ShortCode", oWarehouseRow.ShortCode);
                        cmd.Parameters.AddWithValue("WarehouseID", oWarehouseRow.WarehouseID);

                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
            }



        }

        ///
        // Insert Employee
        ///
        public void InsertEmployee(DSEmployee oDSEmployee)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";
            int nCount = 0;

            /// Insert Employee

            foreach (DSEmployee.EmployeeRow oEmployeeRow in oDSEmployee.Employee)
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                if (CheckEmployee(oEmployeeRow.EmployeeID))
                {

                    sSql = "INSERT INTO t_Employee (EmployeeID,EmployeeCode,EmployeeName,LocationID,LocationName, " +
                        " CompanyID,CompanyName, DesignationName, Status ) VALUES(?,?,?,?,?,?,?,?,?)";

                    try
                    {
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("EmployeeID", oEmployeeRow.EmployeeID);
                        cmd.Parameters.AddWithValue("EmployeeCode", oEmployeeRow.EmployeeCode);
                        cmd.Parameters.AddWithValue("EmployeeName", oEmployeeRow.EmployeeName);
                        if (oEmployeeRow["LocationID"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("LocationID", oEmployeeRow.LocationID);
                        else cmd.Parameters.AddWithValue("LocationID", null);
                        if (oEmployeeRow["LocationName"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("LocationName", oEmployeeRow.LocationName);
                        else cmd.Parameters.AddWithValue("LocationName", null);
                        cmd.Parameters.AddWithValue("CompanyID", oEmployeeRow.CompanyID);
                        cmd.Parameters.AddWithValue("CompanyName", oEmployeeRow.CompanyName);
                        cmd.Parameters.AddWithValue("DesignationName", oEmployeeRow.DesignationName);
                        cmd.Parameters.AddWithValue("Status", oEmployeeRow.Status);

                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
                else
                {
                    try
                    {

                        sSql = "Update t_Employee Set EmployeeCode=?,EmployeeName=?,LocationID=?,LocationName=?,CompanyID=?,CompanyName=?,DesignationName=?, Status=? "
                               + " Where EmployeeID =? ";
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("EmployeeCode", oEmployeeRow.EmployeeCode);
                        cmd.Parameters.AddWithValue("EmployeeName", oEmployeeRow.EmployeeName);
                        if (oEmployeeRow["LocationID"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("LocationID", oEmployeeRow.LocationID);
                        else cmd.Parameters.AddWithValue("LocationID", null);
                        if (oEmployeeRow["LocationName"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("LocationName", oEmployeeRow.LocationName);
                        else cmd.Parameters.AddWithValue("LocationName", null);
                        cmd.Parameters.AddWithValue("CompanyID", oEmployeeRow.CompanyID);
                        cmd.Parameters.AddWithValue("CompanyName", oEmployeeRow.CompanyName);
                        cmd.Parameters.AddWithValue("DesignationName", oEmployeeRow.DesignationName);
                        cmd.Parameters.AddWithValue("Status", oEmployeeRow.Status);

                        cmd.Parameters.AddWithValue("EmployeeID", oEmployeeRow.EmployeeID);

                        nCount = cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
            }
        }

        ///
        // Insert Promotion (TD)
        ///
        public void InsertPromotio(DSPromotion oDSPromotion)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Insert Employee

            foreach (DSPromotion.SalesPromotionRow oSalesPromotionRow in oDSPromotion.SalesPromotion)
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                if (CheckConsumerPromotion(oSalesPromotionRow.SalesPromotionID))
                {

                    try
                    {
                        sSql = "INSERT INTO t_SalesPromo VALUES(?,?,?,?,?,?)";
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.AddWithValue("SalesPromotionID", oSalesPromotionRow.SalesPromotionID);
                        cmd.Parameters.AddWithValue("SalesPromotionNo", oSalesPromotionRow.SalesPromotionNo);
                        cmd.Parameters.AddWithValue("SalesPromotionName", oSalesPromotionRow.SalesPromotionName);
                        cmd.Parameters.AddWithValue("FromDate", oSalesPromotionRow.FromDate);
                        cmd.Parameters.AddWithValue("ToDate", oSalesPromotionRow.Todate);
                        cmd.Parameters.AddWithValue("IsActive", oSalesPromotionRow.IsActive);

                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
                else
                {
                    sSql = "Update t_SalesPromo SET SalesPromotionNo=?,SalesPromotionName=?, FromDate=?,ToDate=?, IsActive=? Where SalesPromotionID=?";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("SalesPromotionNo", oSalesPromotionRow.SalesPromotionNo);
                    cmd.Parameters.AddWithValue("SalesPromotionName", oSalesPromotionRow.SalesPromotionName);
                    cmd.Parameters.AddWithValue("FromDate", oSalesPromotionRow.FromDate);
                    cmd.Parameters.AddWithValue("ToDate", oSalesPromotionRow.Todate);
                    cmd.Parameters.AddWithValue("IsActive", oSalesPromotionRow.IsActive);

                    cmd.Parameters.AddWithValue("SalesPromotionID", oSalesPromotionRow.SalesPromotionID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
            }
            foreach (DSPromotion.SPProductRow oSPProductRow in oDSPromotion.SPProduct)
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                try
                {
                    sSql = "INSERT INTO t_SalesPromoProduct VALUES(?,?,?)";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.AddWithValue("SalesPromotionID", oSPProductRow.SalesPromotionID);
                    cmd.Parameters.AddWithValue("ProductID", oSPProductRow.ProductID);
                    cmd.Parameters.AddWithValue("Qty", 0);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();

                }
                catch (Exception ex)
                {
                    throw (ex);
                }

            }
            foreach (DSPromotion.SPChannelRow oSPChannelRow in oDSPromotion.SPChannel)
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                try
                {
                    sSql = "INSERT INTO t_SalesPromoChannel VALUES(?,?)";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.AddWithValue("SalesPromotionID", oSPChannelRow.SalesPromotionID);
                    cmd.Parameters.AddWithValue("ChannelID", oSPChannelRow.ChannelID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();

                }
                catch (Exception ex)
                {
                    throw (ex);
                }

            }
            foreach (DSPromotion.SPTypeRow oSPTypeRow in oDSPromotion.SPType)
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                try
                {
                    sSql = "INSERT INTO t_SalesPromoType VALUES(?,?)";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.AddWithValue("SalesPromotionID", oSPTypeRow.SalesPromotionID);
                    cmd.Parameters.AddWithValue("SalesPromotionTypeID", oSPTypeRow.SalesPromotionTypeID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();

                }
                catch (Exception ex)
                {
                    throw (ex);
                }

            }
            foreach (DSPromotion.SPWarehouseRow oSPWarehouseRow in oDSPromotion.SPWarehouse)
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                try
                {
                    sSql = "INSERT INTO t_SalesPromoWarehouse VALUES(?,?)";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.AddWithValue("SalesPromotionID", oSPWarehouseRow.SalesPromotionID);
                    cmd.Parameters.AddWithValue("WarehouseID", oSPWarehouseRow.WarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();

                }
                catch (Exception ex)
                {
                    throw (ex);
                }

            }
            foreach (DSPromotion.SPDiscountRow oSPDiscountRow in oDSPromotion.SPDiscount)
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                try
                {
                    sSql = "INSERT INTO t_SalesPromoDiscount VALUES(?,?,?,?,?,?)";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.AddWithValue("SalesPromoDiscountID", oSPDiscountRow.SalesPromoDiscountID);
                    cmd.Parameters.AddWithValue("SalesPromotionID", oSPDiscountRow.SalesPromotionID);
                    cmd.Parameters.AddWithValue("ProductGroupType", oSPDiscountRow.ProductGroupType);
                    cmd.Parameters.AddWithValue("ProductGroupID", oSPDiscountRow.ProductGroupID);
                    cmd.Parameters.AddWithValue("DiscountType", oSPDiscountRow.DiscountType);
                    cmd.Parameters.AddWithValue("DiscountPercentage", oSPDiscountRow.DiscountPercentage);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();

                }
                catch (Exception ex)
                {
                    throw (ex);
                }

            }
            foreach (DSPromotion.SPSlabRow oSPSlabRow in oDSPromotion.SPSlab)
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                try
                {
                    sSql = "INSERT INTO t_SalesPromoSlab VALUES(?,?,?,?,?,?,?)";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.AddWithValue("CPSID", oSPSlabRow.CPSID);
                    cmd.Parameters.AddWithValue("SalesPromotionID", oSPSlabRow.SalesPromotionID);
                    cmd.Parameters.AddWithValue("SlabNo", oSPSlabRow.SlabNo);
                    cmd.Parameters.AddWithValue("SlabName", oSPSlabRow.SlabName);
                    cmd.Parameters.AddWithValue("IsActive", oSPSlabRow.IsActive);
                    cmd.Parameters.AddWithValue("DiscountType", oSPSlabRow.DiscountType);
                    cmd.Parameters.AddWithValue("Discount", Convert.ToDouble(oSPSlabRow.Discount));

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();

                }
                catch (Exception ex)
                {
                    throw (ex);
                }

            }
            foreach (DSPromotion.SPSlabReatioRow oSPSlabReatioRow in oDSPromotion.SPSlabReatio)
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                try
                {
                    sSql = "INSERT INTO t_SalesPromoSlabRatio VALUES(?,?,?)";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.AddWithValue("CPSID", oSPSlabReatioRow.CPSID);
                    cmd.Parameters.AddWithValue("ProductID", oSPSlabReatioRow.ProductID);
                    cmd.Parameters.AddWithValue("Qty", oSPSlabReatioRow.Qty);
                    cmd.ExecuteNonQuery();
                    cmd.Dispose();

                }
                catch (Exception ex)
                {
                    throw (ex);
                }
            }
            foreach (DSPromotion.SPFreeProductRow oSPFreeProductRow in oDSPromotion.SPFreeProduct)
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                try
                {
                    sSql = "INSERT INTO t_SalesPromoFreeProduct VALUES(?,?,?)";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.AddWithValue("CPSID", oSPFreeProductRow.CPSID);
                    cmd.Parameters.AddWithValue("ProductID", oSPFreeProductRow.ProductID);
                    cmd.Parameters.AddWithValue("Qty", oSPFreeProductRow.Qty);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();

                }
                catch (Exception ex)
                {
                    throw (ex);
                }

            }

        }
        public void InsertSalesPromotionNew(DSPromotion oDSPromotion, string sTableName, int WHID)
        {
            try
            {
                foreach (DSPromotion.PromoRow oPromoRow in oDSPromotion.Promo)
                {
                    if (CheckSalesPromotionNew(oPromoRow.ConsumerPromoID, sTableName))
                    {
                        ConsumerPromotion _oConsumerPromotion = new ConsumerPromotion();
                        _oConsumerPromotion.ConsumerPromoID = oPromoRow.ConsumerPromoID;
                        _oConsumerPromotion.ConsumerPromoName = oPromoRow.ConsumerPromoName;
                        _oConsumerPromotion.ConsumerPromoNo = oPromoRow.ConsumerPromoNo;
                        _oConsumerPromotion.FromDate = oPromoRow.FromDate;
                        _oConsumerPromotion.ToDate = oPromoRow.ToDate;
                        _oConsumerPromotion.CreateDate = oPromoRow.CreateDate;
                        _oConsumerPromotion.CreateUserID = oPromoRow.CreateUserID;
                        _oConsumerPromotion.Remarks = oPromoRow.Remarks;
                        _oConsumerPromotion.IsActive = oPromoRow.IsActive;
                        _oConsumerPromotion.IsApplicableOnOfferPrice = oPromoRow.IsApplicableOnOfferPrice;

                        if (oPromoRow.IsUpdateDateNull())
                        {
                            _oConsumerPromotion.UpdateDate = null;
                        }
                        else
                        {
                            _oConsumerPromotion.UpdateDate = oPromoRow.UpdateDate;
                        }

                        _oConsumerPromotion.UpdateUserID = oPromoRow.UpdateUserID;
                        _oConsumerPromotion.Status = oPromoRow.Status;
                        _oConsumerPromotion.ApprovedUserID = oPromoRow.ApprovedUserID;
                        if (oPromoRow.IsApprovedDateNull())
                        {
                            _oConsumerPromotion.ApprovedDate = null;
                        }
                        else
                        {
                            _oConsumerPromotion.ApprovedDate = oPromoRow.ApprovedDate;
                        }
                        try
                        {
                            _oConsumerPromotion.UpdateSalesPromo(sTableName);
                            if (sTableName == "t_PromoCP")
                            {
                                AppLogger.LogInfo("Successfully Update Consumer Promo (t_PromoCP)(ConsumerPromoID=" + _oConsumerPromotion.ConsumerPromoID + " and WHID=" + WHID + ")");
                            }
                            else if (sTableName == "t_PromoTP")
                            {
                                AppLogger.LogInfo("Successfully Update Trade Promo (t_PromoTP)(ConsumerPromoID=" + _oConsumerPromotion.ConsumerPromoID + " and WHID=" + WHID + ")");
                            }
                        }
                        catch (Exception ex)
                        {
                            if (sTableName == "t_PromoCP")
                            {
                                AppLogger.LogInfo("Error Update Consumer Promo (t_PromoCP)(ConsumerPromoID=" + _oConsumerPromotion.ConsumerPromoID + " and WHID=" + WHID + ")");
                            }
                            else if (sTableName == "t_PromoTP")
                            {
                                AppLogger.LogInfo("Error Update Trade Promo (t_PromoTP)(ConsumerPromoID=" + _oConsumerPromotion.ConsumerPromoID + " and WHID=" + WHID + ")");
                            }
                            DBController.Instance.RollbackTransaction();
                            throw (ex);

                        }

                    }
                    else
                    {
                        ConsumerPromotion _oConsumerPromotion = new ConsumerPromotion();
                        _oConsumerPromotion.ConsumerPromoID = oPromoRow.ConsumerPromoID;
                        _oConsumerPromotion.ConsumerPromoName = oPromoRow.ConsumerPromoName;
                        _oConsumerPromotion.ConsumerPromoNo = oPromoRow.ConsumerPromoNo;
                        _oConsumerPromotion.FromDate = oPromoRow.FromDate;
                        _oConsumerPromotion.ToDate = oPromoRow.ToDate;
                        _oConsumerPromotion.CreateDate = oPromoRow.CreateDate;
                        _oConsumerPromotion.CreateUserID = oPromoRow.CreateUserID;
                        _oConsumerPromotion.Remarks = oPromoRow.Remarks;
                        _oConsumerPromotion.IsActive = oPromoRow.IsActive;
                        if (oPromoRow.IsUpdateDateNull())
                        {
                            _oConsumerPromotion.UpdateDate = null;
                        }
                        else
                        {
                            _oConsumerPromotion.UpdateDate = oPromoRow.UpdateDate;
                        }

                        _oConsumerPromotion.UpdateUserID = oPromoRow.UpdateUserID;
                        _oConsumerPromotion.Status = oPromoRow.Status;
                        _oConsumerPromotion.ApprovedUserID = oPromoRow.ApprovedUserID;
                        _oConsumerPromotion.IsApplicableOnOfferPrice = oPromoRow.IsApplicableOnOfferPrice;

                        if (oPromoRow.IsApprovedDateNull())
                        {
                            _oConsumerPromotion.ApprovedDate = null;
                        }
                        else
                        {
                            _oConsumerPromotion.ApprovedDate = oPromoRow.ApprovedDate;
                        }
                        try
                        {
                            _oConsumerPromotion.Insert(sTableName);
                            if (sTableName == "t_PromoCP")
                            {
                                AppLogger.LogInfo("Successfully Add Consumer Promo (t_PromoCP)(ConsumerPromoID=" + _oConsumerPromotion.ConsumerPromoID + " and WHID=" + WHID + ")");
                            }
                            else if (sTableName == "t_PromoTP")
                            {
                                AppLogger.LogInfo("Successfully Add Trade Promo (t_PromoTP)(ConsumerPromoID=" + _oConsumerPromotion.ConsumerPromoID + " and WHID=" + WHID + ")");
                            }
                        }
                        catch (Exception ex)
                        {
                            if (sTableName == "t_PromoCP")
                            {
                                AppLogger.LogInfo("Error Adding Consumer Promo (t_PromoCP)(ConsumerPromoID=" + _oConsumerPromotion.ConsumerPromoID + " and WHID=" + WHID + ")");
                            }
                            else if (sTableName == "t_PromoTP")
                            {
                                AppLogger.LogInfo("Error Adding Trade Promo (t_PromoTP)(ConsumerPromoID=" + _oConsumerPromotion.ConsumerPromoID + " and WHID=" + WHID + ")");
                            }
                            DBController.Instance.RollbackTransaction();
                            throw (ex);

                        }

                        ///Product For
                        DSPromotion oDSPromoProductFor = new DSPromotion();
                        if (sTableName == "t_PromoCP")
                        {
                            DataRow[] oDR = oDSPromotion.PromoProductFor.Select(" ConsumerPromoID= '" + oPromoRow.ConsumerPromoID + "'");

                            oDSPromoProductFor.Merge(oDR);
                            oDSPromoProductFor.PromoProductFor.AcceptChanges();
                        }
                        else if (sTableName == "t_PromoTP")
                        {
                            DataRow[] oDR = oDSPromotion.PromoProductFor.Select(" ConsumerPromoID= '" + oPromoRow.ConsumerPromoID + "'");
                            oDSPromoProductFor.Merge(oDR);
                            oDSPromoProductFor.PromoProductFor.AcceptChanges();
                        }
                        try
                        {
                            foreach (DSPromotion.PromoProductForRow oPromoProductForRow in oDSPromoProductFor.PromoProductFor)
                            {
                                ConsumerPromotionProductFor oConsumerPromotionProductFor = new ConsumerPromotionProductFor();
                                if (sTableName == "t_PromoCP")
                                {
                                    oConsumerPromotionProductFor.ConsumerPromoID = oPromoProductForRow.ConsumerPromoID;
                                    oConsumerPromotionProductFor.GroupTypeID = oPromoProductForRow.GroupTypeID;
                                    oConsumerPromotionProductFor.ProductID = oPromoProductForRow.ProductID;
                                    oConsumerPromotionProductFor.TGTQty = oPromoProductForRow.TargetQty;
                                    oConsumerPromotionProductFor.RegularSalesQty = oPromoProductForRow.RegularSalesQty;
                                    oConsumerPromotionProductFor.DiscountRatio = oPromoProductForRow.DiscountRatio;


                                    oConsumerPromotionProductFor.InsertForWEB();

                                }
                                else if (sTableName == "t_PromoTP")
                                {
                                    oConsumerPromotionProductFor.ConsumerPromoID = oPromoProductForRow.ConsumerPromoID;
                                    oConsumerPromotionProductFor.GroupTypeID = oPromoProductForRow.GroupTypeID;
                                    oConsumerPromotionProductFor.ProductGroupID = oPromoProductForRow.ProductGroupID;
                                    oConsumerPromotionProductFor.BrandID = oPromoProductForRow.BrandID;
                                    oConsumerPromotionProductFor.TGTQty = oPromoProductForRow.TargetQty;
                                    oConsumerPromotionProductFor.RegularSalesQty = oPromoProductForRow.RegularSalesQty;
                                    oConsumerPromotionProductFor.DiscountRatio = oPromoProductForRow.DiscountRatio;
                                    oConsumerPromotionProductFor.IsApplicableOnAllSKU = oPromoProductForRow.IsApplicableOnAllSKU;
                                    oConsumerPromotionProductFor.ApplicableProductID = oPromoProductForRow.ApplicableProductID;
                                    oConsumerPromotionProductFor.InsertTPForWEB();
                                }

                            }
                            if (sTableName == "t_PromoCP")
                            {
                                AppLogger.LogInfo("Successfully Add Consumer Promo (t_PromoCPProductFor)(ConsumerPromoID=" + _oConsumerPromotion.ConsumerPromoID + ")");
                            }
                            else if (sTableName == "t_PromoTP")
                            {
                                AppLogger.LogInfo("Successfully Add Trade Promo (t_PromoTPProductFor)(ConsumerPromoID=" + _oConsumerPromotion.ConsumerPromoID + ")");
                            }
                        }
                        catch (Exception ex)
                        {
                            if (sTableName == "t_PromoCP")
                            {
                                AppLogger.LogInfo("Error Adding Consumer Promo (t_PromoCPProductFor)(ConsumerPromoID=" + _oConsumerPromotion.ConsumerPromoID + " and WHID=" + WHID + ")");
                            }
                            else if (sTableName == "t_PromoTP")
                            {
                                AppLogger.LogInfo("Error Adding Trade Promo (t_PromoCPProductFor)(ConsumerPromoID=" + _oConsumerPromotion.ConsumerPromoID + " and WHID=" + WHID + ")");
                            }
                            DBController.Instance.RollbackTransaction();
                            throw (ex);

                        }


                        ///Sales Type
                        DSPromotion oDSPromoSalesType = new DSPromotion();
                        if (sTableName == "t_PromoCP")
                        {
                            DataRow[] oDRSalesType = oDSPromotion.PromoSalesType.Select(" ConsumerPromoID= '" + oPromoRow.ConsumerPromoID + "'");
                            oDSPromoSalesType.Merge(oDRSalesType);
                            oDSPromoSalesType.PromoSalesType.AcceptChanges();
                        }
                        else if (sTableName == "t_PromoTP")
                        {
                            DataRow[] oDRSalesType = oDSPromotion.PromoSalesType.Select(" ConsumerPromoID= '" + oPromoRow.ConsumerPromoID + "'");
                            oDSPromoSalesType.Merge(oDRSalesType);
                            oDSPromoSalesType.PromoSalesType.AcceptChanges();
                        }
                        try
                        {
                            foreach (DSPromotion.PromoSalesTypeRow oPromoSalesTypeRow in oDSPromoSalesType.PromoSalesType)
                            {
                                SPChannel oConsumerPromotionSalesType = new SPChannel();
                                if (sTableName == "t_PromoCP")
                                {
                                    oConsumerPromotionSalesType.SalesPromotionID = oPromoSalesTypeRow.ConsumerPromoID;
                                    oConsumerPromotionSalesType.ChannelID = oPromoSalesTypeRow.SalesType;
                                    oConsumerPromotionSalesType.CustType = oPromoSalesTypeRow.CustomerType;
                                    oConsumerPromotionSalesType.InsertConsumerPromoChannel();
                                }
                                else if (sTableName == "t_PromoTP")
                                {
                                    oConsumerPromotionSalesType.SalesPromotionID = oPromoSalesTypeRow.ConsumerPromoID;
                                    oConsumerPromotionSalesType.ChannelID = oPromoSalesTypeRow.SalesType;
                                    oConsumerPromotionSalesType.CustType = oPromoSalesTypeRow.CustomerType;
                                    oConsumerPromotionSalesType.InsertTPChannel();
                                }

                            }
                            if (sTableName == "t_PromoCP")
                            {
                                AppLogger.LogInfo("Successfully Add Consumer Promo (t_PromoCPSalesType)(ConsumerPromoID=" + _oConsumerPromotion.ConsumerPromoID + " and WHID=" + WHID + ")");
                            }
                            else if (sTableName == "t_PromoTP")
                            {
                                AppLogger.LogInfo("Successfully Add Trade Promo (t_PromoTPSalesType)(ConsumerPromoID=" + _oConsumerPromotion.ConsumerPromoID + " and WHID=" + WHID + ")");
                            }
                        }
                        catch (Exception ex)
                        {
                            if (sTableName == "t_PromoCP")
                            {
                                AppLogger.LogInfo("Error Adding Consumer Promo (t_PromoTPSalesType)(ConsumerPromoID=" + _oConsumerPromotion.ConsumerPromoID + " and WHID=" + WHID + ")");
                            }
                            else if (sTableName == "t_PromoTP")
                            {
                                AppLogger.LogInfo("Error Adding Trade Promo (t_PromoTPSalesType)(ConsumerPromoID=" + _oConsumerPromotion.ConsumerPromoID + " and WHID=" + WHID + ")");
                            }
                            DBController.Instance.RollbackTransaction();
                            throw (ex);

                        }
                        //Promo Type
                        DSPromotion oDSPromoType = new DSPromotion();
                        if (sTableName == "t_PromoCP")
                        {
                            DataRow[] oDRType = oDSPromotion.PromoType.Select(" ConsumerPromoID= '" + oPromoRow.ConsumerPromoID + "'");
                            oDSPromoType.Merge(oDRType);
                            oDSPromoType.PromoSalesType.AcceptChanges();
                        }
                        else if (sTableName == "t_PromoTP")
                        {
                            DataRow[] oDRType = oDSPromotion.PromoType.Select(" ConsumerPromoID= '" + oPromoRow.ConsumerPromoID + "'");
                            oDSPromoType.Merge(oDRType);
                            oDSPromoType.PromoSalesType.AcceptChanges();
                        }
                        try
                        {
                            foreach (DSPromotion.PromoTypeRow oPromoTypeRow in oDSPromoType.PromoType)
                            {
                                SPType oConsumerPromotionType = new SPType();
                                if (sTableName == "t_PromoCP")
                                {
                                    oConsumerPromotionType.SalesPromotionID = oPromoTypeRow.ConsumerPromoID;
                                    oConsumerPromotionType.SalesPromotionTypeID = oPromoTypeRow.ConsumerPromoTypeID;
                                    oConsumerPromotionType.InsertConsumerPromotionType();
                                }
                                else if (sTableName == "t_PromoTP")
                                {
                                    oConsumerPromotionType.SalesPromotionID = oPromoTypeRow.ConsumerPromoID;
                                    oConsumerPromotionType.SalesPromotionTypeID = oPromoTypeRow.ConsumerPromoTypeID;
                                    oConsumerPromotionType.InsertTPType();
                                }

                            }
                            if (sTableName == "t_PromoCP")
                            {
                                AppLogger.LogInfo("Successfully Add Consumer Promo (t_PromoCPType)(ConsumerPromoID=" + _oConsumerPromotion.ConsumerPromoID + " and WHID=" + WHID + ")");
                            }
                            else if (sTableName == "t_PromoTP")
                            {
                                AppLogger.LogInfo("Successfully Add Trade Promo (t_PromoTPType)(ConsumerPromoID=" + _oConsumerPromotion.ConsumerPromoID + " and WHID=" + WHID + ")");
                            }
                        }
                        catch (Exception ex)
                        {
                            if (sTableName == "t_PromoCP")
                            {
                                AppLogger.LogInfo("Error Adding Consumer Promo (t_PromoCPType)(ConsumerPromoID=" + _oConsumerPromotion.ConsumerPromoID + " and WHID=" + WHID + ")");
                            }
                            else if (sTableName == "t_PromoTP")
                            {
                                AppLogger.LogInfo("Error Adding Trade Promo (t_PromoTPType)(ConsumerPromoID=" + _oConsumerPromotion.ConsumerPromoID + " and WHID=" + WHID + ")");
                            }
                            DBController.Instance.RollbackTransaction();
                            throw (ex);

                        }
                        ///Warehouse
                        DSPromotion oDSPromoWarehouse = new DSPromotion();
                        if (sTableName == "t_PromoCP")
                        {
                            DataRow[] oDRWarehouse = oDSPromotion.PromoWarehouse.Select(" ConsumerPromoID= '" + oPromoRow.ConsumerPromoID + "'");
                            oDSPromoWarehouse.Merge(oDRWarehouse);
                            oDSPromoWarehouse.PromoWarehouse.AcceptChanges();
                        }
                        else if (sTableName == "t_PromoTP")
                        {
                            DataRow[] oDRWarehouse = oDSPromotion.PromoWarehouse.Select(" ConsumerPromoID= '" + oPromoRow.ConsumerPromoID + "'");
                            oDSPromoWarehouse.Merge(oDRWarehouse);
                            oDSPromoWarehouse.PromoWarehouse.AcceptChanges();
                        }
                        try
                        {
                            foreach (DSPromotion.PromoWarehouseRow oPromoWarehouseRow in oDSPromoWarehouse.PromoWarehouse)
                            {
                                SPWarehouse oConsumerWarehouse = new SPWarehouse();
                                if (sTableName == "t_PromoCP")
                                {
                                    oConsumerWarehouse.SalesPromotionID = oPromoWarehouseRow.ConsumerPromoID;
                                    oConsumerWarehouse.WarehouseID = oPromoWarehouseRow.WarehouseID;
                                    oConsumerWarehouse.InsertConsumerPromoWarehouse();
                                }
                                else if (sTableName == "t_PromoTP")
                                {
                                    oConsumerWarehouse.SalesPromotionID = oPromoWarehouseRow.ConsumerPromoID;
                                    oConsumerWarehouse.WarehouseID = oPromoWarehouseRow.WarehouseID;
                                    oConsumerWarehouse.InsertTPWarehouse();
                                }

                            }
                            if (sTableName == "t_PromoCP")
                            {
                                AppLogger.LogInfo("Successfully Add Consumer Promo (t_PromoCPWarehouse)(ConsumerPromoID=" + _oConsumerPromotion.ConsumerPromoID + " and WHID=" + WHID + ")");
                            }
                            else if (sTableName == "t_PromoTP")
                            {
                                AppLogger.LogInfo("Successfully Add Trade Promo (t_PromoTPWarehouse)(ConsumerPromoID=" + _oConsumerPromotion.ConsumerPromoID + " and WHID=" + WHID + ")");
                            }
                        }
                        catch (Exception ex)
                        {
                            if (sTableName == "t_PromoCP")
                            {
                                AppLogger.LogInfo("Error Adding Consumer Promo (t_PromoTPWarehouse)(ConsumerPromoID=" + _oConsumerPromotion.ConsumerPromoID + " and WHID=" + WHID + ")");
                            }
                            else if (sTableName == "t_PromoTP")
                            {
                                AppLogger.LogInfo("Error Adding Trade Promo (t_PromoTPWarehouse)(ConsumerPromoID=" + _oConsumerPromotion.ConsumerPromoID + " and WHID=" + WHID + ")");
                            }
                            DBController.Instance.RollbackTransaction();
                            throw (ex);

                        }
                        ///Discount Contribution
                        DSPromotion oDSPromoDiscountContribution = new DSPromotion();
                        if (sTableName == "t_PromoCP")
                        {
                            DataRow[] oDRPromoDiscountContribution = oDSPromotion.PromoDiscountContribution.Select(" ConsumerPromoID= '" + oPromoRow.ConsumerPromoID + "'");
                            oDSPromoDiscountContribution.Merge(oDRPromoDiscountContribution);
                            oDSPromoDiscountContribution.PromoDiscountContribution.AcceptChanges();
                        }
                        else if (sTableName == "t_PromoTP")
                        {
                            DataRow[] oDRPromoDiscountContribution = oDSPromotion.PromoDiscountContribution.Select(" ConsumerPromoID= '" + oPromoRow.ConsumerPromoID + "'");
                            oDSPromoDiscountContribution.Merge(oDRPromoDiscountContribution);
                            oDSPromoDiscountContribution.PromoDiscountContribution.AcceptChanges();
                        }
                        try
                        {
                            foreach (DSPromotion.PromoDiscountContributionRow oPromoDiscountContributionRow in oDSPromoDiscountContribution.PromoDiscountContribution)
                            {
                                PromoDiscountContributor oPromoDiscountContributor = new PromoDiscountContributor();
                                if (sTableName == "t_PromoCP")
                                {
                                    oPromoDiscountContributor.ConsumerPromoID = oPromoDiscountContributionRow.ConsumerPromoID;
                                    oPromoDiscountContributor.DiscountContributorID = oPromoDiscountContributionRow.DiscountContributorID;
                                    oPromoDiscountContributor.Amount = oPromoDiscountContributionRow.Amount;
                                    oPromoDiscountContributor.AddCPDiscountContribution();
                                }
                                else if (sTableName == "t_PromoTP")
                                {
                                    oPromoDiscountContributor.ConsumerPromoID = oPromoDiscountContributionRow.ConsumerPromoID;
                                    oPromoDiscountContributor.DiscountContributorID = oPromoDiscountContributionRow.DiscountContributorID;
                                    oPromoDiscountContributor.Amount = oPromoDiscountContributionRow.Amount;
                                    oPromoDiscountContributor.AddTPDiscountContribution();
                                }
                            }
                            if (sTableName == "t_PromoCP")
                            {
                                AppLogger.LogInfo("Successfully Add Consumer Promo (t_PromoCPDiscountContribution)(ConsumerPromoID=" + _oConsumerPromotion.ConsumerPromoID + " and WHID=" + WHID + ")");
                            }
                            else if (sTableName == "t_PromoTP")
                            {
                                AppLogger.LogInfo("Successfully Add Trade Promo (t_PromoTPDiscountContribution)(ConsumerPromoID=" + _oConsumerPromotion.ConsumerPromoID + " and WHID=" + WHID + ")");
                            }
                        }
                        catch (Exception ex)
                        {
                            if (sTableName == "t_PromoCP")
                            {
                                AppLogger.LogInfo("Error Adding Consumer Promo (t_PromoTPWarehouse)(ConsumerPromoID=" + _oConsumerPromotion.ConsumerPromoID + " and WHID=" + WHID + ")");
                            }
                            else if (sTableName == "t_PromoTP")
                            {
                                AppLogger.LogInfo("Error Adding Trade Promo (t_PromoTPWarehouse)(ConsumerPromoID=" + _oConsumerPromotion.ConsumerPromoID + " and WHID=" + WHID + ")");
                            }
                            DBController.Instance.RollbackTransaction();
                            throw (ex);

                        }

                        ///Promo Slab 
                        try
                        {
                            DSPromotion oDSPromoSlab = new DSPromotion();
                            if (sTableName == "t_PromoCP")
                            {
                                DataRow[] oDRPromoSlab = oDSPromotion.PromoSlab.Select(" ConsumerPromoID= '" + oPromoRow.ConsumerPromoID + "'");
                                oDSPromoSlab.Merge(oDRPromoSlab);
                                oDSPromoSlab.PromoSlab.AcceptChanges();
                            }
                            else if (sTableName == "t_PromoTP")
                            {
                                DataRow[] oDRPromoSlab = oDSPromotion.PromoSlab.Select(" ConsumerPromoID= '" + oPromoRow.ConsumerPromoID + "'");
                                oDSPromoSlab.Merge(oDRPromoSlab);
                                oDSPromoSlab.PromoSlab.AcceptChanges();
                            }

                            foreach (DSPromotion.PromoSlabRow oPromoSlabRow in oDSPromoSlab.PromoSlab)
                            {
                                ConsumerPromotionSlab oConsumerPromotionSlab = new ConsumerPromotionSlab();
                                if (sTableName == "t_PromoCP")
                                {
                                    oConsumerPromotionSlab.ConsumerPromoID = oPromoSlabRow.ConsumerPromoID;
                                    oConsumerPromotionSlab.SlabID = oPromoSlabRow.SlabID;
                                    oConsumerPromotionSlab.SlabName = oPromoSlabRow.SlabName;
                                    oConsumerPromotionSlab.IsActive = oPromoSlabRow.IsActive;
                                    oConsumerPromotionSlab.CreateDate = oPromoSlabRow.CreateDate;
                                    oConsumerPromotionSlab.CreateUserID = oPromoSlabRow.CreateUserID;
                                    if (oPromoSlabRow.IsUpdateDateNull())
                                        oConsumerPromotionSlab.UpdateDate = null;
                                    else oConsumerPromotionSlab.UpdateDate = oPromoSlabRow.UpdateDate;

                                    oConsumerPromotionSlab.UpdateUserID = oPromoSlabRow.UpdateUserID;
                                    oConsumerPromotionSlab.AddCP();

                                    ConsumerPromotionSlabRatio oConsumerPromotionSlabRatio = new ConsumerPromotionSlabRatio();
                                    DSPromotion oDSPromoSlabRatio = new DSPromotion();
                                    DataRow[] oDRPromoSlabRatio = oDSPromotion.PromoSlabRatio.Select(" ConsumerPromoID= '" + oPromoRow.ConsumerPromoID + "' and SlabID= '" + oPromoSlabRow.SlabID + "'");
                                    oDSPromoSlabRatio.Merge(oDRPromoSlabRatio);
                                    oDSPromoSlabRatio.PromoSlabRatio.AcceptChanges();
                                    foreach (DSPromotion.PromoSlabRatioRow oPromoSlabRatioRow in oDSPromoSlabRatio.PromoSlabRatio)
                                    {
                                        oConsumerPromotionSlabRatio.ConsumerPromoID = oPromoSlabRatioRow.ConsumerPromoID;
                                        oConsumerPromotionSlabRatio.SlabID = oPromoSlabRatioRow.SlabID;
                                        oConsumerPromotionSlabRatio.ProductID = oPromoSlabRatioRow.ProductID;
                                        oConsumerPromotionSlabRatio.Qty = oPromoSlabRatioRow.Qty;
                                        oConsumerPromotionSlabRatio.Insert();
                                    }

                                }
                                else if (sTableName == "t_PromoTP")
                                {
                                    oConsumerPromotionSlab.ConsumerPromoID = oPromoSlabRow.ConsumerPromoID;
                                    oConsumerPromotionSlab.SlabID = oPromoSlabRow.SlabID;
                                    oConsumerPromotionSlab.SlabName = oPromoSlabRow.SlabName;
                                    oConsumerPromotionSlab.IsActive = oPromoSlabRow.IsActive;
                                    oConsumerPromotionSlab.CreateDate = oPromoSlabRow.CreateDate;
                                    oConsumerPromotionSlab.CreateUserID = oPromoSlabRow.CreateUserID;
                                    if (oPromoSlabRow.IsUpdateDateNull())
                                        oConsumerPromotionSlab.UpdateDate = null;
                                    else oConsumerPromotionSlab.UpdateDate = oPromoSlabRow.UpdateDate;
                                    oConsumerPromotionSlab.UpdateUserID = oPromoSlabRow.UpdateUserID;
                                    oConsumerPromotionSlab.MinInvoiceQty = oPromoSlabRow.MinInvoiceQty;
                                    oConsumerPromotionSlab.AddTP();

                                    ConsumerPromotionSlabRatio oConsumerPromotionSlabRatioTP = new ConsumerPromotionSlabRatio();
                                    DSPromotion oDSPromoSlabRatioTP = new DSPromotion();
                                    DataRow[] oDRPromoSlabRatio = oDSPromotion.PromoSlabRatio.Select(" ConsumerPromoID= '" + oPromoRow.ConsumerPromoID + "' and SlabID= '" + oPromoSlabRow.SlabID + "'");
                                    oDSPromoSlabRatioTP.Merge(oDRPromoSlabRatio);
                                    oDSPromoSlabRatioTP.PromoSlabRatio.AcceptChanges();

                                    foreach (DSPromotion.PromoSlabRatioRow oPromoSlabRatioRow in oDSPromoSlabRatioTP.PromoSlabRatio)
                                    {
                                        oConsumerPromotionSlabRatioTP.ConsumerPromoID = oPromoSlabRatioRow.ConsumerPromoID;
                                        oConsumerPromotionSlabRatioTP.SlabID = oPromoSlabRatioRow.SlabID;
                                        oConsumerPromotionSlabRatioTP.GroupTypeID = oPromoSlabRatioRow.GroupTypeID;
                                        oConsumerPromotionSlabRatioTP.ProductGroupID = oPromoSlabRatioRow.ProductGroupID;
                                        oConsumerPromotionSlabRatioTP.BrandID = oPromoSlabRatioRow.BrandID;
                                        oConsumerPromotionSlabRatioTP.Qty = oPromoSlabRatioRow.MinQty;
                                        oConsumerPromotionSlabRatioTP.InsertTP();
                                    }
                                }

                                ///Promo Offer 
                                DSPromotion oDSPromoOffer = new DSPromotion();
                                if (sTableName == "t_PromoCP")
                                {
                                    DataRow[] oDRPromoOffer = oDSPromotion.PromoOffer.Select(" ConsumerPromoID= '" + oPromoRow.ConsumerPromoID + "' and SlabID= '" + oPromoSlabRow.SlabID + "'");
                                    oDSPromoOffer.Merge(oDRPromoOffer);
                                    oDSPromoOffer.PromoOffer.AcceptChanges();
                                }
                                else if (sTableName == "t_PromoTP")
                                {
                                    DataRow[] oDRPromoOffer = oDSPromotion.PromoOffer.Select(" ConsumerPromoID= '" + oPromoRow.ConsumerPromoID + "' and SlabID= '" + oPromoSlabRow.SlabID + "'");
                                    oDSPromoOffer.Merge(oDRPromoOffer);
                                    oDSPromoOffer.PromoOffer.AcceptChanges();
                                }

                                foreach (DSPromotion.PromoOfferRow oPromoOfferRow in oDSPromoOffer.PromoOffer)
                                {
                                    ConsumerPromotionOffer oConsumerPromotionOffer = new ConsumerPromotionOffer();
                                    if (sTableName == "t_PromoCP")
                                    {
                                        oConsumerPromotionOffer.ConsumerPromoID = oPromoSlabRow.ConsumerPromoID;
                                        oConsumerPromotionOffer.SlabID = oPromoOfferRow.SlabID;
                                        oConsumerPromotionOffer.OfferID = oPromoOfferRow.OfferID;
                                        oConsumerPromotionOffer.OfferName = oPromoOfferRow.OfferName;
                                        oConsumerPromotionOffer.Description = oPromoOfferRow.Description;
                                        oConsumerPromotionOffer.CreateUserID = oPromoOfferRow.CreateUserID;
                                        oConsumerPromotionOffer.CreateDate = oPromoOfferRow.CreateDate;
                                        oConsumerPromotionOffer.IsActive = oPromoOfferRow.IsActive;
                                        oConsumerPromotionOffer.AddOffer(sTableName);

                                        ConsumerPromotionOfferDetail oConsumerPromotionOfferDetail = new ConsumerPromotionOfferDetail();
                                        DSPromotion oDSPromoOfferDetail = new DSPromotion();
                                        DataRow[] oDRPromoOfferDetail = oDSPromotion.PromoOfferDetail.Select(" ConsumerPromoID= '" + oPromoRow.ConsumerPromoID + "' and SlabID= '" + oPromoSlabRow.SlabID + "' and OfferID= '" + oPromoOfferRow.OfferID + "'");
                                        oDSPromoOfferDetail.Merge(oDRPromoOfferDetail);
                                        oDSPromoOfferDetail.PromoOfferDetail.AcceptChanges();
                                        foreach (DSPromotion.PromoOfferDetailRow oPromoOfferDetailRow in oDSPromoOfferDetail.PromoOfferDetail)
                                        {
                                            oConsumerPromotionOfferDetail.ConsumerPromoID = oPromoOfferDetailRow.ConsumerPromoID;
                                            oConsumerPromotionOfferDetail.SlabID = oPromoOfferDetailRow.SlabID;
                                            oConsumerPromotionOfferDetail.OfferID = oPromoOfferDetailRow.OfferID;
                                            oConsumerPromotionOfferDetail.OfferType = oPromoOfferDetailRow.OfferType;
                                            oConsumerPromotionOfferDetail.OfferProductID = oPromoOfferDetailRow.OfferProductID;
                                            oConsumerPromotionOfferDetail.OfferQty = oPromoOfferDetailRow.OfferQty;
                                            oConsumerPromotionOfferDetail.Discount = oPromoOfferDetailRow.Discount;
                                            oConsumerPromotionOfferDetail.EMITenureID = oPromoOfferDetailRow.EMITenureID;
                                            oConsumerPromotionOfferDetail.Add();
                                        }

                                    }
                                    else if (sTableName == "t_PromoTP")
                                    {
                                        oConsumerPromotionOffer.ConsumerPromoID = oPromoSlabRow.ConsumerPromoID;
                                        oConsumerPromotionOffer.SlabID = oPromoOfferRow.SlabID;
                                        oConsumerPromotionOffer.OfferID = oPromoOfferRow.OfferID;
                                        oConsumerPromotionOffer.OfferName = oPromoOfferRow.OfferName;
                                        oConsumerPromotionOffer.Description = oPromoOfferRow.Description;
                                        oConsumerPromotionOffer.CreateUserID = oPromoOfferRow.CreateUserID;
                                        oConsumerPromotionOffer.CreateDate = oPromoOfferRow.CreateDate;
                                        oConsumerPromotionOffer.IsActive = oPromoOfferRow.IsActive;
                                        oConsumerPromotionOffer.AddOffer(sTableName);

                                        ConsumerPromotionOfferDetail oConsumerPromotionOfferDetail = new ConsumerPromotionOfferDetail();
                                        DSPromotion oDSPromoOfferDetail = new DSPromotion();
                                        DataRow[] oDRPromoOfferDetail = oDSPromotion.PromoOfferDetail.Select(" ConsumerPromoID= '" + oPromoRow.ConsumerPromoID + "' and SlabID= '" + oPromoSlabRow.SlabID + "' and OfferID= '" + oPromoOfferRow.OfferID + "'");
                                        oDSPromoOfferDetail.Merge(oDRPromoOfferDetail);
                                        oDSPromoOfferDetail.PromoOfferDetail.AcceptChanges();
                                        foreach (DSPromotion.PromoOfferDetailRow oPromoOfferDetailRow in oDSPromoOfferDetail.PromoOfferDetail)
                                        {
                                            oConsumerPromotionOfferDetail.ConsumerPromoID = oPromoOfferDetailRow.ConsumerPromoID;
                                            oConsumerPromotionOfferDetail.SlabID = oPromoOfferDetailRow.SlabID;
                                            oConsumerPromotionOfferDetail.OfferID = oPromoOfferDetailRow.OfferID;
                                            oConsumerPromotionOfferDetail.OfferType = oPromoOfferDetailRow.OfferType;
                                            oConsumerPromotionOfferDetail.OfferProductID = oPromoOfferDetailRow.OfferProductID;
                                            oConsumerPromotionOfferDetail.OfferQty = oPromoOfferDetailRow.OfferQty;
                                            oConsumerPromotionOfferDetail.Discount = oPromoOfferDetailRow.Discount;
                                            oConsumerPromotionOfferDetail.AddTP();
                                        }
                                    }

                                }

                            }

                            if (sTableName == "t_PromoCP")
                            {
                                AppLogger.LogInfo("Successfully Add Consumer Promo (t_PromoCPSlab)(ConsumerPromoID=" + _oConsumerPromotion.ConsumerPromoID + " and WHID=" + WHID + ")");
                            }
                            else if (sTableName == "t_PromoTP")
                            {
                                AppLogger.LogInfo("Successfully Add Trade Promo (t_PromoTPSlab)(ConsumerPromoID=" + _oConsumerPromotion.ConsumerPromoID + " and WHID=" + WHID + ")");
                            }
                        }
                        catch (Exception ex)
                        {
                            if (sTableName == "t_PromoCP")
                            {
                                AppLogger.LogInfo("Error Adding Consumer Promo (t_PromoCPSlab)(ConsumerPromoID=" + _oConsumerPromotion.ConsumerPromoID + " and WHID=" + WHID + ")");
                            }
                            else if (sTableName == "t_PromoTP")
                            {
                                AppLogger.LogInfo("Error Adding Trade Promo (t_PromoTPSlab)(ConsumerPromoID=" + _oConsumerPromotion.ConsumerPromoID + " and WHID=" + WHID + ")");
                            }
                            DBController.Instance.RollbackTransaction();
                            throw (ex);

                        }

                    }

                }
            }
            catch (Exception ex)
            {
                throw (ex);
                if (sTableName == "t_PromoCP")
                {
                    AppLogger.LogInfo("Error Adding Consumer Promo");
                }
                else if (sTableName == "t_PromoTP")
                {
                    AppLogger.LogInfo("Error Adding Trade Promo");
                }
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }

        ///
        // Insert Promotion Other then TD
        ///
        public void InsertPromotioOhterThenTD(DSPromotion oDSPromotion)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            foreach (DSPromotion.SalesPromotionRow oSalesPromotionRow in oDSPromotion.SalesPromotion)
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                if (int.Parse(oSalesPromotionRow.TransferType.ToString()) == 1)
                {

                    try
                    {
                        sSql = "INSERT INTO t_SalesPromotion VALUES(?,?,?,?,?,?)";
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.AddWithValue("SalesPromotionID", oSalesPromotionRow.SalesPromotionID);
                        cmd.Parameters.AddWithValue("SalesPromotionNo", oSalesPromotionRow.SalesPromotionNo);
                        cmd.Parameters.AddWithValue("SalesPromotionName", oSalesPromotionRow.SalesPromotionName);
                        cmd.Parameters.AddWithValue("FromDate", oSalesPromotionRow.FromDate);
                        cmd.Parameters.AddWithValue("ToDate", oSalesPromotionRow.Todate);
                        cmd.Parameters.AddWithValue("IsActive", oSalesPromotionRow.IsActive);

                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
                if (int.Parse(oSalesPromotionRow.TransferType.ToString()) == 2)
                {
                    //Delete Sales promotion detail
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "Delete from t_SalesPromotionDetail Where SalesPromotionID =? ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("SalesPromotionID", oSalesPromotionRow.SalesPromotionID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();

                    //Delete Sales promotion Customer Type
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "Delete from t_SalesPromotionCustomerType Where SalesPromotionID =? ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("SalesPromotionID", oSalesPromotionRow.SalesPromotionID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();

                    //Delete Sales promotion Market Group
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "Delete from t_SalesPromotionMarketGroup Where SalesPromotionID =? ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("SalesPromotionID", oSalesPromotionRow.SalesPromotionID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();

                    try
                    {
                        cmd.Dispose();
                        cmd = DBController.Instance.GetCommand();

                        sSql = "Update t_SalesPromotion Set SalesPromotionNo=?,SalesPromotionName=?,FromDate=?,ToDate=?, " +
                                "IsActive=? Where SalesPromotionID =? ";
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("SalesPromotionNo", oSalesPromotionRow.SalesPromotionNo);
                        cmd.Parameters.AddWithValue("SalesPromotionName", oSalesPromotionRow.SalesPromotionName);
                        cmd.Parameters.AddWithValue("FromDate", oSalesPromotionRow.FromDate);
                        cmd.Parameters.AddWithValue("ToDate", oSalesPromotionRow.Todate);
                        cmd.Parameters.AddWithValue("IsActive", oSalesPromotionRow.IsActive);

                        cmd.Parameters.AddWithValue("SalesPromotionID", oSalesPromotionRow.SalesPromotionID);

                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }

                }
            }
            foreach (DSPromotion.SalesPromotionDetailRow oSPProductRow in oDSPromotion.SalesPromotionDetail)
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                try
                {
                    sSql = "INSERT INTO t_SalesPromotionDetail VALUES(?,?,?,?,?,?)";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.AddWithValue("SalesPromotionID", oSPProductRow.SalesPromotionID);
                    cmd.Parameters.AddWithValue("ProductID", oSPProductRow.ProductID);
                    cmd.Parameters.AddWithValue("SalesQty", oSPProductRow.SalesQty);
                    cmd.Parameters.AddWithValue("FreeProductID", oSPProductRow.FreeProductID);
                    cmd.Parameters.AddWithValue("FreeQty", oSPProductRow.FreeQty);
                    cmd.Parameters.AddWithValue("Discount", oSPProductRow.Discount);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();

                }
                catch (Exception ex)
                {
                    throw (ex);
                }

            }
            foreach (DSPromotion.SalesPromotionCustTypeRow oSPCustTypeRow in oDSPromotion.SalesPromotionCustType)
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                try
                {
                    sSql = "INSERT INTO t_SalesPromotionCustomerType VALUES(?,?)";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.AddWithValue("SalesPromotionID", oSPCustTypeRow.SalesPromotionID);
                    cmd.Parameters.AddWithValue("CustTypeID", oSPCustTypeRow.CustTypeID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();

                }
                catch (Exception ex)
                {
                    throw (ex);
                }

            }
            foreach (DSPromotion.SalesPromotionMarketGroupRow oSPMarketGroupRow in oDSPromotion.SalesPromotionMarketGroup)
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                try
                {
                    sSql = "INSERT INTO t_SalesPromotionMarketGroup VALUES(?,?)";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.AddWithValue("SalesPromotionID", oSPMarketGroupRow.SalesPromotionID);
                    cmd.Parameters.AddWithValue("MarketGroupID", oSPMarketGroupRow.MarketGroupID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();

                }
                catch (Exception ex)
                {
                    throw (ex);
                }

            }

        }

        ///
        // Insert Barcode
        ///
        public void InsertBarcode(DSBarcode oDSBarcode)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Insert Barcode

            foreach (DSBarcode.BarcodeRow oBarcodeRow in oDSBarcode.Barcode)
            {
                try
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "INSERT INTO t_ProductBarcode VALUES(?,?,?,?,?,?)";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.AddWithValue("WarehouseID", oBarcodeRow.WarehouseID);
                    cmd.Parameters.AddWithValue("ProductID", oBarcodeRow.ProductID);
                    cmd.Parameters.AddWithValue("Barcode", oBarcodeRow.Barcode);
                    cmd.Parameters.AddWithValue("Status", oBarcodeRow.Status);
                    cmd.Parameters.AddWithValue("RefTranID", null);
                    cmd.Parameters.AddWithValue("IsActive", oBarcodeRow.IsActive);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();

                }
                catch (Exception ex)
                {
                    throw (ex);
                }

            }

        }

        ///
        // Insert Warranty
        ///
        public void InsertWarranty(DSWarranty oDSWarranty)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Insert Warranty

            foreach (DSWarranty.WarrantyParamRow oWarrantyParamRow in oDSWarranty.WarrantyParam)
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                WarrantyParam oWarrantyParam = new WarrantyParam();
                oWarrantyParam.WarrantyParamID = oWarrantyParamRow.WarrantyParamID;
                oWarrantyParam.ProductID = oWarrantyParamRow.ProductID;
                oWarrantyParam.ServiceWarranty = oWarrantyParamRow.ServiceWarranty;
                oWarrantyParam.PartsWarranty = oWarrantyParamRow.PartsWarranty;
                oWarrantyParam.SpecialComponentWarranty = oWarrantyParamRow.SpecialComponentWarranty;
                oWarrantyParam.IsCurrent = oWarrantyParamRow.IsCurrent;
                oWarrantyParam.IsPrintWarrantyCard = oWarrantyParamRow.IsPrintWarrantyCard;
                oWarrantyParam.IsStoreBarcode = oWarrantyParamRow.IsStoreBarcode;
                oWarrantyParam.EffectDate = oWarrantyParamRow.EffectDate;
                oWarrantyParam.CreateDate = oWarrantyParamRow.CreateDate;
                oWarrantyParam.CreateUserID = oWarrantyParamRow.CreateUserID;


                try
                {
                    if (oWarrantyParam.CheckWarranty(oWarrantyParamRow.WarrantyParamID))
                    {
                        oWarrantyParam.Edit();
                    }
                    else
                    {
                        oWarrantyParam.AddForPOS();
                    }

                }
                catch (Exception ex)
                {
                    throw (ex);
                }
            }

        }

        ///
        // Insert OfficeItem
        ///
        public void InsertOfficeItem(DSOfficeItem oDSOfficeItem)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Product Insert
            foreach (DSOfficeItem.OfficeItemRow oOfficeItemRow in oDSOfficeItem.OfficeItem)
            {

                if (CheckOfficeItem(oOfficeItemRow.ID))
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();
                    sSql = "INSERT INTO t_OfficeItems (ID, Code, ArticlesName, Category, CreateDate, CreateUserID) VALUES(?,?,?,?,?,?)";
                    try
                    {
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("ID", oOfficeItemRow.ID);
                        cmd.Parameters.AddWithValue("Code", oOfficeItemRow.Code);
                        cmd.Parameters.AddWithValue("ArticlesName", oOfficeItemRow.ArticlesName);
                        cmd.Parameters.AddWithValue("Category", oOfficeItemRow.Category);
                        cmd.Parameters.AddWithValue("CreateDate", oOfficeItemRow.CreateDate);
                        cmd.Parameters.AddWithValue("CreateUserID", oOfficeItemRow.CreateUseID);

                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
                else
                {
                    try
                    {
                        cmd.Dispose();
                        cmd = DBController.Instance.GetCommand();

                        sSql = "UPDATE t_OfficeItems SET Code = ?, ArticlesName = ?, Category = ?, CreateDate = ?, CreateUserID = ? WHERE ID = ?";

                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.AddWithValue("Code", oOfficeItemRow.Code);
                        cmd.Parameters.AddWithValue("ArticlesName", oOfficeItemRow.ArticlesName);
                        cmd.Parameters.AddWithValue("Category", oOfficeItemRow.Category);
                        cmd.Parameters.AddWithValue("CreateDate", oOfficeItemRow.CreateDate);
                        cmd.Parameters.AddWithValue("CreateUserID", oOfficeItemRow.CreateUseID);

                        cmd.Parameters.AddWithValue("ID", oOfficeItemRow.ID);

                        int nCount = cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
            }
        }

        ///
        // Insert OfficeItem
        ///
        public void InsertTpVatProduct(DSTPVatProduct oDSTPVatProduct)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Product Insert
            foreach (DSTPVatProduct.TPVatProductRow oTPVatProductRow in oDSTPVatProduct.TPVatProduct)
            {

                if (CheckTPVatProduct(oTPVatProductRow.ProductID))
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();
                    sSql = "INSERT INTO t_TPVatProduct (ProductID , CreateUserID , CreateDate , Status , UpdateDate, UpdateUserID,Comment) VALUES(?,?,?,?,?,?,?)";
                    try
                    {
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("ProductID", oTPVatProductRow.ProductID);
                        cmd.Parameters.AddWithValue("CreateUserID", oTPVatProductRow.CreateUserID);
                        cmd.Parameters.AddWithValue("CreateDate", oTPVatProductRow.CreateDate);
                        cmd.Parameters.AddWithValue("Status", oTPVatProductRow.Status);

                        if (oTPVatProductRow["UpdateDate"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("UpdateDate", oTPVatProductRow.UpdateDate);
                        else cmd.Parameters.AddWithValue("UpdateDate", null);
                        if (oTPVatProductRow["UpdateUserID"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("UpdateUserID", oTPVatProductRow.UpdateUserID);
                        else cmd.Parameters.AddWithValue("UpdateUserID", -1);

                        if (oTPVatProductRow["Comment"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("Comment", oTPVatProductRow.Comment);
                        else cmd.Parameters.AddWithValue("Comment", null);
                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
                else
                {
                    try
                    {
                        cmd.Dispose();
                        cmd = DBController.Instance.GetCommand();

                        sSql = "UPDATE t_TPVatProduct SET CreateDate = ?, CreateUserID = ?, Status = ?, UpdateDate = ?, UpdateUserID = ?,Comment = ? WHERE ProductID = ?";

                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("CreateDate", oTPVatProductRow.CreateDate);
                        cmd.Parameters.AddWithValue("CreateUserID", oTPVatProductRow.CreateUserID);
                        cmd.Parameters.AddWithValue("Status", oTPVatProductRow.Status);
                        if (oTPVatProductRow["UpdateDate"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("UpdateDate", oTPVatProductRow.UpdateDate);
                        else cmd.Parameters.AddWithValue("UpdateDate", null);
                        if (oTPVatProductRow["UpdateUserID"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("UpdateUserID", oTPVatProductRow.UpdateUserID);
                        else cmd.Parameters.AddWithValue("UpdateUserID", -1);
                        if (oTPVatProductRow["Comment"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("Comment", oTPVatProductRow.Comment);
                        else cmd.Parameters.AddWithValue("Comment", null);
                        cmd.Parameters.AddWithValue("ProductID", oTPVatProductRow.ProductID);

                        int nCount = cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
            }
        }

        ///
        // Insert CalendarWeek
        ///
        public void InsertCalendarWeek(DSCalendarWeek oDSCalendarWeek)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";
            int nCount = 0;
            foreach (DSCalendarWeek.CalendarWeekRow oCalendarWeekRow in oDSCalendarWeek.CalendarWeek)
            {
                //if (nCount == 0)
                //{
                //    cmd.Dispose();
                //    cmd = DBController.Instance.GetCommand();
                //    try
                //    {
                //        sSql = "DELETE FROM t_CalendarWeek WHERE [CalendarID]=?";
                //        cmd.CommandText = sSql;
                //        cmd.CommandType = CommandType.Text;
                //        cmd.Parameters.AddWithValue("CalendarID", oCalendarWeekRow.CalendarID);
                //        cmd.ExecuteNonQuery();
                //        cmd.Dispose();
                //    }
                //    catch (Exception ex)
                //    {
                //        throw (ex);
                //    }
                //    nCount++;
                //}

                if (CheckCalendarWeek(oCalendarWeekRow.CalendarID, oCalendarWeekRow.ID))
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "INSERT INTO t_CalendarWeek (ID, CalendarID, CYear, CMonth, WeekNo, FromDate, ToDate ) VALUES(?,?,?,?,?,?,?)";
                    try
                    {
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("ID", oCalendarWeekRow.ID);
                        cmd.Parameters.AddWithValue("CalendarID", oCalendarWeekRow.CalendarID);
                        cmd.Parameters.AddWithValue("CYear", oCalendarWeekRow.CYear);
                        cmd.Parameters.AddWithValue("CMonth", oCalendarWeekRow.CMonth);
                        cmd.Parameters.AddWithValue("WeekNo", oCalendarWeekRow.WeekNo);
                        cmd.Parameters.AddWithValue("FromDate", oCalendarWeekRow.FromDate);
                        cmd.Parameters.AddWithValue("ToDate", oCalendarWeekRow.ToDate);

                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
                else
                {

                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();
                    try
                    {
                        sSql = "DELETE FROM t_CalendarWeek WHERE [CalendarID]=? and [ID]=?";
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.AddWithValue("CalendarID", oCalendarWeekRow.CalendarID);
                        cmd.Parameters.AddWithValue("ID", oCalendarWeekRow.ID);
                        cmd.ExecuteNonQuery();
                        cmd.Dispose();
                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }

                    try
                    {
                        cmd.Dispose();
                        cmd = DBController.Instance.GetCommand();
                        sSql = "INSERT INTO t_CalendarWeek (ID, CalendarID, CYear, CMonth, WeekNo, FromDate, ToDate ) VALUES(?,?,?,?,?,?,?)";
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.AddWithValue("ID", oCalendarWeekRow.ID);
                        cmd.Parameters.AddWithValue("CalendarID", oCalendarWeekRow.CalendarID);
                        cmd.Parameters.AddWithValue("CYear", oCalendarWeekRow.CYear);
                        cmd.Parameters.AddWithValue("CMonth", oCalendarWeekRow.CMonth);
                        cmd.Parameters.AddWithValue("WeekNo", oCalendarWeekRow.WeekNo);
                        cmd.Parameters.AddWithValue("FromDate", oCalendarWeekRow.FromDate);
                        cmd.Parameters.AddWithValue("ToDate", oCalendarWeekRow.ToDate);
                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
            }
        }

        ///
        // Insert PlanCustomerTarget
        ///
        public void InsertPlanCustomerTarget(DSPlanCustomerTarget oDSPlanCustomerTarget)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";
            foreach (DSPlanCustomerTarget.PlanCustomerTargetRow oPlanCustomerTargetRow in oDSPlanCustomerTarget.PlanCustomerTarget)
            {

                if (CheckPlanCustomerTarget(oPlanCustomerTargetRow.VersionNo, oPlanCustomerTargetRow.CustomerID, oPlanCustomerTargetRow.TYear, oPlanCustomerTargetRow.TMonth, oPlanCustomerTargetRow.WeekNo))
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "INSERT INTO t_PlanCustomerTarget (VersionNo, TYear, TMonth, WeekNo, CustomerID, OldCustomer, NewCustomer ) VALUES(?,?,?,?,?,?,?)";
                    try
                    {
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("VersionNo", oPlanCustomerTargetRow.VersionNo);
                        cmd.Parameters.AddWithValue("TYear", oPlanCustomerTargetRow.TYear);
                        cmd.Parameters.AddWithValue("TMonth", oPlanCustomerTargetRow.TMonth);
                        cmd.Parameters.AddWithValue("WeekNo", oPlanCustomerTargetRow.WeekNo);
                        cmd.Parameters.AddWithValue("CustomerID", oPlanCustomerTargetRow.CustomerID);
                        cmd.Parameters.AddWithValue("OldCustomer", oPlanCustomerTargetRow.OldCustomer);
                        cmd.Parameters.AddWithValue("NewCustomer", oPlanCustomerTargetRow.NewCustomer);

                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
                else
                {

                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();
                    try
                    {
                        sSql = "DELETE FROM t_PlanCustomerTarget WHERE [VersionNo]=? and [CustomerID]=? and [TYear]=? and [TMonth]=? and [WeekNo]=?";
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.AddWithValue("VersionNo", oPlanCustomerTargetRow.VersionNo);
                        cmd.Parameters.AddWithValue("CustomerID", oPlanCustomerTargetRow.CustomerID);
                        cmd.Parameters.AddWithValue("TYear", oPlanCustomerTargetRow.TYear);
                        cmd.Parameters.AddWithValue("TMonth", oPlanCustomerTargetRow.TMonth);
                        cmd.Parameters.AddWithValue("WeekNo", oPlanCustomerTargetRow.WeekNo);
                        cmd.ExecuteNonQuery();
                        cmd.Dispose();
                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }

                    try
                    {
                        cmd.Dispose();
                        cmd = DBController.Instance.GetCommand();
                        sSql = "INSERT INTO t_PlanCustomerTarget (VersionNo, TYear, TMonth, WeekNo, CustomerID, OldCustomer, NewCustomer ) VALUES(?,?,?,?,?,?,?)";
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.AddWithValue("VersionNo", oPlanCustomerTargetRow.VersionNo);
                        cmd.Parameters.AddWithValue("TYear", oPlanCustomerTargetRow.TYear);
                        cmd.Parameters.AddWithValue("TMonth", oPlanCustomerTargetRow.TMonth);
                        cmd.Parameters.AddWithValue("WeekNo", oPlanCustomerTargetRow.WeekNo);
                        cmd.Parameters.AddWithValue("CustomerID", oPlanCustomerTargetRow.CustomerID);
                        cmd.Parameters.AddWithValue("OldCustomer", oPlanCustomerTargetRow.OldCustomer);
                        cmd.Parameters.AddWithValue("NewCustomer", oPlanCustomerTargetRow.NewCustomer);
                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
            }
        }
        public void InsertPlanCustomerTargetNew(DSPlanCustomerTarget oDSPlanCustomerTarget)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";
            int nCount = 0;
            foreach (DSPlanCustomerTarget.PlanCustomerTargetRow oPlanCustomerTargetRow in oDSPlanCustomerTarget.PlanCustomerTarget)
            {

                if (nCount == 0)
                {


                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();
                    try
                    {
                        sSql = "DELETE FROM t_PlanCustomerTarget WHERE [VersionNo]=?";
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.AddWithValue("VersionNo", oPlanCustomerTargetRow.VersionNo);
                        cmd.ExecuteNonQuery();
                        cmd.Dispose();
                        nCount++;
                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                sSql = "INSERT INTO t_PlanCustomerTarget (VersionNo, TYear, TMonth, WeekNo, CustomerID, OldCustomer, NewCustomer ) VALUES(?,?,?,?,?,?,?)";
                try
                {
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("VersionNo", oPlanCustomerTargetRow.VersionNo);
                    cmd.Parameters.AddWithValue("TYear", oPlanCustomerTargetRow.TYear);
                    cmd.Parameters.AddWithValue("TMonth", oPlanCustomerTargetRow.TMonth);
                    cmd.Parameters.AddWithValue("WeekNo", oPlanCustomerTargetRow.WeekNo);
                    cmd.Parameters.AddWithValue("CustomerID", oPlanCustomerTargetRow.CustomerID);
                    cmd.Parameters.AddWithValue("OldCustomer", oPlanCustomerTargetRow.OldCustomer);
                    cmd.Parameters.AddWithValue("NewCustomer", oPlanCustomerTargetRow.NewCustomer);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();

                }
                catch (Exception ex)
                {
                    throw (ex);
                }


            }
        }

        ///
        // InsertPlanExecutiveWeekTarget
        ///
        public void InsertPlanExecutiveWeekTarget(DSPlanExecutiveWeekTarget oDSPlanExecutiveWeekTarget)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";
            foreach (DSPlanExecutiveWeekTarget.PlanExecutiveWeekTargetRow oPlanExecutiveWeekTargetRow in oDSPlanExecutiveWeekTarget.PlanExecutiveWeekTarget)
            {

                if (CheckPlanExecutiveWeekTarget(oPlanExecutiveWeekTargetRow.VersionNo, oPlanExecutiveWeekTargetRow.CustomerID, oPlanExecutiveWeekTargetRow.TYear, oPlanExecutiveWeekTargetRow.TMonth, oPlanExecutiveWeekTargetRow.WeekNo, oPlanExecutiveWeekTargetRow.SalesPersonID))
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "INSERT INTO t_PlanExecutiveWeekTarget (VersionNo, TYear, TMonth, WeekNo, CustomerID, SalesPersonID, Category , TargetAmount ) VALUES(?,?,?,?,?,?,?,?)";
                    try
                    {
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("VersionNo", oPlanExecutiveWeekTargetRow.VersionNo);
                        cmd.Parameters.AddWithValue("TYear", oPlanExecutiveWeekTargetRow.TYear);
                        cmd.Parameters.AddWithValue("TMonth", oPlanExecutiveWeekTargetRow.TMonth);
                        cmd.Parameters.AddWithValue("WeekNo", oPlanExecutiveWeekTargetRow.WeekNo);
                        cmd.Parameters.AddWithValue("CustomerID", oPlanExecutiveWeekTargetRow.CustomerID);
                        cmd.Parameters.AddWithValue("SalesPersonID", oPlanExecutiveWeekTargetRow.SalesPersonID);
                        cmd.Parameters.AddWithValue("Category", oPlanExecutiveWeekTargetRow.Category);
                        cmd.Parameters.AddWithValue("TargetAmount", oPlanExecutiveWeekTargetRow.TargetAmount);

                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
                else
                {

                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();
                    try
                    {
                        sSql = "DELETE FROM t_PlanExecutiveWeekTarget WHERE [VersionNo]=? and [CustomerID]=? and [TYear]=? and [TMonth]=? and [WeekNo]=? and [SalesPersonID]=? ";
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.AddWithValue("VersionNo", oPlanExecutiveWeekTargetRow.VersionNo);
                        cmd.Parameters.AddWithValue("CustomerID", oPlanExecutiveWeekTargetRow.CustomerID);
                        cmd.Parameters.AddWithValue("TYear", oPlanExecutiveWeekTargetRow.TYear);
                        cmd.Parameters.AddWithValue("TMonth", oPlanExecutiveWeekTargetRow.TMonth);
                        cmd.Parameters.AddWithValue("WeekNo", oPlanExecutiveWeekTargetRow.WeekNo);
                        cmd.Parameters.AddWithValue("SalesPersonID", oPlanExecutiveWeekTargetRow.SalesPersonID);
                        cmd.ExecuteNonQuery();
                        cmd.Dispose();
                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }

                    try
                    {
                        cmd.Dispose();
                        cmd = DBController.Instance.GetCommand();
                        sSql = "INSERT INTO t_PlanExecutiveWeekTarget (VersionNo, TYear, TMonth, WeekNo, CustomerID, SalesPersonID, Category , TargetAmount ) VALUES(?,?,?,?,?,?,?,?)";
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.AddWithValue("VersionNo", oPlanExecutiveWeekTargetRow.VersionNo);
                        cmd.Parameters.AddWithValue("TYear", oPlanExecutiveWeekTargetRow.TYear);
                        cmd.Parameters.AddWithValue("TMonth", oPlanExecutiveWeekTargetRow.TMonth);
                        cmd.Parameters.AddWithValue("WeekNo", oPlanExecutiveWeekTargetRow.WeekNo);
                        cmd.Parameters.AddWithValue("CustomerID", oPlanExecutiveWeekTargetRow.CustomerID);
                        cmd.Parameters.AddWithValue("SalesPersonID", oPlanExecutiveWeekTargetRow.SalesPersonID);
                        cmd.Parameters.AddWithValue("Category", oPlanExecutiveWeekTargetRow.Category);
                        cmd.Parameters.AddWithValue("TargetAmount", oPlanExecutiveWeekTargetRow.TargetAmount);
                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
            }
        }

        public void InsertPlanExecutiveWeekTargetNew(DSPlanExecutiveWeekTarget oDSPlanExecutiveWeekTarget)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";
            int nCount = 0;
            foreach (DSPlanExecutiveWeekTarget.PlanExecutiveWeekTargetRow oPlanExecutiveWeekTargetRow in oDSPlanExecutiveWeekTarget.PlanExecutiveWeekTarget)
            {

                if (nCount == 0)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();
                    try
                    {
                        sSql = "DELETE FROM t_PlanExecutiveWeekTarget WHERE [VersionNo]=?";
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.AddWithValue("VersionNo", oPlanExecutiveWeekTargetRow.VersionNo);

                        cmd.ExecuteNonQuery();
                        cmd.Dispose();
                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }

                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                sSql = "INSERT INTO t_PlanExecutiveWeekTarget (VersionNo, TYear, TMonth, WeekNo, CustomerID, SalesPersonID, Category , TargetAmount ) VALUES(?,?,?,?,?,?,?,?)";
                try
                {
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("VersionNo", oPlanExecutiveWeekTargetRow.VersionNo);
                    cmd.Parameters.AddWithValue("TYear", oPlanExecutiveWeekTargetRow.TYear);
                    cmd.Parameters.AddWithValue("TMonth", oPlanExecutiveWeekTargetRow.TMonth);
                    cmd.Parameters.AddWithValue("WeekNo", oPlanExecutiveWeekTargetRow.WeekNo);
                    cmd.Parameters.AddWithValue("CustomerID", oPlanExecutiveWeekTargetRow.CustomerID);
                    cmd.Parameters.AddWithValue("SalesPersonID", oPlanExecutiveWeekTargetRow.SalesPersonID);
                    cmd.Parameters.AddWithValue("Category", oPlanExecutiveWeekTargetRow.Category);
                    cmd.Parameters.AddWithValue("TargetAmount", oPlanExecutiveWeekTargetRow.TargetAmount);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();

                }
                catch (Exception ex)
                {
                    throw (ex);
                }
            }
        }

        ///
        // PlanExecutiveLeadTarget
        ///
        public void InsertPlanExecutiveLeadTarget(DSPlanExecutiveWeekTarget oDSPlanExecutiveLeadTarget)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";
            foreach (DSPlanExecutiveWeekTarget.PlanExecutiveWeekTargetRow oPlanExecutiveWeekTargetRow in oDSPlanExecutiveLeadTarget.PlanExecutiveWeekTarget)
            {

                if (CheckPlanExecutiveLeadTarget(oPlanExecutiveWeekTargetRow.VersionNo, oPlanExecutiveWeekTargetRow.CustomerID, oPlanExecutiveWeekTargetRow.TYear, oPlanExecutiveWeekTargetRow.TMonth, oPlanExecutiveWeekTargetRow.WeekNo, oPlanExecutiveWeekTargetRow.SalesPersonID, oPlanExecutiveWeekTargetRow.Channel, oPlanExecutiveWeekTargetRow.MAGID, oPlanExecutiveWeekTargetRow.BrandID, oPlanExecutiveWeekTargetRow.TargetType))
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = " INSERT INTO t_PlanExecutiveLeadTarget (VersionNo, TYear, TMonth, WeekNo, CustomerID, SalesPersonID,  " +
                           " MAGID, BrandID, TargetQty, TargetAmount, Channel, TargetType ) VALUES(?,?,?,?,?,?,?,?,?,?,?,?)";
                    try
                    {
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("VersionNo", oPlanExecutiveWeekTargetRow.VersionNo);
                        cmd.Parameters.AddWithValue("TYear", oPlanExecutiveWeekTargetRow.TYear);
                        cmd.Parameters.AddWithValue("TMonth", oPlanExecutiveWeekTargetRow.TMonth);
                        cmd.Parameters.AddWithValue("WeekNo", oPlanExecutiveWeekTargetRow.WeekNo);
                        cmd.Parameters.AddWithValue("CustomerID", oPlanExecutiveWeekTargetRow.CustomerID);
                        cmd.Parameters.AddWithValue("SalesPersonID", oPlanExecutiveWeekTargetRow.SalesPersonID);
                        cmd.Parameters.AddWithValue("MAGID", oPlanExecutiveWeekTargetRow.MAGID);
                        cmd.Parameters.AddWithValue("BrandID", oPlanExecutiveWeekTargetRow.BrandID);
                        cmd.Parameters.AddWithValue("TargetQty", oPlanExecutiveWeekTargetRow.TargetQty);
                        cmd.Parameters.AddWithValue("TargetAmount", oPlanExecutiveWeekTargetRow.TargetAmount);
                        cmd.Parameters.AddWithValue("Channel", oPlanExecutiveWeekTargetRow.Channel);
                        cmd.Parameters.AddWithValue("TargetType", oPlanExecutiveWeekTargetRow.TargetType);

                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
                else
                {

                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();
                    try
                    {
                        sSql = "DELETE FROM t_PlanExecutiveLeadTarget WHERE [VersionNo]=? and [CustomerID]=? and [TYear]=? and [TMonth]=? and [WeekNo]=? and [SalesPersonID]=? and [Channel]=? ";
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.AddWithValue("VersionNo", oPlanExecutiveWeekTargetRow.VersionNo);
                        cmd.Parameters.AddWithValue("CustomerID", oPlanExecutiveWeekTargetRow.CustomerID);
                        cmd.Parameters.AddWithValue("TYear", oPlanExecutiveWeekTargetRow.TYear);
                        cmd.Parameters.AddWithValue("TMonth", oPlanExecutiveWeekTargetRow.TMonth);
                        cmd.Parameters.AddWithValue("WeekNo", oPlanExecutiveWeekTargetRow.WeekNo);
                        cmd.Parameters.AddWithValue("SalesPersonID", oPlanExecutiveWeekTargetRow.SalesPersonID);
                        cmd.Parameters.AddWithValue("Channel", oPlanExecutiveWeekTargetRow.Channel);
                        cmd.ExecuteNonQuery();
                        cmd.Dispose();
                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }

                    try
                    {
                        cmd.Dispose();
                        cmd = DBController.Instance.GetCommand();
                        sSql = " INSERT INTO t_PlanExecutiveLeadTarget (VersionNo, TYear, TMonth, WeekNo, CustomerID, SalesPersonID,  " +
                               " MAGID, BrandID, TargetQty, TargetAmount, Channel, TargetType ) VALUES(?,?,?,?,?,?,?,?,?,?,?,?)";
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.AddWithValue("VersionNo", oPlanExecutiveWeekTargetRow.VersionNo);
                        cmd.Parameters.AddWithValue("TYear", oPlanExecutiveWeekTargetRow.TYear);
                        cmd.Parameters.AddWithValue("TMonth", oPlanExecutiveWeekTargetRow.TMonth);
                        cmd.Parameters.AddWithValue("WeekNo", oPlanExecutiveWeekTargetRow.WeekNo);
                        cmd.Parameters.AddWithValue("CustomerID", oPlanExecutiveWeekTargetRow.CustomerID);
                        cmd.Parameters.AddWithValue("SalesPersonID", oPlanExecutiveWeekTargetRow.SalesPersonID);
                        cmd.Parameters.AddWithValue("MAGID", oPlanExecutiveWeekTargetRow.MAGID);
                        cmd.Parameters.AddWithValue("BrandID", oPlanExecutiveWeekTargetRow.BrandID);
                        cmd.Parameters.AddWithValue("TargetQty", oPlanExecutiveWeekTargetRow.TargetQty);
                        cmd.Parameters.AddWithValue("TargetAmount", oPlanExecutiveWeekTargetRow.TargetAmount);
                        cmd.Parameters.AddWithValue("Channel", oPlanExecutiveWeekTargetRow.Channel);
                        cmd.Parameters.AddWithValue("TargetType", oPlanExecutiveWeekTargetRow.TargetType);
                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
            }
        }

        public void InsertPlanExecutiveLeadTargetNew(DSPlanExecutiveWeekTarget oDSPlanExecutiveLeadTarget)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";
            int nCount = 0;
          

            DataView view = new DataView(oDSPlanExecutiveLeadTarget.Tables["PlanExecutiveWeekTarget"]);

            DataTable distinctValues = view.ToTable(true, "VersionNo");

            for (int i = 0; i < distinctValues.Rows.Count; i++)
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();
                try
                {
                    sSql = "DELETE FROM t_PlanExecutiveLeadTarget WHERE [VersionNo]=?";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.AddWithValue("VersionNo", distinctValues.Rows[i]["VersionNo"].ToString());
                        cmd.ExecuteNonQuery();
                    cmd.Dispose();
                    nCount++;
                }
                catch (Exception ex)
                {
                    throw (ex);
                }
            }

            foreach (DSPlanExecutiveWeekTarget.PlanExecutiveWeekTargetRow oPlanExecutiveWeekTargetRow in oDSPlanExecutiveLeadTarget.PlanExecutiveWeekTarget)
            {

                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                sSql = " INSERT INTO t_PlanExecutiveLeadTarget (VersionNo, TYear, TMonth, WeekNo, CustomerID, SalesPersonID,  " +
                       " MAGID, BrandID, TargetQty, TargetAmount, Channel, TargetType ) VALUES(?,?,?,?,?,?,?,?,?,?,?,?)";
                try
                {
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("VersionNo", oPlanExecutiveWeekTargetRow.VersionNo);
                    cmd.Parameters.AddWithValue("TYear", oPlanExecutiveWeekTargetRow.TYear);
                    cmd.Parameters.AddWithValue("TMonth", oPlanExecutiveWeekTargetRow.TMonth);
                    cmd.Parameters.AddWithValue("WeekNo", oPlanExecutiveWeekTargetRow.WeekNo);
                    cmd.Parameters.AddWithValue("CustomerID", oPlanExecutiveWeekTargetRow.CustomerID);
                    cmd.Parameters.AddWithValue("SalesPersonID", oPlanExecutiveWeekTargetRow.SalesPersonID);
                    cmd.Parameters.AddWithValue("MAGID", oPlanExecutiveWeekTargetRow.MAGID);
                    cmd.Parameters.AddWithValue("BrandID", oPlanExecutiveWeekTargetRow.BrandID);
                    cmd.Parameters.AddWithValue("TargetQty", oPlanExecutiveWeekTargetRow.TargetQty);
                    cmd.Parameters.AddWithValue("TargetAmount", oPlanExecutiveWeekTargetRow.TargetAmount);
                    cmd.Parameters.AddWithValue("Channel", oPlanExecutiveWeekTargetRow.Channel);
                    cmd.Parameters.AddWithValue("TargetType", oPlanExecutiveWeekTargetRow.TargetType);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();

                }
                catch (Exception ex)
                {
                    throw (ex);
                }


            }
        }

        ///
        // InsertPlanMAGWeekTargetQty
        ///
        public void InsertPlanMAGWeekTargetQty(DSPlanMAGWeekTargetQty oDSPlanMAGWeekTargetQty)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";
            foreach (DSPlanMAGWeekTargetQty.PlanMAGWeekTargetQtyRow oPlanMAGWeekTargetQtyRow in oDSPlanMAGWeekTargetQty.PlanMAGWeekTargetQty)
            {

                if (CheckPlanMAGWeekTargetQty(oPlanMAGWeekTargetQtyRow.VersionNo, oPlanMAGWeekTargetQtyRow.CustomerID, oPlanMAGWeekTargetQtyRow.TYear, oPlanMAGWeekTargetQtyRow.TMonth, oPlanMAGWeekTargetQtyRow.WeekNo, oPlanMAGWeekTargetQtyRow.MAGID, oPlanMAGWeekTargetQtyRow.BrandID))
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "INSERT INTO t_PlanMAGWeekTargetQty (VersionNo, TYear, TMonth, WeekNo, CustomerID, MAGID, BrandID , TargetQty, TargetValue, Channel ) VALUES(?,?,?,?,?,?,?,?,?,?)";
                    try
                    {
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("VersionNo", oPlanMAGWeekTargetQtyRow.VersionNo);
                        cmd.Parameters.AddWithValue("TYear", oPlanMAGWeekTargetQtyRow.TYear);
                        cmd.Parameters.AddWithValue("TMonth", oPlanMAGWeekTargetQtyRow.TMonth);
                        cmd.Parameters.AddWithValue("WeekNo", oPlanMAGWeekTargetQtyRow.WeekNo);
                        cmd.Parameters.AddWithValue("CustomerID", oPlanMAGWeekTargetQtyRow.CustomerID);
                        cmd.Parameters.AddWithValue("MAGID", oPlanMAGWeekTargetQtyRow.MAGID);
                        cmd.Parameters.AddWithValue("BrandID", oPlanMAGWeekTargetQtyRow.BrandID);
                        cmd.Parameters.AddWithValue("TargetQty", oPlanMAGWeekTargetQtyRow.TargetQty);
                        cmd.Parameters.AddWithValue("TargetValue", oPlanMAGWeekTargetQtyRow.TargetValue);
                        cmd.Parameters.AddWithValue("Channel", oPlanMAGWeekTargetQtyRow.Channel);

                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
                else
                {

                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();
                    try
                    {
                        sSql = "DELETE FROM t_PlanMAGWeekTargetQty WHERE [VersionNo]=? and [TYear]=? and [TMonth]=? and [WeekNo]=? and [CustomerID]=? and [MAGID]=? and [BrandID]=? and [Channel]=?  ";
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.AddWithValue("VersionNo", oPlanMAGWeekTargetQtyRow.VersionNo);
                        cmd.Parameters.AddWithValue("TYear", oPlanMAGWeekTargetQtyRow.TYear);
                        cmd.Parameters.AddWithValue("TMonth", oPlanMAGWeekTargetQtyRow.TMonth);
                        cmd.Parameters.AddWithValue("WeekNo", oPlanMAGWeekTargetQtyRow.WeekNo);
                        cmd.Parameters.AddWithValue("CustomerID", oPlanMAGWeekTargetQtyRow.CustomerID);
                        cmd.Parameters.AddWithValue("MAGID", oPlanMAGWeekTargetQtyRow.MAGID);
                        cmd.Parameters.AddWithValue("BrandID", oPlanMAGWeekTargetQtyRow.BrandID);
                        cmd.Parameters.AddWithValue("Channel", oPlanMAGWeekTargetQtyRow.Channel);
                        cmd.ExecuteNonQuery();
                        cmd.Dispose();
                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }

                    try
                    {
                        cmd.Dispose();
                        cmd = DBController.Instance.GetCommand();
                        sSql = "INSERT INTO t_PlanMAGWeekTargetQty (VersionNo, TYear, TMonth, WeekNo, CustomerID, MAGID, BrandID , TargetQty, TargetValue, Channel ) VALUES(?,?,?,?,?,?,?,?,?,?)";
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.AddWithValue("VersionNo", oPlanMAGWeekTargetQtyRow.VersionNo);
                        cmd.Parameters.AddWithValue("TYear", oPlanMAGWeekTargetQtyRow.TYear);
                        cmd.Parameters.AddWithValue("TMonth", oPlanMAGWeekTargetQtyRow.TMonth);
                        cmd.Parameters.AddWithValue("WeekNo", oPlanMAGWeekTargetQtyRow.WeekNo);
                        cmd.Parameters.AddWithValue("CustomerID", oPlanMAGWeekTargetQtyRow.CustomerID);
                        cmd.Parameters.AddWithValue("MAGID", oPlanMAGWeekTargetQtyRow.MAGID);
                        cmd.Parameters.AddWithValue("BrandID", oPlanMAGWeekTargetQtyRow.BrandID);
                        cmd.Parameters.AddWithValue("TargetQty", oPlanMAGWeekTargetQtyRow.TargetQty);
                        cmd.Parameters.AddWithValue("TargetValue", oPlanMAGWeekTargetQtyRow.TargetValue);
                        cmd.Parameters.AddWithValue("Channel", oPlanMAGWeekTargetQtyRow.Channel);
                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
            }
        }

        public void InsertPlanMAGWeekTargetQtyNew(DSPlanMAGWeekTargetQty oDSPlanMAGWeekTargetQty)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";
            int nCount = 0;

            DataView view = new DataView(oDSPlanMAGWeekTargetQty.Tables["PlanMAGWeekTargetQty"]);
            DataTable distinctValues = view.ToTable(true, "VersionNo");

            for (int i=0;i< distinctValues.Rows.Count; i++)
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();
                try
                {
                    sSql = "DELETE FROM t_PlanMAGWeekTargetQty WHERE [VersionNo]=?";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.AddWithValue("VersionNo", distinctValues.Rows[i]["VersionNo"].ToString());
                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                    nCount++;
                }
                catch (Exception ex)
                {
                    throw (ex);
                }
            }


            foreach (DSPlanMAGWeekTargetQty.PlanMAGWeekTargetQtyRow oPlanMAGWeekTargetQtyRow in oDSPlanMAGWeekTargetQty.PlanMAGWeekTargetQty)
            {

                

                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                sSql = "INSERT INTO t_PlanMAGWeekTargetQty (VersionNo, TYear, TMonth, WeekNo, CustomerID, MAGID, BrandID , TargetQty, TargetValue, Channel ) VALUES(?,?,?,?,?,?,?,?,?,?)";
                try
                {
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("VersionNo", oPlanMAGWeekTargetQtyRow.VersionNo);
                    cmd.Parameters.AddWithValue("TYear", oPlanMAGWeekTargetQtyRow.TYear);
                    cmd.Parameters.AddWithValue("TMonth", oPlanMAGWeekTargetQtyRow.TMonth);
                    cmd.Parameters.AddWithValue("WeekNo", oPlanMAGWeekTargetQtyRow.WeekNo);
                    cmd.Parameters.AddWithValue("CustomerID", oPlanMAGWeekTargetQtyRow.CustomerID);
                    cmd.Parameters.AddWithValue("MAGID", oPlanMAGWeekTargetQtyRow.MAGID);
                    cmd.Parameters.AddWithValue("BrandID", oPlanMAGWeekTargetQtyRow.BrandID);
                    cmd.Parameters.AddWithValue("TargetQty", oPlanMAGWeekTargetQtyRow.TargetQty);
                    cmd.Parameters.AddWithValue("TargetValue", oPlanMAGWeekTargetQtyRow.TargetValue);
                    cmd.Parameters.AddWithValue("Channel", oPlanMAGWeekTargetQtyRow.Channel);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();

                }
                catch (Exception ex)
                {
                    throw (ex);
                }


            }
        }

        ///
        // Insert Outlet Display Position
        ///
        public void InsertOutletDisplayPosition(DSOutletDisplayPosition oDSOutletDisplayPosition)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";
            foreach (DSOutletDisplayPosition.OutletDisplayPositionRow oOutletDisplayPositionRow in oDSOutletDisplayPosition.OutletDisplayPosition)
            {

                if (CheckOutletDisplayPosition(oOutletDisplayPositionRow.DisplayPositionID, oOutletDisplayPositionRow.WHID))
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "INSERT INTO t_OutletDisplayPosition (DisplayPositionID, PositionCode, PositionName, MAGID, WHID, CreateDate, CreateUserID, UpdateDate, UpdateUserID, ProductID, ProductSerialNo, Status, IsActive, AssignProductID, AssignDate, AssignUserID, RackID,SaleAfter,OpenForAll) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                    try
                    {
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("DisplayPositionID", oOutletDisplayPositionRow.DisplayPositionID);
                        cmd.Parameters.AddWithValue("PositionCode", oOutletDisplayPositionRow.PositionCode);
                        cmd.Parameters.AddWithValue("PositionName", oOutletDisplayPositionRow.PositionName);
                        cmd.Parameters.AddWithValue("MAGID", oOutletDisplayPositionRow.MAGID);
                        cmd.Parameters.AddWithValue("WHID", oOutletDisplayPositionRow.WHID);
                        cmd.Parameters.AddWithValue("CreateDate", oOutletDisplayPositionRow.CreateDate);
                        cmd.Parameters.AddWithValue("CreateUserID", oOutletDisplayPositionRow.CreateUserID);

                        if (oOutletDisplayPositionRow["UpdateDate"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("UpdateDate", oOutletDisplayPositionRow.UpdateDate);
                        else cmd.Parameters.AddWithValue("UpdateDate", null);
                        if (oOutletDisplayPositionRow["UpdateUserID"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("UpdateUserIDUpdateUserID", oOutletDisplayPositionRow.UpdateUserID);
                        else cmd.Parameters.AddWithValue("UpdateUserID", -1);

                        if (oOutletDisplayPositionRow["ProductID"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("ProductID", oOutletDisplayPositionRow.ProductID);
                        else cmd.Parameters.AddWithValue("ProductID", -1);
                        if (oOutletDisplayPositionRow["ProductSerialNo"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("ProductSerialNo", oOutletDisplayPositionRow.ProductSerialNo);
                        else cmd.Parameters.AddWithValue("ProductSerialNo", null);
                        cmd.Parameters.AddWithValue("Status", oOutletDisplayPositionRow.Status);
                        cmd.Parameters.AddWithValue("IsActive", oOutletDisplayPositionRow.IsActive);


                        cmd.Parameters.AddWithValue("AssignProductID", oOutletDisplayPositionRow.AssignProductID);
                        if (oOutletDisplayPositionRow["AssignDate"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("AssignDate", oOutletDisplayPositionRow.AssignDate);
                        else cmd.Parameters.AddWithValue("AssignDate", null);
                        cmd.Parameters.AddWithValue("AssignUserID", oOutletDisplayPositionRow.AssignUserID);
                        cmd.Parameters.AddWithValue("RackID", oOutletDisplayPositionRow.RackID);
                        if (!oOutletDisplayPositionRow.IsSaleAfterNull())
                        {
                            cmd.Parameters.AddWithValue("SaleAfter", oOutletDisplayPositionRow.SaleAfter);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("SaleAfter", null);
                        }

                        cmd.Parameters.AddWithValue("OpenForAll", oOutletDisplayPositionRow.OpenForAll);

                        cmd.ExecuteNonQuery();
                        cmd.Dispose();



                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
                else
                {

                    try
                    {
                        cmd.Dispose();
                        cmd = DBController.Instance.GetCommand();
                        sSql = "UPDATE t_OutletDisplayPosition SET  PositionName = ?, MAGID = ?, WHID = ?,ProductID = ?, UpdateDate = ?, UpdateUserID = ?, IsActive = ?,RackID = ?,SaleAfter=?, OpenForAll=? WHERE DisplayPositionID = ?";
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;


                        cmd.Parameters.AddWithValue("PositionName", oOutletDisplayPositionRow.PositionName);
                        cmd.Parameters.AddWithValue("MAGID", oOutletDisplayPositionRow.MAGID);
                        cmd.Parameters.AddWithValue("WHID", oOutletDisplayPositionRow.WHID);
                        cmd.Parameters.AddWithValue("ProductID", oOutletDisplayPositionRow.ProductID);
                        if (oOutletDisplayPositionRow["UpdateDate"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("UpdateDate", oOutletDisplayPositionRow.UpdateDate);
                        else cmd.Parameters.AddWithValue("UpdateDate", null);
                        if (oOutletDisplayPositionRow["UpdateUserID"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("UpdateUserID", oOutletDisplayPositionRow.UpdateUserID);
                        else cmd.Parameters.AddWithValue("UpdateUserID", -1);
                        cmd.Parameters.AddWithValue("IsActive", oOutletDisplayPositionRow.IsActive);
                        cmd.Parameters.AddWithValue("RackID", oOutletDisplayPositionRow.RackID);
                        if (!oOutletDisplayPositionRow.IsSaleAfterNull())
                        {
                            cmd.Parameters.AddWithValue("SaleAfter", oOutletDisplayPositionRow.SaleAfter);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("SaleAfter", null);
                        }
                        cmd.Parameters.AddWithValue("OpenForAll", oOutletDisplayPositionRow.OpenForAll);
                        cmd.Parameters.AddWithValue("DisplayPositionID", oOutletDisplayPositionRow.DisplayPositionID);
                       


                        OutletDisplayPosition oItems = new OutletDisplayPosition();
                        oItems.DisplayPositionID = oOutletDisplayPositionRow.DisplayPositionID;
                        oItems.Type = oOutletDisplayPositionRow.Status;
                        oItems.CreateDate = DateTime.Now.Date;
                        oItems.CreateUserID = oOutletDisplayPositionRow.CreateUserID;
                        oItems.AddHistory();

                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
            }
        }

        public void InsertOutletDisplayPositionRack(DSOutletDisplayPosition oDSOutletDisplayPosition)
        {

            foreach (DSOutletDisplayPosition.OutletDisplayPositionRackRow oOutletDisplayPositionRackRow in oDSOutletDisplayPosition.OutletDisplayPositionRack)
            {
                OutletDisplayPosition oOutletDisplayPosition = new OutletDisplayPosition();


                oOutletDisplayPosition.RackID = oOutletDisplayPositionRackRow.RackID;
                oOutletDisplayPosition.RackName = oOutletDisplayPositionRackRow.RackName;
                oOutletDisplayPosition.IsActive = oOutletDisplayPositionRackRow.IsActive;
                oOutletDisplayPosition.CreateUserID = oOutletDisplayPositionRackRow.CreateUserID;
                oOutletDisplayPosition.CreateDate = oOutletDisplayPositionRackRow.CreateDate;
                oOutletDisplayPosition.Sort = oOutletDisplayPositionRackRow.Sort;
                try
                {
                    if (oOutletDisplayPosition.CheckOutletDisplayPositionRack(oOutletDisplayPosition.RackID))
                    {
                        oOutletDisplayPosition.UpdateDate = DateTime.Now.Date;
                        oOutletDisplayPosition.UpdateUserID = Utility.UserId;
                        oOutletDisplayPosition.EditRack();
                        AppLogger.LogInfo("Successfully Update Outlet Display Position Rack");
                    }
                    else
                    {
                        oOutletDisplayPosition.AddRackForPOS();
                        AppLogger.LogInfo("Successfully Insert Outlet Display Position Rack");
                    }
                }
                catch (Exception ex)
                {
                    AppLogger.LogError("Error Inserting/Updating Outlet Display Position Rack /" + ex.Message);
                    throw (ex);
                }
            }
        }


        ///
        // Insert OfficeItem
        ///
        public void InsertCreditApprovalData(DSCustmerCreditApprval oDSCustmerCreditApprval)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Product Insert
            foreach (DSCustmerCreditApprval.CustomerCreditApprovalRow oCustomerCreditApprovalRow in oDSCustmerCreditApprval.CustomerCreditApproval)
            {

                if (CheckCreditApproval(oCustomerCreditApprovalRow.ID))
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();
                    sSql = "INSERT INTO t_CustomerCreditApproval (ID, CreditApprovalID, WarehouseID, CustomerID, ApprovalNo, ProductOrService, " +
                    "CreditPeriod, CreditAmount, InvoicedAmount, CollectedAmount, Remarks, CreateDate,ConsumerID,SalesType) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                    try
                    {
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("ID", oCustomerCreditApprovalRow.ID);
                        cmd.Parameters.AddWithValue("CreditApprovalID", oCustomerCreditApprovalRow.CreditApprovalID);
                        cmd.Parameters.AddWithValue("WarehouseID", oCustomerCreditApprovalRow.WarehouseID);
                        cmd.Parameters.AddWithValue("CustomerID", oCustomerCreditApprovalRow.CustomerID);
                        cmd.Parameters.AddWithValue("ApprovalNo", oCustomerCreditApprovalRow.ApprovalNo);
                        cmd.Parameters.AddWithValue("ProductOrService", oCustomerCreditApprovalRow.ProductOrService);
                        cmd.Parameters.AddWithValue("CreditPeriod", oCustomerCreditApprovalRow.CreditPeriod);
                        cmd.Parameters.AddWithValue("CreditAmount", oCustomerCreditApprovalRow.CreditAmount);
                        cmd.Parameters.AddWithValue("InvoicedAmount", oCustomerCreditApprovalRow.InvoicedAmount);
                        cmd.Parameters.AddWithValue("CollectedAmount", oCustomerCreditApprovalRow.CollectedAmount);
                        cmd.Parameters.AddWithValue("Remarks", oCustomerCreditApprovalRow.Remarks);
                        cmd.Parameters.AddWithValue("CreateDate", oCustomerCreditApprovalRow.CreateDate);
                        cmd.Parameters.AddWithValue("ConsumerID", oCustomerCreditApprovalRow.ConsumerID);
                        cmd.Parameters.AddWithValue("SalesType", oCustomerCreditApprovalRow.SalesType);

                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
                else
                {
                    try
                    {
                        cmd.Dispose();
                        cmd = DBController.Instance.GetCommand();

                        sSql = "UPDATE t_CustomerCreditApproval SET CreditApprovalID=?, WarehouseID=?, CustomerID=?, ProductOrService=? " +
                               "CreditPeriod=?, CreditAmount=?, Remarks=?,ConsumerID = ? SalesType = ? WHERE ID = ?";

                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("CreditApprovalID", oCustomerCreditApprovalRow.CreditApprovalID);
                        cmd.Parameters.AddWithValue("WarehouseID", oCustomerCreditApprovalRow.WarehouseID);
                        cmd.Parameters.AddWithValue("CustomerID", oCustomerCreditApprovalRow.CustomerID);
                        cmd.Parameters.AddWithValue("ProductOrService", oCustomerCreditApprovalRow.ProductOrService);
                        cmd.Parameters.AddWithValue("CreditPeriod", oCustomerCreditApprovalRow.CreditPeriod);
                        cmd.Parameters.AddWithValue("CreditAmount", oCustomerCreditApprovalRow.CreditAmount);
                        cmd.Parameters.AddWithValue("Remarks", oCustomerCreditApprovalRow.Remarks);
                        cmd.Parameters.AddWithValue("ConsumerID", oCustomerCreditApprovalRow.ConsumerID);
                        cmd.Parameters.AddWithValue("SalesType", oCustomerCreditApprovalRow.SalesType);


                        cmd.Parameters.AddWithValue("ID", oCustomerCreditApprovalRow.ID);

                        int nCount = cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
            }
        }
        ///
        // Insert Customer
        ///
        public void InsertConsumer(DSRetailConsumer oDSRetailConsumer, int nCustomerID)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";
            int nCount = 0;

            /// Insert Retail consumer

            foreach (DSRetailConsumer.RetailConsumerRow RetailConsumerRow in oDSRetailConsumer.RetailConsumer)
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();
                if (CheckRetailConsumer(RetailConsumerRow.ConsumerID, nCustomerID))
                {
                    sSql = "insert into t_RetailConsumer (ConsumerID,ConsumerCode, ConsumerName,ConsumerType,CustomerID,ParentCustomerID,Address,CellNo,PhoneNo, "
                              + " Email,NationalID,DateofBirth,VatRegNo,ShortName,FatherName,MotherName,SpouseName,PermanentAddress,"
                              + " Nationality,PassportNo,IsCLP,CurrentCLP,IsRegister,IsAuthorized) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ";

                    try
                    {
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("ConsumerID", RetailConsumerRow.ConsumerID);
                        cmd.Parameters.AddWithValue("ConsumerCode", RetailConsumerRow.ConsumerCode);
                        cmd.Parameters.AddWithValue("ConsumerName", RetailConsumerRow.ConsumerName);
                        cmd.Parameters.AddWithValue("ConsumerType", RetailConsumerRow.ConsumerType);
                        cmd.Parameters.AddWithValue("CustomerID", RetailConsumerRow.CustomerID);
                        cmd.Parameters.AddWithValue("ParentCustomerID", RetailConsumerRow.ParentCustomerID);
                        cmd.Parameters.AddWithValue("Address", RetailConsumerRow.Address);
                        cmd.Parameters.AddWithValue("CellNo", RetailConsumerRow.CellNo);
                        if (RetailConsumerRow["PhoneNo"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("PhoneNo", RetailConsumerRow.PhoneNo);
                        else cmd.Parameters.AddWithValue("PhoneNo", null);
                        if (RetailConsumerRow["Email"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("Email", RetailConsumerRow.Email);
                        else cmd.Parameters.AddWithValue("Email", null);
                        if (RetailConsumerRow["NationalID"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("NationalID", RetailConsumerRow.NationalID);
                        else cmd.Parameters.AddWithValue("NationalID", null);
                        if (RetailConsumerRow["DateofBirth"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("DateofBirth", RetailConsumerRow.DateofBirth);
                        else cmd.Parameters.AddWithValue("DateofBirth", null);
                        if (RetailConsumerRow["VatRegNo"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("VatRegNo", RetailConsumerRow.VatRegNo);
                        else cmd.Parameters.AddWithValue("VatRegNo", null);
                        if (RetailConsumerRow["ShortName"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("ShortName", RetailConsumerRow.ShortName);
                        else cmd.Parameters.AddWithValue("ShortName", null);
                        if (RetailConsumerRow["FatherName"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("FatherName", RetailConsumerRow.FatherName);
                        else cmd.Parameters.AddWithValue("FatherName", null);
                        if (RetailConsumerRow["MotherName"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("MotherName", RetailConsumerRow.MotherName);
                        else cmd.Parameters.AddWithValue("MotherName", null);
                        if (RetailConsumerRow["SpouseName"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("SpouseName", RetailConsumerRow.SpouseName);
                        else cmd.Parameters.AddWithValue("SpouseName", null);
                        if (RetailConsumerRow["PermanentAddress"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("PermanentAddress", RetailConsumerRow.PermanentAddress);
                        else cmd.Parameters.AddWithValue("PermanentAddress", null);
                        if (RetailConsumerRow["Nationality"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("Nationality ", RetailConsumerRow.Nationality);
                        else cmd.Parameters.AddWithValue("Nationality", null);
                        if (RetailConsumerRow["PassportNo"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("PassportNo", RetailConsumerRow.PassportNo);
                        else cmd.Parameters.AddWithValue("PassportNo", null);
                        if (RetailConsumerRow["IsCLP"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("IsCLP", RetailConsumerRow.IsCLP);
                        else cmd.Parameters.AddWithValue("IsCLP", null);
                        if (RetailConsumerRow["CurrentCLP"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("CurrentCLP", RetailConsumerRow.CurrentCLP);
                        else cmd.Parameters.AddWithValue("CurrentCLP", null);
                        if (RetailConsumerRow["IsRegister"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("IsRegister", RetailConsumerRow.IsRegister);
                        else cmd.Parameters.AddWithValue("IsRegister", null);
                        if (RetailConsumerRow["IsAuthorized"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("IsAuthorized", RetailConsumerRow.IsAuthorized);
                        else cmd.Parameters.AddWithValue("IsAuthorized", null);


                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
                else
                {
                    try
                    {
                        sSql = "Update t_RetailConsumer Set ConsumerCode=?, ConsumerName=?,ConsumerType=?,CustomerID=?,ParentCustomerID=?,Address=?,CellNo=?,PhoneNo=?, "
                              + " Email=?,NationalID=?,DateofBirth=?,VatRegNo=?,ShortName=?,FatherName=?,MotherName=?,SpouseName=?,PermanentAddress=?,"
                              + " Nationality=?,PassportNo=?,IsCLP=?,CurrentCLP=?,IsRegister=?,IsAuthorized=? "
                              + " Where ConsumerID =? ";

                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("ConsumerCode", RetailConsumerRow.ConsumerCode);
                        cmd.Parameters.AddWithValue("ConsumerName", RetailConsumerRow.ConsumerName);
                        cmd.Parameters.AddWithValue("ConsumerType", RetailConsumerRow.ConsumerType);
                        cmd.Parameters.AddWithValue("CustomerID", RetailConsumerRow.CustomerID);
                        cmd.Parameters.AddWithValue("ParentCustomerID", RetailConsumerRow.ParentCustomerID);
                        cmd.Parameters.AddWithValue("Address", RetailConsumerRow.Address);
                        cmd.Parameters.AddWithValue("CellNo", RetailConsumerRow.CellNo);

                        if (RetailConsumerRow["PhoneNo"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("PhoneNo", RetailConsumerRow.PhoneNo);
                        else cmd.Parameters.AddWithValue("PhoneNo", null);
                        if (RetailConsumerRow["Email"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("Email", RetailConsumerRow.Email);
                        else cmd.Parameters.AddWithValue("Email", null);
                        if (RetailConsumerRow["NationalID"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("NationalID", RetailConsumerRow.NationalID);
                        else cmd.Parameters.AddWithValue("NationalID", null);
                        if (RetailConsumerRow["DateofBirth"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("DateofBirth", RetailConsumerRow.DateofBirth);
                        else cmd.Parameters.AddWithValue("DateofBirth", null);
                        if (RetailConsumerRow["VatRegNo"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("VatRegNo", RetailConsumerRow.VatRegNo);
                        else cmd.Parameters.AddWithValue("VatRegNo", null);
                        if (RetailConsumerRow["ShortName"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("ShortName", RetailConsumerRow.ShortName);
                        else cmd.Parameters.AddWithValue("ShortName", null);
                        if (RetailConsumerRow["FatherName"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("FatherName", RetailConsumerRow.FatherName);
                        else cmd.Parameters.AddWithValue("FatherName", null);
                        if (RetailConsumerRow["MotherName"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("MotherName", RetailConsumerRow.MotherName);
                        else cmd.Parameters.AddWithValue("MotherName", null);
                        if (RetailConsumerRow["SpouseName"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("SpouseName", RetailConsumerRow.SpouseName);
                        else cmd.Parameters.AddWithValue("SpouseName", null);
                        if (RetailConsumerRow["PermanentAddress"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("PermanentAddress", RetailConsumerRow.PermanentAddress);
                        else cmd.Parameters.AddWithValue("PermanentAddress", null);
                        if (RetailConsumerRow["Nationality"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("Nationality ", RetailConsumerRow.Nationality);
                        else cmd.Parameters.AddWithValue("Nationality", null);
                        if (RetailConsumerRow["PassportNo"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("PassportNo", RetailConsumerRow.PassportNo);
                        else cmd.Parameters.AddWithValue("PassportNo", null);
                        if (RetailConsumerRow["IsCLP"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("IsCLP", RetailConsumerRow.IsCLP);
                        else cmd.Parameters.AddWithValue("IsCLP", null);
                        if (RetailConsumerRow["CurrentCLP"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("CurrentCLP", RetailConsumerRow.CurrentCLP);
                        else cmd.Parameters.AddWithValue("CurrentCLP", null);
                        if (RetailConsumerRow["IsRegister"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("IsRegister", RetailConsumerRow.IsRegister);
                        else cmd.Parameters.AddWithValue("IsRegister", null);
                        if (RetailConsumerRow["IsAuthorized"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("IsAuthorized", RetailConsumerRow.IsAuthorized);
                        else cmd.Parameters.AddWithValue("IsAuthorized", null);

                        cmd.Parameters.AddWithValue("ConsumerID", RetailConsumerRow.ConsumerID);

                        nCount = cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
            }
        }

        public DSUnsoldDefectiveProduct InsertUnsoldDefectiveProduct(DSUnsoldDefectiveProduct oDSUnsoldDefectiveProduct, int nWHID)
        {
            if (!DBController.Instance.CheckConnection())
            {
                DBController.Instance.OpenNewConnection();
            }

            OleDbCommand cmd = DBController.Instance.GetCommand();
            UnsoldDefectiveProduct oUnsoldDefectiveProduct;
            /// Insert Unsold Defective Product

            foreach (DSUnsoldDefectiveProduct.UnsoldDefectiveProductRow oUnsoldDefectiveProductRow in oDSUnsoldDefectiveProduct.UnsoldDefectiveProduct)
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                oUnsoldDefectiveProduct = new UnsoldDefectiveProduct();

                oUnsoldDefectiveProduct.DefectiveID = oUnsoldDefectiveProductRow.DefectiveID;
                oUnsoldDefectiveProduct.DefectiveNo = oUnsoldDefectiveProductRow.DefectiveNo;
                oUnsoldDefectiveProduct.WarehouseID = nWHID;
                oUnsoldDefectiveProduct.ProductID = oUnsoldDefectiveProductRow.ProductID;
                oUnsoldDefectiveProduct.BarcodeSL = oUnsoldDefectiveProductRow.BarcodeSL;
                oUnsoldDefectiveProduct.DefectiveType = oUnsoldDefectiveProductRow.DefectiveType;
                oUnsoldDefectiveProduct.Fault = oUnsoldDefectiveProductRow.Fault;
                if (oUnsoldDefectiveProductRow.IsReasonNull())
                    oUnsoldDefectiveProduct.Reason = "";
                else oUnsoldDefectiveProduct.Reason = oUnsoldDefectiveProductRow.Reason;

                if (oUnsoldDefectiveProductRow.IsRemarksNull())
                    oUnsoldDefectiveProduct.Remarks = "";
                else oUnsoldDefectiveProduct.Remarks = oUnsoldDefectiveProductRow.Remarks;

                if (oUnsoldDefectiveProductRow.IsProposeDicAmountNull())
                    oUnsoldDefectiveProduct.ProposeDicAmount = 0;
                oUnsoldDefectiveProduct.ProposeDicAmount = oUnsoldDefectiveProductRow.ProposeDicAmount;
                oUnsoldDefectiveProduct.Status = oUnsoldDefectiveProductRow.Status;
                oUnsoldDefectiveProduct.CreateUserID = oUnsoldDefectiveProductRow.CreateUserID;
                oUnsoldDefectiveProduct.CreateDate = oUnsoldDefectiveProductRow.CreateDate;
                oUnsoldDefectiveProduct.RefTranNo = oUnsoldDefectiveProductRow.RefTranNo;
                oUnsoldDefectiveProduct.RefTranDate = oUnsoldDefectiveProductRow.RefTranDate;

                if (oUnsoldDefectiveProductRow.IsJobNoNull())
                    oUnsoldDefectiveProduct.JobNo = "";
                oUnsoldDefectiveProduct.JobNo = oUnsoldDefectiveProductRow.JobNo;



                if (oUnsoldDefectiveProductRow.IsApproveDicAmountNull())
                    oUnsoldDefectiveProduct.ApproveDicAmount = 0;
                oUnsoldDefectiveProduct.ApproveDicAmount = oUnsoldDefectiveProductRow.ApproveDicAmount;

                if (oUnsoldDefectiveProductRow.IsApproveByNull())
                    oUnsoldDefectiveProduct.ApproveBy = -1;
                oUnsoldDefectiveProduct.ApproveBy = oUnsoldDefectiveProductRow.ApproveBy;

                if (!oUnsoldDefectiveProductRow.IsApproveDateNull())
                    oUnsoldDefectiveProduct.ApproveDate = oUnsoldDefectiveProductRow.ApproveDate;

                if (oUnsoldDefectiveProductRow.IsRefInvoiceNoNull())
                    oUnsoldDefectiveProduct.RefInvoiceNo = "";
                oUnsoldDefectiveProduct.RefInvoiceNo = oUnsoldDefectiveProductRow.RefInvoiceNo;

                if (!oUnsoldDefectiveProductRow.IsRefInvoiceDateNull())
                    oUnsoldDefectiveProduct.RefInvoiceDate = oUnsoldDefectiveProductRow.RefInvoiceDate;
                if (!oUnsoldDefectiveProductRow.IsDefectiveCategoryNull())
                    oUnsoldDefectiveProduct.DefectiveCategory = oUnsoldDefectiveProductRow.DefectiveCategory;
                if (!oUnsoldDefectiveProductRow.IsAssessmentFindingsNull())
                    oUnsoldDefectiveProduct.AssessmentFindings = oUnsoldDefectiveProductRow.AssessmentFindings;
                if (!oUnsoldDefectiveProductRow.IsIsRepairableNull())
                    oUnsoldDefectiveProduct.IsRepairable = oUnsoldDefectiveProductRow.IsRepairable;
                if (!oUnsoldDefectiveProductRow.IsAccessoriesNull())
                    oUnsoldDefectiveProduct.Accessories = oUnsoldDefectiveProductRow.Accessories;
                if (!oUnsoldDefectiveProductRow.IsTechRecommandationNull())
                    oUnsoldDefectiveProduct.TechRecommandation = oUnsoldDefectiveProductRow.TechRecommandation;
                if (!oUnsoldDefectiveProductRow.IsTechRemarksNull())
                    oUnsoldDefectiveProduct.TechRemarks = oUnsoldDefectiveProductRow.TechRemarks;
                if (!oUnsoldDefectiveProductRow.IsIsLocallySaleableNull())
                    oUnsoldDefectiveProduct.IsLocallySaleable = oUnsoldDefectiveProductRow.IsLocallySaleable;
                if (!oUnsoldDefectiveProductRow.IsPaneltyAmountNull())
                    oUnsoldDefectiveProduct.PaneltyAmount = oUnsoldDefectiveProductRow.PaneltyAmount;
                if (!oUnsoldDefectiveProductRow.IsIsLocallyRepairedNull())
                    oUnsoldDefectiveProduct.IsLocallyRepaired = oUnsoldDefectiveProductRow.IsLocallyRepaired;
                if (!oUnsoldDefectiveProductRow.IsRepairStatusNull())
                    oUnsoldDefectiveProduct.RepairStatus = oUnsoldDefectiveProductRow.RepairStatus;
                if (!oUnsoldDefectiveProductRow.IsOriginalSLNull())
                    oUnsoldDefectiveProduct.OriginalSL = oUnsoldDefectiveProductRow.OriginalSL;
                if (!oUnsoldDefectiveProductRow.IsIsPenaltyApplicableNull())
                    oUnsoldDefectiveProduct.IsPenaltyApplicable = oUnsoldDefectiveProductRow.IsPenaltyApplicable;
                if (!oUnsoldDefectiveProductRow.IsIsDefectiveAcknowledgedNull())
                    oUnsoldDefectiveProduct.IsDefectiveAcknowledged = oUnsoldDefectiveProductRow.IsDefectiveAcknowledged;
                if (!oUnsoldDefectiveProductRow.IsAcknowledgmentRemarksNull())
                    oUnsoldDefectiveProduct.AcknowledgmentRemarks = oUnsoldDefectiveProductRow.AcknowledgmentRemarks;
                if (!oUnsoldDefectiveProductRow.IsExpSalesDateNull())
                    oUnsoldDefectiveProduct.ExpSalesDate = oUnsoldDefectiveProductRow.ExpSalesDate;
                if (!oUnsoldDefectiveProductRow.IsFromWHNull())
                    oUnsoldDefectiveProduct.FromWH = oUnsoldDefectiveProductRow.FromWH;
                if (!oUnsoldDefectiveProductRow.IsToWHNull())
                    oUnsoldDefectiveProduct.ToWH = oUnsoldDefectiveProductRow.ToWH;

                if (CheckUnsoldDefectiveProductID(Convert.ToInt32(oUnsoldDefectiveProductRow.DefectiveID), nWHID))
                {
                    try
                    {
                        oUnsoldDefectiveProduct.Add();
                        oUnsoldDefectiveProductRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                        AppLogger.LogInfo("Successfully Add Unsold Defective Product (DefectiveID=" + oUnsoldDefectiveProductRow.DefectiveID + " and WareHouseID=" + oUnsoldDefectiveProductRow.WarehouseID + ")");
                    }
                    catch (Exception ex)
                    {
                        oUnsoldDefectiveProductRow.IsDownload = (int)Dictionary.YesOrNoStatus.NO;
                        AppLogger.LogError("Error Add Unsold Defective Product(DefectiveID=" + oUnsoldDefectiveProductRow.DefectiveID + " and WareHouseID=" + oUnsoldDefectiveProductRow.WarehouseID + ") /" + ex.Message);
                        DBController.Instance.RollbackTransaction();
                        throw (ex);
                    }

                }
                else
                {
                    oUnsoldDefectiveProductRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                    oUnsoldDefectiveProduct.UpdateInvoiceDataPOS();
                    AppLogger.LogInfo("Successfully Add Unsold Defective Product (DefectiveID=" + oUnsoldDefectiveProductRow.DefectiveID + " and WareHouseID=" + oUnsoldDefectiveProductRow.WarehouseID + ")");
                }
            }
            DBController.Instance.CommitTransaction();
            return oDSUnsoldDefectiveProduct;

        }
        public DSUnsoldDefectiveProduct InsertUnsoldDefectiveProductNew(DSUnsoldDefectiveProduct oDSUnsoldDefectiveProduct, int nWHID)
        {
            if (!DBController.Instance.CheckConnection())
            {
                DBController.Instance.OpenNewConnection();
            }

            OleDbCommand cmd = DBController.Instance.GetCommand();
            UnsoldDefectiveProduct oUnsoldDefectiveProduct;
            /// Insert Unsold Defective Product

            foreach (DSUnsoldDefectiveProduct.UnsoldDefectiveProductRow oUnsoldDefectiveProductRow in oDSUnsoldDefectiveProduct.UnsoldDefectiveProduct)
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                oUnsoldDefectiveProduct = new UnsoldDefectiveProduct();

                oUnsoldDefectiveProduct.DefectiveID = oUnsoldDefectiveProductRow.DefectiveID;
                oUnsoldDefectiveProduct.DefectiveNo = oUnsoldDefectiveProductRow.DefectiveNo;
                oUnsoldDefectiveProduct.WarehouseID = nWHID;
                oUnsoldDefectiveProduct.ProductID = oUnsoldDefectiveProductRow.ProductID;
                oUnsoldDefectiveProduct.BarcodeSL = oUnsoldDefectiveProductRow.BarcodeSL;
                oUnsoldDefectiveProduct.DefectiveType = oUnsoldDefectiveProductRow.DefectiveType;
                oUnsoldDefectiveProduct.Fault = oUnsoldDefectiveProductRow.Fault;
                if (oUnsoldDefectiveProductRow.IsReasonNull())
                    oUnsoldDefectiveProduct.Reason = "";
                else oUnsoldDefectiveProduct.Reason = oUnsoldDefectiveProductRow.Reason;

                if (oUnsoldDefectiveProductRow.IsRemarksNull())
                    oUnsoldDefectiveProduct.Remarks = "";
                else oUnsoldDefectiveProduct.Remarks = oUnsoldDefectiveProductRow.Remarks;

                if (oUnsoldDefectiveProductRow.IsProposeDicAmountNull())
                    oUnsoldDefectiveProduct.ProposeDicAmount = 0;
                oUnsoldDefectiveProduct.ProposeDicAmount = oUnsoldDefectiveProductRow.ProposeDicAmount;
                oUnsoldDefectiveProduct.Status = oUnsoldDefectiveProductRow.Status;
                oUnsoldDefectiveProduct.CreateUserID = oUnsoldDefectiveProductRow.CreateUserID;
                oUnsoldDefectiveProduct.CreateDate = oUnsoldDefectiveProductRow.CreateDate;
                oUnsoldDefectiveProduct.RefTranNo = oUnsoldDefectiveProductRow.RefTranNo;
                oUnsoldDefectiveProduct.RefTranDate = oUnsoldDefectiveProductRow.RefTranDate;

                if (oUnsoldDefectiveProductRow.IsJobNoNull())
                    oUnsoldDefectiveProduct.JobNo = "";
                oUnsoldDefectiveProduct.JobNo = oUnsoldDefectiveProductRow.JobNo;



                if (oUnsoldDefectiveProductRow.IsApproveDicAmountNull())
                    oUnsoldDefectiveProduct.ApproveDicAmount = 0;
                oUnsoldDefectiveProduct.ApproveDicAmount = oUnsoldDefectiveProductRow.ApproveDicAmount;

                if (oUnsoldDefectiveProductRow.IsApproveByNull())
                    oUnsoldDefectiveProduct.ApproveBy = -1;
                oUnsoldDefectiveProduct.ApproveBy = oUnsoldDefectiveProductRow.ApproveBy;

                if (!oUnsoldDefectiveProductRow.IsApproveDateNull())
                    oUnsoldDefectiveProduct.ApproveDate = oUnsoldDefectiveProductRow.ApproveDate;

                if (oUnsoldDefectiveProductRow.IsRefInvoiceNoNull())
                    oUnsoldDefectiveProduct.RefInvoiceNo = "";
                oUnsoldDefectiveProduct.RefInvoiceNo = oUnsoldDefectiveProductRow.RefInvoiceNo;

                if (!oUnsoldDefectiveProductRow.IsRefInvoiceDateNull())
                    oUnsoldDefectiveProduct.RefInvoiceDate = oUnsoldDefectiveProductRow.RefInvoiceDate;

                oUnsoldDefectiveProduct.DefectiveCategory = oUnsoldDefectiveProductRow.DefectiveCategory;
                oUnsoldDefectiveProduct.AssessmentFindings = oUnsoldDefectiveProductRow.AssessmentFindings;
                oUnsoldDefectiveProduct.Accessories = oUnsoldDefectiveProductRow.Accessories;
                if (!oUnsoldDefectiveProductRow.IsTechRecommandationNull())
                    oUnsoldDefectiveProduct.TechRecommandation = oUnsoldDefectiveProductRow.TechRecommandation;
                if (!oUnsoldDefectiveProductRow.IsTechRemarksNull())
                    oUnsoldDefectiveProduct.TechRemarks = oUnsoldDefectiveProductRow.TechRemarks;
                if (!oUnsoldDefectiveProductRow.IsIsLocallySaleableNull())
                    oUnsoldDefectiveProduct.IsLocallySaleable = oUnsoldDefectiveProductRow.IsLocallySaleable;
                if (!oUnsoldDefectiveProductRow.IsPaneltyAmountNull())
                    oUnsoldDefectiveProduct.PaneltyAmount = oUnsoldDefectiveProductRow.PaneltyAmount;

                oUnsoldDefectiveProduct.OriginalSL = oUnsoldDefectiveProductRow.OriginalSL;
                if (!oUnsoldDefectiveProductRow.IsIsPenaltyApplicableNull())
                    oUnsoldDefectiveProduct.IsPenaltyApplicable = oUnsoldDefectiveProductRow.IsPenaltyApplicable;
                if (!oUnsoldDefectiveProductRow.IsIsDefectiveAcknowledgedNull())
                    oUnsoldDefectiveProduct.IsDefectiveAcknowledged = oUnsoldDefectiveProductRow.IsDefectiveAcknowledged;
                if (!oUnsoldDefectiveProductRow.IsAcknowledgmentRemarksNull())
                    oUnsoldDefectiveProduct.AcknowledgmentRemarks = oUnsoldDefectiveProductRow.AcknowledgmentRemarks;
                if (!oUnsoldDefectiveProductRow.IsExpSalesDateNull())
                    oUnsoldDefectiveProduct.ExpSalesDate = oUnsoldDefectiveProductRow.ExpSalesDate;
                if (!oUnsoldDefectiveProductRow.IsFromWHNull())
                    oUnsoldDefectiveProduct.FromWH = oUnsoldDefectiveProductRow.FromWH;
                if (!oUnsoldDefectiveProductRow.IsToWHNull())
                    oUnsoldDefectiveProduct.ToWH = oUnsoldDefectiveProductRow.ToWH;

                if (CheckUnsoldDefectiveProductIDNew(Convert.ToInt32(oUnsoldDefectiveProductRow.DefectiveID), nWHID))
                {
                    try
                    {
                        oUnsoldDefectiveProduct.AddNew();
                        oUnsoldDefectiveProductRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                        AppLogger.LogInfo("Successfully Add Unsold Defective Product (DefectiveID=" + oUnsoldDefectiveProductRow.DefectiveID + " and WareHouseID=" + oUnsoldDefectiveProductRow.WarehouseID + ")");
                    }
                    catch (Exception ex)
                    {
                        oUnsoldDefectiveProductRow.IsDownload = (int)Dictionary.YesOrNoStatus.NO;
                        AppLogger.LogError("Error Add Unsold Defective Product(DefectiveID=" + oUnsoldDefectiveProductRow.DefectiveID + " and WareHouseID=" + oUnsoldDefectiveProductRow.WarehouseID + ") /" + ex.Message);
                        DBController.Instance.RollbackTransaction();
                        throw (ex);
                    }

                }
                else
                {
                    oUnsoldDefectiveProductRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                    oUnsoldDefectiveProduct.UpdateInvoiceDataPOSNew();
                    AppLogger.LogInfo("Successfully Add Unsold Defective Product (DefectiveID=" + oUnsoldDefectiveProductRow.DefectiveID + " and WareHouseID=" + oUnsoldDefectiveProductRow.WarehouseID + ")");
                }
            }
            DBController.Instance.CommitTransaction();
            return oDSUnsoldDefectiveProduct;

        }

        public DSCustomerCreditApprovalCollection InsertCustomerCreditCollection(DSCustomerCreditApprovalCollection oDSCustomerCreditApprovalCollection, int nWHID)
        {
            if (!DBController.Instance.CheckConnection())
            {
                DBController.Instance.OpenNewConnection();
            }

            OleDbCommand cmd = DBController.Instance.GetCommand();

            CustomerCreditApprovalCollection oCustomerCreditApprovalCollection;

            foreach (DSCustomerCreditApprovalCollection.CustomerCreditApprovalCollectionRow oCustomerCreditApprovalCollectionRow in oDSCustomerCreditApprovalCollection.CustomerCreditApprovalCollection)
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();
                oCustomerCreditApprovalCollection = new CustomerCreditApprovalCollection();

                oCustomerCreditApprovalCollection.CreditApprovalCollectionID = oCustomerCreditApprovalCollectionRow.CreditApprovalCollectionID;
                oCustomerCreditApprovalCollection.CreditApprovalID = oCustomerCreditApprovalCollectionRow.CreditApprovalID;
                oCustomerCreditApprovalCollection.WarehouseID = oCustomerCreditApprovalCollectionRow.WarehouseID;
                oCustomerCreditApprovalCollection.CustomerID = oCustomerCreditApprovalCollectionRow.CustomerID;
                oCustomerCreditApprovalCollection.Amount = oCustomerCreditApprovalCollectionRow.Amount;
                oCustomerCreditApprovalCollection.CreateUserID = oCustomerCreditApprovalCollectionRow.CreateUserID;
                oCustomerCreditApprovalCollection.CreateDate = oCustomerCreditApprovalCollectionRow.CreateDate;
                oCustomerCreditApprovalCollection.InstrumentType = oCustomerCreditApprovalCollectionRow.InstrumentType;
                if (oCustomerCreditApprovalCollectionRow.IsInstrumentDateNull())
                    oCustomerCreditApprovalCollection.InstrumentDate = null;
                else
                    oCustomerCreditApprovalCollection.InstrumentDate = oCustomerCreditApprovalCollectionRow.InstrumentDate;
                oCustomerCreditApprovalCollection.InstrumentNo = oCustomerCreditApprovalCollectionRow.InstrumentNo;
                oCustomerCreditApprovalCollection.BankID = oCustomerCreditApprovalCollectionRow.BankID;
                oCustomerCreditApprovalCollection.BranchName = oCustomerCreditApprovalCollectionRow.BranchName;
                oCustomerCreditApprovalCollection.InstrumentStatus = oCustomerCreditApprovalCollectionRow.InstrumentStatus;
                oCustomerCreditApprovalCollection.Remarks = oCustomerCreditApprovalCollectionRow.Remarks;

                if (oCustomerCreditApprovalCollection.CheckCollection())
                {
                    try
                    {
                        oCustomerCreditApprovalCollection.AddForPOS();
                        CustomerCreditApproval oCustomerCreditApproval = new CustomerCreditApproval();
                        oCustomerCreditApproval.UpdateCollectedAmount(oCustomerCreditApprovalCollection.CreditApprovalID, oCustomerCreditApprovalCollection.WarehouseID, oCustomerCreditApprovalCollection.CustomerID, oCustomerCreditApprovalCollection.Amount);
                        oCustomerCreditApprovalCollectionRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                        AppLogger.LogInfo("Successfully Added Customer Credit Approval Collection (CreditApprovalCollectionID=" + oCustomerCreditApprovalCollectionRow.CreditApprovalCollectionID + "CustomerID=" + oCustomerCreditApprovalCollectionRow.CustomerID + " and WarehouseID=" + oCustomerCreditApprovalCollectionRow.WarehouseID + ")");
                    }
                    catch (Exception ex)
                    {

                        AppLogger.LogError("Error Adding Customer Credit Approval Collection (CreditApprovalCollectionID=" + oCustomerCreditApprovalCollectionRow.CreditApprovalCollectionID + "CustomerID=" + oCustomerCreditApprovalCollectionRow.CustomerID + " and WarehouseID=" + oCustomerCreditApprovalCollectionRow.WarehouseID + ") /" + ex.Message);
                        oCustomerCreditApprovalCollectionRow.IsDownload = (int)Dictionary.YesOrNoStatus.NO;
                        DBController.Instance.RollbackTransaction();
                        throw (ex);
                    }

                }
                else
                {
                    oCustomerCreditApprovalCollectionRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                    AppLogger.LogInfo("Successfully Added Customer Credit Approval Collection (CreditApprovalCollectionID=" + oCustomerCreditApprovalCollectionRow.CreditApprovalCollectionID + "CustomerID=" + oCustomerCreditApprovalCollectionRow.CustomerID + " and WarehouseID=" + oCustomerCreditApprovalCollectionRow.WarehouseID + ")");
                }
            }
            DBController.Instance.CommitTransaction();
            return oDSCustomerCreditApprovalCollection;

        }

        public DSSalesLead InsertSalesLead(DSSalesLead oDSSalesLead, int nWHID)
        {
            DBController.Instance.OpenNewConnection();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            SalesLead oSalesLead;
            /// Insert SalesLead

            foreach (DSSalesLead.SalesLeadRow oSalesLeadRow in oDSSalesLead.SalesLead)
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                oSalesLead = new SalesLead();

                oSalesLead.LeadID = oSalesLeadRow.LeadID;
                oSalesLead.WarehouseID = nWHID;
                oSalesLead.LeadNo = oSalesLeadRow.LeadNo;
                oSalesLead.LeadDate = oSalesLeadRow.LeadDate;
                oSalesLead.ExpExecuteDate = oSalesLeadRow.ExpExecuteDate;
                oSalesLead.CustomerType = oSalesLeadRow.CustomerType;
                if (oSalesLeadRow.IsReasonNull())
                    oSalesLead.CompanyName = "";
                else oSalesLead.CompanyName = oSalesLeadRow.CompanyName;
                oSalesLead.Name = oSalesLeadRow.Name;
                oSalesLead.Address = oSalesLeadRow.Address;
                oSalesLead.ContactNo = oSalesLeadRow.ContactNo;
                oSalesLead.Email = oSalesLeadRow.Email;
                if (oSalesLeadRow.IsReasonNull())
                    oSalesLead.Profession = "";
                else oSalesLead.Profession = oSalesLeadRow.Profession;

                if (oSalesLeadRow.IsReasonNull())
                    oSalesLead.AgeLevel = "";
                else oSalesLead.AgeLevel = oSalesLeadRow.AgeLevel;
                if (oSalesLeadRow.IsReasonNull())
                    oSalesLead.IncomLevel = "";
                else oSalesLead.IncomLevel = oSalesLeadRow.IncomLevel;
                oSalesLead.MAGID = oSalesLeadRow.MAGID;
                oSalesLead.BrandID = oSalesLeadRow.BrandID;
                oSalesLead.ModelName = oSalesLeadRow.ModelName;
                oSalesLead.NextFollowUpDate = oSalesLeadRow.NextFollowUpDate;
                oSalesLead.LeadAmount = oSalesLeadRow.LeadAmount;
                oSalesLead.Status = oSalesLeadRow.Status;

                if (oSalesLeadRow.IsRemarksNull())
                    oSalesLead.Remarks = "";
                else oSalesLead.Remarks = oSalesLeadRow.Remarks;

                if (oSalesLeadRow.IsReasonNull())
                    oSalesLead.Reason = "";
                else oSalesLead.Reason = oSalesLeadRow.Reason;
                if (oSalesLeadRow.IsCancelDateNull())
                    oSalesLead.CancelDate = "";
                else oSalesLead.CancelDate = oSalesLeadRow.CancelDate;

                if (oSalesLeadRow.IsInvoiceNoNull())
                    oSalesLead.InvoiceNo = "";
                else oSalesLead.InvoiceNo = oSalesLeadRow.InvoiceNo;
                if (oSalesLeadRow.IsInvoiceDateNull())
                    oSalesLead.InvoiceDate = "";
                else oSalesLead.InvoiceDate = oSalesLeadRow.InvoiceDate;


                oSalesLead.CreateDate = oSalesLeadRow.CreateDate;
                oSalesLead.CreateUserID = oSalesLeadRow.CreateUserID;

                if (oSalesLeadRow.IsUpdateDateNull())
                    oSalesLead.UpdateDate = "";
                else oSalesLead.UpdateDate = oSalesLeadRow.UpdateDate;

                if (oSalesLeadRow.IsUpdateUserIDNull())
                    oSalesLead.UpdateUserID = -1;
                else oSalesLead.UpdateUserID = oSalesLeadRow.UpdateUserID;
                oSalesLead.SalesPersonID = -1;
                oSalesLead.Terminal = (int)Dictionary.Terminal.Branch_Office;
                oSalesLead.ConversionPossibility = -1;


                if (CheckSalesLeadNo(oSalesLeadRow.LeadNo, nWHID))
                {

                    try
                    {
                        oSalesLead.Add();
                        oSalesLeadRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                        AppLogger.LogInfo("Successfully Add Sales Lead (SalesLeadID=" + oSalesLeadRow.LeadID + " and WareHouseID=" + oSalesLeadRow.WarehouseID + ")");
                    }
                    catch (Exception ex)
                    {

                        oSalesLeadRow.IsDownload = (int)Dictionary.YesOrNoStatus.NO;
                        AppLogger.LogError("Error Add Sales Lead(LeadID=" + oSalesLeadRow.LeadID + " and WareHouseID=" + oSalesLeadRow.WarehouseID + ") /" + ex.Message);
                        DBController.Instance.RollbackTransaction();
                        throw (ex);
                    }

                }
                else
                {
                    oSalesLead.Update();
                    oSalesLeadRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                    AppLogger.LogInfo("Successfully Add Sales Lead (LeadID=" + oSalesLeadRow.LeadID + " and WareHouseID=" + oSalesLeadRow.WarehouseID + ")");
                }
            }
            DBController.Instance.CommitTransaction();
            return oDSSalesLead;

        }

        public DSSalesLead InsertSalesLead_new(DSSalesLead oDSSalesLead, int nWHID)
        {
            DBController.Instance.OpenNewConnection();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            SalesLead oSalesLead;
            /// Insert SalesLead

            foreach (DSSalesLead.SalesLeadRow oSalesLeadRow in oDSSalesLead.SalesLead)
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                oSalesLead = new SalesLead();

                oSalesLead.LeadID = oSalesLeadRow.LeadID;
                oSalesLead.WarehouseID = nWHID;
                oSalesLead.LeadNo = oSalesLeadRow.LeadNo;
                oSalesLead.LeadDate = oSalesLeadRow.LeadDate;
                oSalesLead.ExpExecuteDate = oSalesLeadRow.ExpExecuteDate;
                oSalesLead.CustomerType = oSalesLeadRow.CustomerType;
                if (oSalesLeadRow.IsReasonNull())
                    oSalesLead.CompanyName = "";
                else oSalesLead.CompanyName = oSalesLeadRow.CompanyName;
                oSalesLead.Name = oSalesLeadRow.Name;
                oSalesLead.Address = oSalesLeadRow.Address;
                oSalesLead.ContactNo = oSalesLeadRow.ContactNo;
                oSalesLead.Email = oSalesLeadRow.Email;
                if (oSalesLeadRow.IsReasonNull())
                    oSalesLead.Profession = "";
                else oSalesLead.Profession = oSalesLeadRow.Profession;

                if (oSalesLeadRow.IsReasonNull())
                    oSalesLead.AgeLevel = "";
                else oSalesLead.AgeLevel = oSalesLeadRow.AgeLevel;
                if (oSalesLeadRow.IsReasonNull())
                    oSalesLead.IncomLevel = "";
                else oSalesLead.IncomLevel = oSalesLeadRow.IncomLevel;
                oSalesLead.MAGID = oSalesLeadRow.MAGID;
                oSalesLead.BrandID = oSalesLeadRow.BrandID;
                oSalesLead.ModelName = oSalesLeadRow.ModelName;
                oSalesLead.NextFollowUpDate = oSalesLeadRow.NextFollowUpDate;
                oSalesLead.LeadAmount = oSalesLeadRow.LeadAmount;
                oSalesLead.Status = oSalesLeadRow.Status;

                if (oSalesLeadRow.IsRemarksNull())
                    oSalesLead.Remarks = "";
                else oSalesLead.Remarks = oSalesLeadRow.Remarks;

                if (oSalesLeadRow.IsReasonNull())
                    oSalesLead.Reason = "";
                else oSalesLead.Reason = oSalesLeadRow.Reason;
                if (oSalesLeadRow.IsCancelDateNull())
                    oSalesLead.CancelDate = "";
                else oSalesLead.CancelDate = oSalesLeadRow.CancelDate;

                if (oSalesLeadRow.IsInvoiceNoNull())
                    oSalesLead.InvoiceNo = "";
                else oSalesLead.InvoiceNo = oSalesLeadRow.InvoiceNo;
                if (oSalesLeadRow.IsInvoiceDateNull())
                    oSalesLead.InvoiceDate = "";
                else oSalesLead.InvoiceDate = oSalesLeadRow.InvoiceDate;


                oSalesLead.CreateDate = oSalesLeadRow.CreateDate;
                oSalesLead.CreateUserID = oSalesLeadRow.CreateUserID;

                if (oSalesLeadRow.IsUpdateDateNull())
                    oSalesLead.UpdateDate = "";
                else oSalesLead.UpdateDate = oSalesLeadRow.UpdateDate;

                if (oSalesLeadRow.IsUpdateUserIDNull())
                    oSalesLead.UpdateUserID = -1;
                else oSalesLead.UpdateUserID = oSalesLeadRow.UpdateUserID;

                if (oSalesLeadRow.IsSalesPersonIDNull())
                    oSalesLead.SalesPersonID = -1;
                else oSalesLead.SalesPersonID = oSalesLeadRow.SalesPersonID;
                if (oSalesLeadRow.IsTerminalNull())
                    oSalesLead.Terminal = (int)Dictionary.Terminal.Branch_Office;
                else oSalesLead.Terminal = oSalesLeadRow.Terminal;
                if (oSalesLeadRow.IsConversionPossibilityNull())
                    oSalesLead.ConversionPossibility = -1;
                else oSalesLead.ConversionPossibility = oSalesLeadRow.ConversionPossibility;

                if (CheckSalesLeadNo(oSalesLeadRow.LeadNo, nWHID))
                {

                    try
                    {
                        oSalesLead.Add();
                        oSalesLeadRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                        AppLogger.LogInfo("Successfully Add Sales Lead (SalesLeadID=" + oSalesLeadRow.LeadID + " and WareHouseID=" + oSalesLeadRow.WarehouseID + ")");
                    }
                    catch (Exception ex)
                    {

                        oSalesLeadRow.IsDownload = (int)Dictionary.YesOrNoStatus.NO;
                        AppLogger.LogError("Error Add Sales Lead(LeadID=" + oSalesLeadRow.LeadID + " and WareHouseID=" + oSalesLeadRow.WarehouseID + ") /" + ex.Message);
                        DBController.Instance.RollbackTransaction();
                        throw (ex);
                    }

                }
                else
                {
                    oSalesLead.Update();
                    oSalesLeadRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                    AppLogger.LogInfo("Successfully Add Sales Lead (LeadID=" + oSalesLeadRow.LeadID + " and WareHouseID=" + oSalesLeadRow.WarehouseID + ")");
                }
            }
            DBController.Instance.CommitTransaction();
            return oDSSalesLead;

        }

        public DSSalesLead InsertSalesLead_new1(DSSalesLead oDSSalesLead, int nWHID)
        {
            DBController.Instance.OpenNewConnection();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            SalesLead oSalesLead;
            /// Insert SalesLead

            foreach (DSSalesLead.SalesLeadRow oSalesLeadRow in oDSSalesLead.SalesLead)
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                oSalesLead = new SalesLead();

                oSalesLead.LeadID = oSalesLeadRow.LeadID;
                oSalesLead.WarehouseID = nWHID;
                oSalesLead.LeadNo = oSalesLeadRow.LeadNo;
                oSalesLead.LeadDate = oSalesLeadRow.LeadDate;
                oSalesLead.ExpExecuteDate = oSalesLeadRow.ExpExecuteDate;
                oSalesLead.CustomerType = oSalesLeadRow.CustomerType;
                if (oSalesLeadRow.IsReasonNull())
                    oSalesLead.CompanyName = "";
                else oSalesLead.CompanyName = oSalesLeadRow.CompanyName;
                oSalesLead.Name = oSalesLeadRow.Name;
                oSalesLead.Address = oSalesLeadRow.Address;
                oSalesLead.ContactNo = oSalesLeadRow.ContactNo;
                oSalesLead.Email = oSalesLeadRow.Email;
                if (oSalesLeadRow.IsReasonNull())
                    oSalesLead.Profession = "";
                else oSalesLead.Profession = oSalesLeadRow.Profession;

                if (oSalesLeadRow.IsReasonNull())
                    oSalesLead.AgeLevel = "";
                else oSalesLead.AgeLevel = oSalesLeadRow.AgeLevel;
                if (oSalesLeadRow.IsReasonNull())
                    oSalesLead.IncomLevel = "";
                else oSalesLead.IncomLevel = oSalesLeadRow.IncomLevel;
                oSalesLead.MAGID = oSalesLeadRow.MAGID;
                oSalesLead.BrandID = oSalesLeadRow.BrandID;
                oSalesLead.ModelName = oSalesLeadRow.ModelName;
                oSalesLead.NextFollowUpDate = oSalesLeadRow.NextFollowUpDate;
                oSalesLead.LeadAmount = oSalesLeadRow.LeadAmount;
                oSalesLead.Status = oSalesLeadRow.Status;

                if (oSalesLeadRow.IsRemarksNull())
                    oSalesLead.Remarks = "";
                else oSalesLead.Remarks = oSalesLeadRow.Remarks;

                if (oSalesLeadRow.IsReasonNull())
                    oSalesLead.Reason = "";
                else oSalesLead.Reason = oSalesLeadRow.Reason;
                if (oSalesLeadRow.IsCancelDateNull())
                    oSalesLead.CancelDate = "";
                else oSalesLead.CancelDate = oSalesLeadRow.CancelDate;

                if (oSalesLeadRow.IsInvoiceNoNull())
                    oSalesLead.InvoiceNo = "";
                else oSalesLead.InvoiceNo = oSalesLeadRow.InvoiceNo;
                if (oSalesLeadRow.IsInvoiceDateNull())
                    oSalesLead.InvoiceDate = "";
                else oSalesLead.InvoiceDate = oSalesLeadRow.InvoiceDate;


                oSalesLead.CreateDate = oSalesLeadRow.CreateDate;
                oSalesLead.CreateUserID = oSalesLeadRow.CreateUserID;

                if (oSalesLeadRow.IsUpdateDateNull())
                    oSalesLead.UpdateDate = "";
                else oSalesLead.UpdateDate = oSalesLeadRow.UpdateDate;

                if (oSalesLeadRow.IsUpdateUserIDNull())
                    oSalesLead.UpdateUserID = -1;
                else oSalesLead.UpdateUserID = oSalesLeadRow.UpdateUserID;

                if (oSalesLeadRow.IsSalesPersonIDNull())
                    oSalesLead.SalesPersonID = -1;
                else oSalesLead.SalesPersonID = oSalesLeadRow.SalesPersonID;
                if (oSalesLeadRow.IsTerminalNull())
                    oSalesLead.Terminal = (int)Dictionary.Terminal.Branch_Office;
                else oSalesLead.Terminal = oSalesLeadRow.Terminal;
                if (oSalesLeadRow.IsConversionPossibilityNull())
                    oSalesLead.ConversionPossibility = -1;
                else oSalesLead.ConversionPossibility = oSalesLeadRow.ConversionPossibility;

                if (oSalesLeadRow.IsQtyNull())
                    oSalesLead.Qty = 1;
                else oSalesLead.Qty = oSalesLeadRow.Qty;


                if (CheckSalesLeadNo(oSalesLeadRow.LeadNo, nWHID))
                {

                    try
                    {
                        oSalesLead.AddForWEB();
                        oSalesLeadRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                        AppLogger.LogInfo("Successfully Add Sales Lead (SalesLeadID=" + oSalesLeadRow.LeadID + " and WareHouseID=" + oSalesLeadRow.WarehouseID + ")");
                    }
                    catch (Exception ex)
                    {

                        oSalesLeadRow.IsDownload = (int)Dictionary.YesOrNoStatus.NO;
                        AppLogger.LogError("Error Add Sales Lead(LeadID=" + oSalesLeadRow.LeadID + " and WareHouseID=" + oSalesLeadRow.WarehouseID + ") /" + ex.Message);
                        DBController.Instance.RollbackTransaction();
                        throw (ex);
                    }

                }
                else
                {
                    oSalesLead.UpdateForWEB();
                    oSalesLeadRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                    AppLogger.LogInfo("Successfully Add Sales Lead (LeadID=" + oSalesLeadRow.LeadID + " and WareHouseID=" + oSalesLeadRow.WarehouseID + ")");
                }
            }
            DBController.Instance.CommitTransaction();
            return oDSSalesLead;

        }

        public DSSalesLead InsertSalesLead_new2(DSSalesLead oDSSalesLead, int nWHID)
        {
            if (!DBController.Instance.CheckConnection())
            {
                DBController.Instance.OpenNewConnection();
            }

            OleDbCommand cmd = DBController.Instance.GetCommand();
            SalesLead oSalesLead;
            /// Insert SalesLead

            foreach (DSSalesLead.SalesLeadRow oSalesLeadRow in oDSSalesLead.SalesLead)
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                oSalesLead = new SalesLead();

                oSalesLead.LeadID = oSalesLeadRow.LeadID;
                oSalesLead.WarehouseID = nWHID;
                oSalesLead.LeadNo = oSalesLeadRow.LeadNo;
                oSalesLead.LeadDate = oSalesLeadRow.LeadDate;
                oSalesLead.ExpExecuteDate = oSalesLeadRow.ExpExecuteDate;
                oSalesLead.CustomerType = oSalesLeadRow.CustomerType;
                if (oSalesLeadRow.IsReasonNull())
                    oSalesLead.CompanyName = "";
                else oSalesLead.CompanyName = oSalesLeadRow.CompanyName;
                oSalesLead.Name = oSalesLeadRow.Name;
                oSalesLead.Address = oSalesLeadRow.Address;
                oSalesLead.ContactNo = oSalesLeadRow.ContactNo;
                oSalesLead.Email = oSalesLeadRow.Email;
                if (oSalesLeadRow.IsReasonNull())
                    oSalesLead.Profession = "";
                else oSalesLead.Profession = oSalesLeadRow.Profession;

                if (oSalesLeadRow.IsReasonNull())
                    oSalesLead.AgeLevel = "";
                else oSalesLead.AgeLevel = oSalesLeadRow.AgeLevel;
                if (oSalesLeadRow.IsReasonNull())
                    oSalesLead.IncomLevel = "";
                else oSalesLead.IncomLevel = oSalesLeadRow.IncomLevel;
                oSalesLead.MAGID = oSalesLeadRow.MAGID;
                oSalesLead.BrandID = oSalesLeadRow.BrandID;
                oSalesLead.ModelName = oSalesLeadRow.ModelName;
                oSalesLead.NextFollowUpDate = oSalesLeadRow.NextFollowUpDate;
                oSalesLead.LeadAmount = oSalesLeadRow.LeadAmount;
                oSalesLead.Status = oSalesLeadRow.Status;

                if (oSalesLeadRow.IsRemarksNull())
                    oSalesLead.Remarks = "";
                else oSalesLead.Remarks = oSalesLeadRow.Remarks;

                if (oSalesLeadRow.IsReasonNull())
                    oSalesLead.Reason = "";
                else oSalesLead.Reason = oSalesLeadRow.Reason;
                if (!oSalesLeadRow.IsCancelDateNull())
                    oSalesLead.CancelDate = oSalesLeadRow.CancelDate;
                //else oSalesLead.CancelDate = oSalesLeadRow.CancelDate;

                if (oSalesLeadRow.IsInvoiceNoNull())
                    oSalesLead.InvoiceNo = "";
                else oSalesLead.InvoiceNo = oSalesLeadRow.InvoiceNo;


                if (!oSalesLeadRow.IsInvoiceDateNull())
                    oSalesLead.InvoiceDate = oSalesLeadRow.InvoiceDate;
                //else oSalesLead.InvoiceDate = oSalesLeadRow.InvoiceDate;


                oSalesLead.CreateDate = oSalesLeadRow.CreateDate;
                oSalesLead.CreateUserID = oSalesLeadRow.CreateUserID;

                if (!oSalesLeadRow.IsUpdateDateNull())
                    oSalesLead.UpdateDate = oSalesLeadRow.UpdateDate;
                //else oSalesLead.UpdateDate = oSalesLeadRow.UpdateDate;

                if (oSalesLeadRow.IsUpdateUserIDNull())
                    oSalesLead.UpdateUserID = -1;
                else oSalesLead.UpdateUserID = oSalesLeadRow.UpdateUserID;

                if (oSalesLeadRow.IsSalesPersonIDNull())
                    oSalesLead.SalesPersonID = -1;
                else oSalesLead.SalesPersonID = oSalesLeadRow.SalesPersonID;
                if (oSalesLeadRow.IsTerminalNull())
                    oSalesLead.Terminal = (int)Dictionary.Terminal.Branch_Office;
                else oSalesLead.Terminal = oSalesLeadRow.Terminal;
                if (oSalesLeadRow.IsConversionPossibilityNull())
                    oSalesLead.ConversionPossibility = -1;
                else oSalesLead.ConversionPossibility = oSalesLeadRow.ConversionPossibility;

                if (oSalesLeadRow.IsQtyNull())
                    oSalesLead.Qty = 1;
                else oSalesLead.Qty = oSalesLeadRow.Qty;

                if (oSalesLeadRow.IsIsExistingConsumerNull())
                    oSalesLead.IsExistingConsumer = 0;
                else oSalesLead.IsExistingConsumer = oSalesLeadRow.IsExistingConsumer;

                if (oSalesLeadRow.IsRefLeadNoNull())
                    oSalesLead.RefLeadNo = "";
                else oSalesLead.RefLeadNo = oSalesLeadRow.RefLeadNo;

                if (oSalesLeadRow.IsLeadSourceNull())
                    oSalesLead.LeadSource = (int)Dictionary.LeadSource.General;
                else oSalesLead.LeadSource = oSalesLeadRow.LeadSource;

                if (oSalesLeadRow.IsActivationIDNull())
                    oSalesLead.ActivationID = -1;
                else oSalesLead.ActivationID = oSalesLeadRow.ActivationID;

                if (oSalesLeadRow.IsProductIDNull())
                    oSalesLead.ProductID = -1;
                else oSalesLead.ProductID = oSalesLeadRow.ProductID;
                if (oSalesLeadRow.IsThanaIDNull())
                    oSalesLead.ThanaID = -1;
                else oSalesLead.ThanaID = oSalesLeadRow.ThanaID;

                if (oSalesLeadRow.IsConsumerIDNull())
                    oSalesLead.ConsumerID = -1;
                else oSalesLead.ConsumerID = oSalesLeadRow.ConsumerID;

                if (CheckSalesLeadNo(oSalesLeadRow.LeadNo, nWHID))
                {

                    try
                    {
                        oSalesLead.AddForWEB();
                        oSalesLeadRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                        AppLogger.LogInfo("Successfully Add Sales Lead (SalesLeadID=" + oSalesLeadRow.LeadID + " and WareHouseID=" + oSalesLeadRow.WarehouseID + ")");
                    }
                    catch (Exception ex)
                    {

                        oSalesLeadRow.IsDownload = (int)Dictionary.YesOrNoStatus.NO;
                        AppLogger.LogError("Error Add Sales Lead(LeadID=" + oSalesLeadRow.LeadID + " and WareHouseID=" + oSalesLeadRow.WarehouseID + ") /" + ex.Message);
                        DBController.Instance.RollbackTransaction();
                        throw (ex);
                    }

                }
                else
                {
                    oSalesLead.UpdateForWEB();
                    oSalesLeadRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                    AppLogger.LogInfo("Successfully Add Sales Lead (LeadID=" + oSalesLeadRow.LeadID + " and WareHouseID=" + oSalesLeadRow.WarehouseID + ")");
                }
            }
            DBController.Instance.CommitTransaction();
            return oDSSalesLead;

        }

        public void InsertSalesLead1(DSSalesLead oDSSalesLead, int nWHID)
        {
            DBController.Instance.OpenNewConnection();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";
            int nMaxLeadID = 0;

            foreach (DSSalesLead.SalesLeadRow oSalesLeadRow in oDSSalesLead.SalesLead)
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                if (CheckSalesLeadNo(oSalesLeadRow.LeadNo, nWHID))
                {

                    sSql = "SELECT MAX([LeadID]) FROM t_SalesLeadManagement";
                    cmd.CommandText = sSql;
                    object maxID = cmd.ExecuteScalar();
                    if (maxID == DBNull.Value)
                    {
                        nMaxLeadID = 1;
                    }
                    else
                    {
                        nMaxLeadID = Convert.ToInt32(maxID) + 1;
                    }

                    sSql = "INSERT INTO t_SalesLeadManagement (LeadID, WarehouseID, LeadNo, LeadDate, ExpExecuteDate, CustomerType, CompanyName, Name, Address, ContactNo, Email, Profession, AgeLevel, IncomLevel, MAGID, BrandID, ModelName, NextFollowUpDate, LeadAmount, Status, Remarks, Reason, InvoiceNo, CreateDate, CreateUserID, UpdateDate, UpdateUserID, SalesPersonID, Terminal, ConversionPossibility, Qty) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                    try
                    {
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("LeadID", nMaxLeadID);
                        cmd.Parameters.AddWithValue("WarehouseID", nWHID);
                        cmd.Parameters.AddWithValue("LeadNo", oSalesLeadRow.LeadNo);
                        cmd.Parameters.AddWithValue("LeadDate", oSalesLeadRow.LeadDate);
                        cmd.Parameters.AddWithValue("ExpExecuteDate", oSalesLeadRow.ExpExecuteDate);
                        cmd.Parameters.AddWithValue("CustomerType", oSalesLeadRow.CustomerType);
                        cmd.Parameters.AddWithValue("CompanyName", oSalesLeadRow.CompanyName);
                        cmd.Parameters.AddWithValue("Name", oSalesLeadRow.Name);
                        cmd.Parameters.AddWithValue("Address", oSalesLeadRow.Address);
                        cmd.Parameters.AddWithValue("ContactNo", oSalesLeadRow.ContactNo);
                        cmd.Parameters.AddWithValue("Email", oSalesLeadRow.Email);
                        cmd.Parameters.AddWithValue("Profession", oSalesLeadRow.Profession);
                        cmd.Parameters.AddWithValue("AgeLevel", oSalesLeadRow.AgeLevel);
                        cmd.Parameters.AddWithValue("IncomLevel", oSalesLeadRow.IncomLevel);
                        cmd.Parameters.AddWithValue("MAGID", oSalesLeadRow.MAGID);
                        cmd.Parameters.AddWithValue("BrandID", oSalesLeadRow.BrandID);
                        cmd.Parameters.AddWithValue("ModelName", oSalesLeadRow.ModelName);
                        cmd.Parameters.AddWithValue("NextFollowUpDate", oSalesLeadRow.NextFollowUpDate);
                        cmd.Parameters.AddWithValue("LeadAmount", oSalesLeadRow.LeadAmount);
                        cmd.Parameters.AddWithValue("Status", oSalesLeadRow.Status);
                        cmd.Parameters.AddWithValue("Remarks", oSalesLeadRow.Remarks);
                        cmd.Parameters.AddWithValue("Reason", oSalesLeadRow.Reason);
                        cmd.Parameters.AddWithValue("InvoiceNo", oSalesLeadRow.InvoiceNo);
                        cmd.Parameters.AddWithValue("CreateDate", oSalesLeadRow.CreateDate);
                        cmd.Parameters.AddWithValue("CreateUserID", oSalesLeadRow.CreateUserID);
                        cmd.Parameters.AddWithValue("UpdateDate", null);
                        cmd.Parameters.AddWithValue("UpdateUserID", null);
                        cmd.Parameters.AddWithValue("SalesPersonID", oSalesLeadRow.SalesPersonID);
                        cmd.Parameters.AddWithValue("Terminal", oSalesLeadRow.Terminal);
                        cmd.Parameters.AddWithValue("ConversionPossibility", oSalesLeadRow.ConversionPossibility);
                        cmd.Parameters.AddWithValue("Qty", oSalesLeadRow.Qty);

                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
                else
                {

                    try
                    {
                        sSql = "UPDATE t_SalesLeadManagement SET LeadDate = ?, ExpExecuteDate = ?, CustomerType = ?, " +
                        "CompanyName = ?, Name = ?, Address = ?, ContactNo = ?, Email = ?, Profession = ?, " +
                        "AgeLevel = ?, IncomLevel = ?, MAGID = ?, BrandID = ?, ModelName = ?, NextFollowUpDate = ?, " +
                        "LeadAmount = ?, Remarks = ?,UpdateDate = ?, UpdateUserID = ?, InvoiceNo = ?, Reason = ?, " +
                        "Status = ?, SalesPersonID = ?, Terminal = ?, ConversionPossibility = ?, Qty = ?  WHERE LeadNo = ? and WarehouseID = ?";

                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.AddWithValue("LeadDate", oSalesLeadRow.LeadDate);
                        cmd.Parameters.AddWithValue("ExpExecuteDate", oSalesLeadRow.ExpExecuteDate);
                        cmd.Parameters.AddWithValue("CustomerType", oSalesLeadRow.CustomerType);
                        cmd.Parameters.AddWithValue("CompanyName", oSalesLeadRow.CompanyName);
                        cmd.Parameters.AddWithValue("Name", oSalesLeadRow.Name);
                        cmd.Parameters.AddWithValue("Address", oSalesLeadRow.Address);
                        cmd.Parameters.AddWithValue("ContactNo", oSalesLeadRow.ContactNo);

                        cmd.Parameters.AddWithValue("Email", oSalesLeadRow.Email);
                        cmd.Parameters.AddWithValue("Profession", oSalesLeadRow.Profession);
                        cmd.Parameters.AddWithValue("AgeLevel", oSalesLeadRow.AgeLevel);
                        cmd.Parameters.AddWithValue("IncomLevel", oSalesLeadRow.IncomLevel);
                        cmd.Parameters.AddWithValue("MAGID", oSalesLeadRow.MAGID);
                        cmd.Parameters.AddWithValue("BrandID", oSalesLeadRow.BrandID);
                        cmd.Parameters.AddWithValue("ModelName", oSalesLeadRow.ModelName);
                        cmd.Parameters.AddWithValue("NextFollowUpDate", oSalesLeadRow.NextFollowUpDate);

                        cmd.Parameters.AddWithValue("LeadAmount", oSalesLeadRow.LeadAmount);
                        cmd.Parameters.AddWithValue("Remarks", oSalesLeadRow.Remarks);
                        cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now.Date);
                        cmd.Parameters.AddWithValue("UpdateUserID", Utility.UserId);
                        cmd.Parameters.AddWithValue("InvoiceNo", oSalesLeadRow.InvoiceNo);
                        cmd.Parameters.AddWithValue("Reason", oSalesLeadRow.Reason);
                        cmd.Parameters.AddWithValue("Status", oSalesLeadRow.Status);
                        cmd.Parameters.AddWithValue("SalesPersonID", oSalesLeadRow.SalesPersonID);
                        cmd.Parameters.AddWithValue("Terminal", oSalesLeadRow.Terminal);
                        cmd.Parameters.AddWithValue("ConversionPossibility", oSalesLeadRow.ConversionPossibility);
                        cmd.Parameters.AddWithValue("Qty", oSalesLeadRow.Qty);


                        cmd.Parameters.AddWithValue("LeadNo", oSalesLeadRow.LeadNo);
                        cmd.Parameters.AddWithValue("WarehouseID", oSalesLeadRow.WarehouseID);
                        cmd.ExecuteNonQuery();
                        cmd.Dispose();


                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }

                }
            }
        }

        public void InsertSalesLeadManagementWEB(DSSalesLead oDSSalesLead, int nWHID)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";
            int nCount = 0;
            int nMaxLeadID = 0;

            foreach (DSSalesLead.SalesLeadRow oSalesLeadRow in oDSSalesLead.SalesLead)
            {

                if (CheckSalesLeadNo(oSalesLeadRow.LeadNo, nWHID))
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "SELECT MAX([LeadID]) FROM t_SalesLeadManagement";
                    cmd.CommandText = sSql;
                    object maxID = cmd.ExecuteScalar();
                    if (maxID == DBNull.Value)
                    {
                        nMaxLeadID = 1;
                    }
                    else
                    {
                        nMaxLeadID = Convert.ToInt32(maxID) + 1;
                    }

                    sSql = "INSERT INTO t_SalesLeadManagement (LeadID, WarehouseID, LeadNo, LeadDate, ExpExecuteDate, CustomerType, CompanyName, Name, Address, ContactNo, Email, Profession, AgeLevel, IncomLevel, MAGID, BrandID, ModelName, NextFollowUpDate, LeadAmount, Status, Remarks, Reason, InvoiceNo, CreateDate, CreateUserID, UpdateDate, UpdateUserID, SalesPersonID, Terminal, ConversionPossibility, Qty,IsExistingConsumer,RefLeadNo,LeadSource,ActivationID,ConsumerID,ProductID,ThanaID) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                    try
                    {
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("LeadID", nMaxLeadID);
                        cmd.Parameters.AddWithValue("WarehouseID", nWHID);
                        cmd.Parameters.AddWithValue("LeadNo", oSalesLeadRow.LeadNo);
                        cmd.Parameters.AddWithValue("LeadDate", oSalesLeadRow.LeadDate);
                        cmd.Parameters.AddWithValue("ExpExecuteDate", oSalesLeadRow.ExpExecuteDate);
                        cmd.Parameters.AddWithValue("CustomerType", oSalesLeadRow.CustomerType);
                        cmd.Parameters.AddWithValue("CompanyName", oSalesLeadRow.CompanyName);
                        cmd.Parameters.AddWithValue("Name", oSalesLeadRow.Name);
                        cmd.Parameters.AddWithValue("Address", oSalesLeadRow.Address);
                        cmd.Parameters.AddWithValue("ContactNo", oSalesLeadRow.ContactNo);
                        cmd.Parameters.AddWithValue("Email", oSalesLeadRow.Email);
                        cmd.Parameters.AddWithValue("Profession", oSalesLeadRow.Profession);
                        cmd.Parameters.AddWithValue("AgeLevel", oSalesLeadRow.AgeLevel);
                        cmd.Parameters.AddWithValue("IncomLevel", oSalesLeadRow.IncomLevel);
                        cmd.Parameters.AddWithValue("MAGID", oSalesLeadRow.MAGID);
                        cmd.Parameters.AddWithValue("BrandID", oSalesLeadRow.BrandID);
                        cmd.Parameters.AddWithValue("ModelName", oSalesLeadRow.ModelName);
                        cmd.Parameters.AddWithValue("NextFollowUpDate", oSalesLeadRow.NextFollowUpDate);
                        cmd.Parameters.AddWithValue("LeadAmount", oSalesLeadRow.LeadAmount);
                        cmd.Parameters.AddWithValue("Status", oSalesLeadRow.Status);
                        cmd.Parameters.AddWithValue("Remarks", oSalesLeadRow.Remarks);
                        cmd.Parameters.AddWithValue("Reason", oSalesLeadRow.Reason);
                        cmd.Parameters.AddWithValue("InvoiceNo", oSalesLeadRow.InvoiceNo);
                        cmd.Parameters.AddWithValue("CreateDate", oSalesLeadRow.CreateDate);
                        cmd.Parameters.AddWithValue("CreateUserID", oSalesLeadRow.CreateUserID);
                        cmd.Parameters.AddWithValue("UpdateDate", null);
                        cmd.Parameters.AddWithValue("UpdateUserID", null);
                        cmd.Parameters.AddWithValue("SalesPersonID", oSalesLeadRow.SalesPersonID);
                        cmd.Parameters.AddWithValue("Terminal", oSalesLeadRow.Terminal);
                        cmd.Parameters.AddWithValue("ConversionPossibility", oSalesLeadRow.ConversionPossibility);
                        cmd.Parameters.AddWithValue("Qty", oSalesLeadRow.Qty);

                        cmd.Parameters.AddWithValue("IsExistingConsumer", oSalesLeadRow.IsExistingConsumer);
                        cmd.Parameters.AddWithValue("RefLeadNo", oSalesLeadRow.RefLeadNo);
                        cmd.Parameters.AddWithValue("LeadSource", oSalesLeadRow.LeadSource);
                        cmd.Parameters.AddWithValue("ActivationID", oSalesLeadRow.ActivationID);
                        cmd.Parameters.AddWithValue("ConsumerID", oSalesLeadRow.ConsumerID);
                        cmd.Parameters.AddWithValue("ProductID", oSalesLeadRow.ProductID);
                        cmd.Parameters.AddWithValue("ThanaID", oSalesLeadRow.ThanaID);




                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
                else
                {


                    try
                    {
                        cmd.Dispose();
                        cmd = DBController.Instance.GetCommand();

                        sSql = "UPDATE t_SalesLeadManagement SET LeadDate = ?, ExpExecuteDate = ?, CustomerType = ?, " +
                        "CompanyName = ?, Name = ?, Address = ?, ContactNo = ?, Email = ?, Profession = ?, " +
                        "AgeLevel = ?, IncomLevel = ?, MAGID = ?, BrandID = ?, ModelName = ?, NextFollowUpDate = ?, " +
                        "LeadAmount = ?, Remarks = ?,UpdateDate = ?, UpdateUserID = ?, InvoiceNo = ?, Reason = ?, " +
                        "Status = ?, SalesPersonID = ?, Terminal = ?, ConversionPossibility = ?, Qty = ?,  " +
                        "IsExistingConsumer = ?,RefLeadNo  = ?,LeadSource  = ?,ActivationID  = ?,ConsumerID  = ?,ProductID  = ?,ThanaID  = ?  WHERE LeadNo = ? and WarehouseID = ?";

                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;
                        cmd.Parameters.AddWithValue("LeadDate", oSalesLeadRow.LeadDate);
                        cmd.Parameters.AddWithValue("ExpExecuteDate", oSalesLeadRow.ExpExecuteDate);
                        cmd.Parameters.AddWithValue("CustomerType", oSalesLeadRow.CustomerType);
                        cmd.Parameters.AddWithValue("CompanyName", oSalesLeadRow.CompanyName);
                        cmd.Parameters.AddWithValue("Name", oSalesLeadRow.Name);
                        cmd.Parameters.AddWithValue("Address", oSalesLeadRow.Address);
                        cmd.Parameters.AddWithValue("ContactNo", oSalesLeadRow.ContactNo);

                        cmd.Parameters.AddWithValue("Email", oSalesLeadRow.Email);
                        cmd.Parameters.AddWithValue("Profession", oSalesLeadRow.Profession);
                        cmd.Parameters.AddWithValue("AgeLevel", oSalesLeadRow.AgeLevel);
                        cmd.Parameters.AddWithValue("IncomLevel", oSalesLeadRow.IncomLevel);
                        cmd.Parameters.AddWithValue("MAGID", oSalesLeadRow.MAGID);
                        cmd.Parameters.AddWithValue("BrandID", oSalesLeadRow.BrandID);
                        cmd.Parameters.AddWithValue("ModelName", oSalesLeadRow.ModelName);
                        cmd.Parameters.AddWithValue("NextFollowUpDate", oSalesLeadRow.NextFollowUpDate);

                        cmd.Parameters.AddWithValue("LeadAmount", oSalesLeadRow.LeadAmount);
                        cmd.Parameters.AddWithValue("Remarks", oSalesLeadRow.Remarks);
                        cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now.Date);
                        cmd.Parameters.AddWithValue("UpdateUserID", Utility.UserId);
                        cmd.Parameters.AddWithValue("InvoiceNo", oSalesLeadRow.InvoiceNo);
                        cmd.Parameters.AddWithValue("Reason", oSalesLeadRow.Reason);
                        cmd.Parameters.AddWithValue("Status", oSalesLeadRow.Status);
                        cmd.Parameters.AddWithValue("SalesPersonID", oSalesLeadRow.SalesPersonID);
                        cmd.Parameters.AddWithValue("Terminal", oSalesLeadRow.Terminal);
                        cmd.Parameters.AddWithValue("ConversionPossibility", oSalesLeadRow.ConversionPossibility);
                        cmd.Parameters.AddWithValue("Qty", oSalesLeadRow.Qty);

                        cmd.Parameters.AddWithValue("IsExistingConsumer", oSalesLeadRow.IsExistingConsumer);
                        cmd.Parameters.AddWithValue("RefLeadNo", oSalesLeadRow.RefLeadNo);
                        cmd.Parameters.AddWithValue("LeadSource", oSalesLeadRow.LeadSource);
                        cmd.Parameters.AddWithValue("ActivationID", oSalesLeadRow.ActivationID);
                        cmd.Parameters.AddWithValue("ConsumerID", oSalesLeadRow.ConsumerID);
                        cmd.Parameters.AddWithValue("ProductID", oSalesLeadRow.ProductID);
                        cmd.Parameters.AddWithValue("ThanaID", oSalesLeadRow.ThanaID);


                        cmd.Parameters.AddWithValue("LeadNo", oSalesLeadRow.LeadNo);
                        cmd.Parameters.AddWithValue("WarehouseID", oSalesLeadRow.WarehouseID);
                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
            }
        }

        public void InsertSalesLeadManagementHistoryWEB(DSSalesLead oDSSalesLead, int nWHID)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";
            int nCount = 0;
            int nHistoryID = 0;

            foreach (DSSalesLead.SalesLeadRow oSalesLeadRow in oDSSalesLead.SalesLead)
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                sSql = "SELECT MAX([HistoryID]) FROM t_SalesLeadManagementHistory where WarehouseID=" + nWHID + "";
                cmd.CommandText = sSql;
                object maxID = cmd.ExecuteScalar();
                if (maxID == DBNull.Value)
                {
                    nHistoryID = 1;
                }
                else
                {
                    nHistoryID = Convert.ToInt32(maxID) + 1;
                }

                sSql = "INSERT INTO t_SalesLeadManagementHistory (HistoryID, WarehouseID, LeadNo, ExpExecuteDate, Remarks, Status, CreateDate) VALUES(?,?,?,?,?,?,?)";
                try
                {
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("HistoryID", nHistoryID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWHID);
                    cmd.Parameters.AddWithValue("LeadNo", oSalesLeadRow.LeadNo);
                    cmd.Parameters.AddWithValue("ExpExecuteDate", oSalesLeadRow.ExpExecuteDate);

                    cmd.Parameters.AddWithValue("Remarks", oSalesLeadRow.Remarks);
                    cmd.Parameters.AddWithValue("Status", oSalesLeadRow.Status);
                    cmd.Parameters.AddWithValue("CreateDate", oSalesLeadRow.CreateDate);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();

                }
                catch (Exception ex)
                {
                    throw (ex);
                }


            }
        }

        public void InsertSalesLeadHistory1(DSSalesLead oDSSalesLead, int nWHID)
        {
            DBController.Instance.OpenNewConnection();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";
            int nHistoryID = 0;

            foreach (DSSalesLead.SalesLeadRow oSalesLeadRow in oDSSalesLead.SalesLead)
            {

                sSql = "SELECT MAX([HistoryID]) FROM t_SalesLeadManagementHistory where WarehouseID=" + nWHID + "";
                cmd.CommandText = sSql;
                object maxID = cmd.ExecuteScalar();
                if (maxID == DBNull.Value)
                {
                    nHistoryID = 1;
                }
                else
                {
                    nHistoryID = Convert.ToInt32(maxID) + 1;
                }

                sSql = "INSERT INTO t_SalesLeadManagementHistory (HistoryID, WarehouseID, LeadNo, ExpExecuteDate, Remarks, Status, CreateDate) VALUES(?,?,?,?,?,?,?)";
                try
                {
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("HistoryID", nHistoryID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWHID);
                    cmd.Parameters.AddWithValue("LeadNo", oSalesLeadRow.LeadNo);
                    cmd.Parameters.AddWithValue("ExpExecuteDate", oSalesLeadRow.ExpExecuteDate);

                    cmd.Parameters.AddWithValue("Remarks", oSalesLeadRow.Remarks);
                    cmd.Parameters.AddWithValue("Status", oSalesLeadRow.Status);
                    cmd.Parameters.AddWithValue("CreateDate", oSalesLeadRow.CreateDate);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();

                }
                catch (Exception ex)
                {
                    throw (ex);
                }

            }
        }


        public DSSalesLead InsertSalesLeadHistory(DSSalesLead oDSSalesLead, int nWHID)
        {
            if (!DBController.Instance.CheckConnection())
            {
                DBController.Instance.OpenNewConnection();
            }

            OleDbCommand cmd = DBController.Instance.GetCommand();
            SalesLead oSalesLead;
            /// Insert SalesLead

            foreach (DSSalesLead.SalesLeadRow oSalesLeadRow in oDSSalesLead.SalesLead)
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                oSalesLead = new SalesLead();
                oSalesLead.HistoryID = oSalesLeadRow.HistoryID;
                oSalesLead.LeadNo = oSalesLeadRow.LeadNo;
                oSalesLead.WarehouseID = nWHID;
                oSalesLead.ExpExecuteDate = oSalesLeadRow.ExpExecuteDate;

                oSalesLead.Remarks = oSalesLeadRow.Remarks;
                oSalesLead.Status = oSalesLeadRow.Status;
                oSalesLead.CreateDate = oSalesLeadRow.CreateDate;

                //if (CheckSalesLeadHistory(oSalesLeadRow.HistoryID, nWHID, oSalesLeadRow.LeadNo))
                //{

                try
                {
                    oSalesLead.AddHistoryWEB();
                    oSalesLeadRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                    AppLogger.LogInfo("Successfully Add Sales Lead History (HistoryID=" + oSalesLeadRow.HistoryID + " and WareHouseID=" + oSalesLeadRow.WarehouseID + ")");
                }
                catch (Exception ex)
                {

                    oSalesLeadRow.IsDownload = (int)Dictionary.YesOrNoStatus.NO;
                    AppLogger.LogError("Error Add Sales Lead History(HistoryID=" + oSalesLeadRow.HistoryID + " and WareHouseID=" + oSalesLeadRow.WarehouseID + ") /" + ex.Message);
                    DBController.Instance.RollbackTransaction();
                    throw (ex);
                }

                //}
                //else
                //{
                //    oSalesLead.UpdateHistory();
                //    oSalesLeadRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                //    AppLogger.LogInfo("Successfully Add Sales Lead History (HistoryID=" + oSalesLeadRow.HistoryID + " and WareHouseID=" + oSalesLeadRow.WarehouseID + ")");
                //}
            }
            DBController.Instance.CommitTransaction();
            return oDSSalesLead;

        }

        public DSPotentialCustomer InsertPotentialCustomer(DSPotentialCustomer oDSPotentialCustomer, int nWHID)
        {
            if (!DBController.Instance.CheckConnection())
            {
                DBController.Instance.OpenNewConnection();
            }
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            PotentialCustomer oPotentialCustomer;
            /// Insert Unsold Defective Product

            foreach (DSPotentialCustomer.DSPotentialCustomerRow oPotentialCustomerRow in oDSPotentialCustomer._DSPotentialCustomer)
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                oPotentialCustomer = new PotentialCustomer();

                oPotentialCustomer.ID = oPotentialCustomerRow.ID;
                oPotentialCustomer.Outlet = nWHID;

                if (oPotentialCustomerRow.IsCompanyNameNull())
                    oPotentialCustomer.CompanyName = "";
                else oPotentialCustomer.CompanyName = oPotentialCustomerRow.CompanyName;


                oPotentialCustomer.Name = oPotentialCustomerRow.Name;
                oPotentialCustomer.VisitDate = oPotentialCustomerRow.VisitDate;
                if (oPotentialCustomerRow.IsDesignationNull())
                    oPotentialCustomer.Designation = "";
                else oPotentialCustomer.Designation = oPotentialCustomerRow.Designation;
                oPotentialCustomer.MobileNo = oPotentialCustomerRow.MobileNo;
                if (oPotentialCustomerRow.IsTelephoneNoNull())
                    oPotentialCustomer.TelephoneNo = "";
                else oPotentialCustomer.TelephoneNo = oPotentialCustomerRow.TelephoneNo;
                oPotentialCustomer.Address = oPotentialCustomerRow.Address;
                oPotentialCustomer.Email = oPotentialCustomerRow.Email;

                if (oPotentialCustomerRow.IsRemarksNull())
                    oPotentialCustomer.Remarks = "";
                else oPotentialCustomer.Remarks = oPotentialCustomerRow.Remarks;
                oPotentialCustomer.CreateDate = oPotentialCustomerRow.CreateDate;
                oPotentialCustomer.CreateUserID = oPotentialCustomerRow.CreateUserID;

                if (!oPotentialCustomerRow.IsUpdateDateNull())
                    oPotentialCustomer.UpdateDate = oPotentialCustomerRow.UpdateDate;

                if (oPotentialCustomerRow.IsUpdateUserIDNull())
                    oPotentialCustomer.UpdateUserID = -1;
                else oPotentialCustomer.UpdateUserID = oPotentialCustomerRow.UpdateUserID;

                oPotentialCustomer.Status = oPotentialCustomerRow.Status;

                if (oPotentialCustomerRow.IsLeadNoNull())
                    oPotentialCustomer.LeadNo = "";
                else oPotentialCustomer.LeadNo = oPotentialCustomerRow.LeadNo;

                if (!oPotentialCustomerRow.IsLeadDateNull())
                    oPotentialCustomer.LeadDate = oPotentialCustomerRow.LeadDate;


                if (CheckPotentialCustomerID(Convert.ToInt32(oPotentialCustomerRow.ID), nWHID))
                {

                    try
                    {
                        oPotentialCustomer.InsertForWeb();
                        oPotentialCustomerRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                        AppLogger.LogInfo("Successfully Add Potential Customer (ID=" + oPotentialCustomerRow.ID + " and WareHouseID=" + oPotentialCustomerRow.Outlet + ")");
                    }
                    catch (Exception ex)
                    {
                        oPotentialCustomerRow.IsDownload = (int)Dictionary.YesOrNoStatus.NO;
                        AppLogger.LogError("Error Add Potential Customer (ID=" + oPotentialCustomerRow.ID + " and WareHouseID=" + oPotentialCustomerRow.Outlet + ") /" + ex.Message);
                        DBController.Instance.RollbackTransaction();
                        throw (ex);
                    }

                }
                else
                {
                    oPotentialCustomer.Update();
                    oPotentialCustomerRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                    AppLogger.LogInfo("Successfully Add Potential Customer (ID=" + oPotentialCustomerRow.ID + " and WareHouseID=" + oPotentialCustomerRow.Outlet + ")");
                }
            }
            DBController.Instance.CommitTransaction();
            return oDSPotentialCustomer;

        }

        public DSOutletDisplayPosition UpdateOutletDisplayPosition(DSOutletDisplayPosition oDSOutletDisplayPosition, int nWHID)
        {
            if (!DBController.Instance.CheckConnection())
            {
                DBController.Instance.OpenNewConnection();
            }

            OleDbCommand cmd = DBController.Instance.GetCommand();
            OutletDisplayPosition oOutletDisplayPosition;
            /// Insert Outlet Display Position

            foreach (DSOutletDisplayPosition.OutletDisplayPositionRow oOutletDisplayPositionRow in oDSOutletDisplayPosition.OutletDisplayPosition)
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                oOutletDisplayPosition = new OutletDisplayPosition();

                oOutletDisplayPosition.DisplayPositionID = oOutletDisplayPositionRow.DisplayPositionID;
                oOutletDisplayPosition.WHID = nWHID;

                if (oOutletDisplayPositionRow.IsAssignProductIDNull())
                    oOutletDisplayPosition.AssignProductID = -1;
                else oOutletDisplayPosition.AssignProductID = oOutletDisplayPositionRow.AssignProductID;

                if (oOutletDisplayPositionRow.IsProductSerialNoNull())
                    oOutletDisplayPosition.ProductSerialNo = "";
                else oOutletDisplayPosition.ProductSerialNo = oOutletDisplayPositionRow.ProductSerialNo;
                oOutletDisplayPosition.IsActive = oOutletDisplayPositionRow.IsActive;
                oOutletDisplayPosition.Status = oOutletDisplayPositionRow.Status;


                if (!oOutletDisplayPositionRow.IsAssignDateNull())
                {
                    oOutletDisplayPosition.AssignDate = oOutletDisplayPositionRow.AssignDate;
                    oOutletDisplayPosition.AssignUserID = oOutletDisplayPositionRow.AssignUserID;
                }
                if (!oOutletDisplayPositionRow.IsBlankRemarksNull())
                {
                    oOutletDisplayPosition.BlankRemarks = oOutletDisplayPositionRow.BlankRemarks;
                }
                else
                {
                    oOutletDisplayPosition.BlankRemarks = null;
                }
                //oOutletDisplayPosition.OpenForAll = oOutletDisplayPositionRow.OpenForAll;

                if (CheckOutletDisplayPosition(Convert.ToInt32(oOutletDisplayPositionRow.DisplayPositionID), nWHID))
                {

                    try
                    {
                        //oPotentialCustomer.Insert();
                        oOutletDisplayPositionRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                        AppLogger.LogInfo("There is No Data(DisplayPositionID=" + oOutletDisplayPositionRow.DisplayPositionID + " and WareHouseID=" + oOutletDisplayPositionRow.WHID + ")");
                    }
                    catch (Exception ex)
                    {
                        oOutletDisplayPositionRow.IsDownload = (int)Dictionary.YesOrNoStatus.NO;
                        AppLogger.LogError("Error Add Potential Customer (ID=" + oOutletDisplayPositionRow.DisplayPositionID + " and WareHouseID=" + oOutletDisplayPositionRow.WHID + ") /" + ex.Message);
                        DBController.Instance.RollbackTransaction();
                        throw (ex);
                    }

                }
                else
                {
                    oOutletDisplayPosition.EditForPOSNew();
                    //oOutletDisplayPosition.AddHistory();
                    oOutletDisplayPositionRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                    AppLogger.LogInfo("Successfully Update Display Position (DisplayPositionID=" + oOutletDisplayPositionRow.DisplayPositionID + " and WareHouseID=" + oOutletDisplayPositionRow.WHID + ")");
                }
            }
            DBController.Instance.CommitTransaction();
            return oDSOutletDisplayPosition;

        }

        public DSOutletDisplayPosition InsertOutletDisplayPositionHistory(DSOutletDisplayPosition oDSOutletDisplayPositionHistory)
        {
            if (!DBController.Instance.CheckConnection())
            {
                DBController.Instance.OpenNewConnection();
            }

            OleDbCommand cmd = DBController.Instance.GetCommand();
            OutletDisplayPosition oOutletDisplayPositionHistory;
            /// Insert Outlet Display Position

            foreach (DSOutletDisplayPosition.DisplayPositionHistoryRow oDisplayPositionHistoryRow in oDSOutletDisplayPositionHistory.DisplayPositionHistory)
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                oOutletDisplayPositionHistory = new OutletDisplayPosition();
                oOutletDisplayPositionHistory.HistoryID = oDisplayPositionHistoryRow.HistoryID;
                oOutletDisplayPositionHistory.DisplayPositionID = oDisplayPositionHistoryRow.DisplayPositionID;
                oOutletDisplayPositionHistory.Type = oDisplayPositionHistoryRow.Type;
                if (oDisplayPositionHistoryRow.IsProductSerialNoNull())
                    oOutletDisplayPositionHistory.ProductSerialNo = "";
                else oOutletDisplayPositionHistory.ProductSerialNo = oDisplayPositionHistoryRow.ProductSerialNo;
                oOutletDisplayPositionHistory.CreateDate = oDisplayPositionHistoryRow.CreateDate;
                oOutletDisplayPositionHistory.CreateUserID = oDisplayPositionHistoryRow.CreateUserID;
                if (!oDisplayPositionHistoryRow.IsBlankRemarksNull())
                {
                    oOutletDisplayPositionHistory.BlankRemarks = oDisplayPositionHistoryRow.BlankRemarks;
                }
                else
                {
                    oOutletDisplayPositionHistory.BlankRemarks = null;
                }
                if (CheckOutletDisplayPositionHistory(Convert.ToInt32(oDisplayPositionHistoryRow.DisplayPositionID), Convert.ToInt32(oDisplayPositionHistoryRow.HistoryID)))
                {

                    try
                    {

                        oOutletDisplayPositionHistory.AddHistoryWEB();
                        oDisplayPositionHistoryRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                        AppLogger.LogInfo("Successfully Add Display Position History (HistoryID=" + oDisplayPositionHistoryRow.HistoryID + " and DisplayPositionID=" + oDisplayPositionHistoryRow.DisplayPositionID + ")");
                    }
                    catch (Exception ex)
                    {
                        oDisplayPositionHistoryRow.IsDownload = (int)Dictionary.YesOrNoStatus.NO;
                        AppLogger.LogError("Error Add  Display Position History (HistoryID=" + oDisplayPositionHistoryRow.HistoryID + " and DisplayPositionID=" + oDisplayPositionHistoryRow.DisplayPositionID + ") /" + ex.Message);
                        DBController.Instance.RollbackTransaction();
                        throw (ex);
                    }

                }
                else
                {
                    oOutletDisplayPositionHistory.EditHistory();
                    oDisplayPositionHistoryRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                    AppLogger.LogInfo("Successfully Update Display Position History (DisplayPositionID=" + oDisplayPositionHistoryRow.DisplayPositionID + " and HistoryID=" + oDisplayPositionHistoryRow.HistoryID + ")");
                }
            }

            return oDSOutletDisplayPositionHistory;

        }

        public DSCustomerTemp InsertCustomerTemp(DSCustomerTemp oDSCustomerTemp, int nWHID)
        {
            if (!DBController.Instance.CheckConnection())
            {
                DBController.Instance.OpenNewConnection();
            }

            OleDbCommand cmd = DBController.Instance.GetCommand();
            Customer oCustomerTemp;
            /// Insert Customer Temp Data

            foreach (DSCustomerTemp.CustomerTempRow oCustomerTempRow in oDSCustomerTemp.CustomerTemp)
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                oCustomerTemp = new Customer();

                oCustomerTemp.CustomerID = oCustomerTempRow.CustomerID;
                oCustomerTemp.WarehouseID = nWHID;
                oCustomerTemp.ParentCustomerID = oCustomerTempRow.ParentCustomerID;
                oCustomerTemp.CustomerShortName = oCustomerTempRow.CustomerShortName;
                if (oCustomerTempRow.IsCustomerCodeNull())
                    oCustomerTemp.CustomerCode = "";
                else oCustomerTemp.CustomerCode = oCustomerTempRow.CustomerCode;

                oCustomerTemp.CustomerName = oCustomerTempRow.CustomerName;
                oCustomerTemp.CustomerAddress = oCustomerTempRow.CustomerAddress;

                if (oCustomerTempRow.IsCustomerTelephoneNull())
                    oCustomerTemp.CustomerTelephone = "";
                else oCustomerTemp.CustomerTelephone = oCustomerTempRow.CustomerTelephone;
                if (oCustomerTempRow.IsCustomerFaxNull())
                    oCustomerTemp.CustomerFax = "";
                else oCustomerTemp.CustomerFax = oCustomerTempRow.CustomerFax;
                oCustomerTemp.CellPhoneNo = oCustomerTempRow.CellPhoneNumber;
                oCustomerTemp.ContactPerson = oCustomerTempRow.ContactPerson;
                oCustomerTemp.ContactDesignation = oCustomerTempRow.ContactDesignation;
                oCustomerTemp.IsActive = oCustomerTempRow.IsActive;
                oCustomerTemp.CustTypeID = oCustomerTempRow.CustTypeID;
                oCustomerTemp.MarketGroupID = oCustomerTempRow.MarketGroupID;
                oCustomerTemp.GeoLocationID = oCustomerTempRow.GeoLocationID;
                oCustomerTemp.EmailAddress = oCustomerTempRow.EmailAddress;
                oCustomerTemp.EnrollmentDate = oCustomerTempRow.EnrollmentDate;
                oCustomerTemp.Terminal = oCustomerTempRow.Terminal;
                oCustomerTemp.EntryDate = oCustomerTempRow.CreateDate;
                oCustomerTemp.EntryUserID = oCustomerTempRow.CreateUserID;
                if (oCustomerTempRow.IsUpdateDateNull())
                    oCustomerTemp.UpdateDate = DateTime.Now.Date;
                else oCustomerTemp.UpdateDate = oCustomerTempRow.UpdateDate;
                if (oCustomerTempRow.IsUpdateUserIDNull())
                    oCustomerTemp.UpdateUserID = -1;
                else oCustomerTemp.UpdateUserID = oCustomerTempRow.UpdateUserID;
                //if (oCustomerTempRow.IsApprovedDateNull())
                //    oCustomerTemp.ApprovedDate = DateTime.Now.Date;
                //else oCustomerTemp.ApprovedDate = oCustomerTempRow.ApprovedDate;
                //if (oCustomerTempRow.IsApprovedUserIDNull())
                //    oCustomerTemp.ApprovedUserID = -1;
                //else oCustomerTemp.ApprovedUserID = oCustomerTempRow.ApprovedUserID;
                oCustomerTemp.Status = oCustomerTempRow.Status;
                oCustomerTemp.TaxNumber = oCustomerTempRow.TaxNumber;


                if (CheckCustomerTempID(Convert.ToInt32(oCustomerTempRow.CustomerID), nWHID))
                {

                    try
                    {
                        oCustomerTemp.AddTempCustomerForWeb();
                        oCustomerTempRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                        AppLogger.LogInfo("Successfully Add Temp Customer (CustomerID=" + oCustomerTempRow.CustomerID + " and WareHouseID=" + oCustomerTempRow.WarehouseID + ")");
                    }
                    catch (Exception ex)
                    {
                        oCustomerTempRow.IsDownload = (int)Dictionary.YesOrNoStatus.NO;
                        AppLogger.LogError("Error Add Temp Customer (CustomerID=" + oCustomerTempRow.CustomerID + " and WareHouseID=" + oCustomerTempRow.WarehouseID + ") /" + ex.Message);
                        DBController.Instance.RollbackTransaction();
                        throw (ex);
                    }

                }
                else
                {
                    oCustomerTemp.EditTempCustomer();
                    oCustomerTempRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                    AppLogger.LogInfo("Successfully Add Temp Customer (CustomerID=" + oCustomerTempRow.CustomerID + " and WareHouseID=" + oCustomerTempRow.WarehouseID + ")");
                }
            }
            DBController.Instance.CommitTransaction();
            return oDSCustomerTemp;

        }
        //public DSInvoiceReverse InsertDSInvoiceReverseData(DSInvoiceReverse oDSInvoiceReverse, int nWHID)
        //{
        //    if (!DBController.Instance.CheckConnection())
        //    {
        //        DBController.Instance.OpenNewConnection();
        //    }
        //    OleDbCommand cmd = DBController.Instance.GetCommand();
        //    InvoiceReverse oInvoiceReverse;
        //    /// Insert Customer Temp Data

        //    foreach (DSInvoiceReverse.InvoiceReverseRow oInvoiceReverseRow in oDSInvoiceReverse.InvoiceReverse)
        //    {
        //        cmd.Dispose();
        //        cmd = DBController.Instance.GetCommand();

        //        oInvoiceReverse = new InvoiceReverse();

        //        oInvoiceReverse.ReverseID = oInvoiceReverseRow.ReverseID;
        //        oInvoiceReverse.WarehouseID = nWHID;
        //        oInvoiceReverse.InvoiceNo = oInvoiceReverseRow.InvoiceNo;
        //        oInvoiceReverse.Reason = oInvoiceReverseRow.Reason;
        //        oInvoiceReverse.CreateDate = oInvoiceReverseRow.CreateDate;
        //        oInvoiceReverse.CreateUserID = oInvoiceReverseRow.CreateUserID;
        //        if (oInvoiceReverseRow.IsUpdateDateNull())
        //            oInvoiceReverse.UpdateDate = DateTime.Now.Date;
        //        else oInvoiceReverse.UpdateDate = oInvoiceReverseRow.UpdateDate;
        //        if (oInvoiceReverseRow.IsUpdateUserIDNull())
        //            oInvoiceReverse.UpdateUserID = -1;
        //        else oInvoiceReverse.UpdateUserID = oInvoiceReverseRow.UpdateUserID;
        //        oInvoiceReverse.Status = oInvoiceReverseRow.Status;


        //        if (CheckInvoiceReverseID(Convert.ToInt32(oInvoiceReverseRow.ReverseID), nWHID))
        //        {

        //            try
        //            {
        //                oInvoiceReverse.AddForWeb();
        //                oInvoiceReverseRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
        //                AppLogger.LogInfo("Successfully Add Invoice Reverse Appalication (ReverseID=" + oInvoiceReverseRow.ReverseID + " and WareHouseID=" + oInvoiceReverseRow.WarehouseID + ")");
        //            }
        //            catch (Exception ex)
        //            {
        //                oInvoiceReverseRow.IsDownload = (int)Dictionary.YesOrNoStatus.NO;
        //                AppLogger.LogError("Error Add Invoice Reverse Appalication (ReverseID=" + oInvoiceReverseRow.ReverseID + " and WareHouseID=" + oInvoiceReverseRow.WarehouseID + ") /" + ex.Message);
        //                DBController.Instance.RollbackTransaction();
        //                throw (ex);
        //            }

        //        }
        //        else
        //        {
        //            oInvoiceReverse.EditForWEB();
        //            oInvoiceReverseRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
        //            AppLogger.LogInfo("Successfully Add Invoice Reverse Appalication (ReverseID=" + oInvoiceReverseRow.ReverseID + " and WareHouseID=" + oInvoiceReverseRow.WarehouseID + ")");
        //        }
        //    }
        //    DBController.Instance.CommitTransaction();
        //    DBController.Instance.CloseConnection();


        //    return oDSInvoiceReverse;

        //}
        //public DSInvoiceReverse InsertDSInvoiceReverseData(DSInvoiceReverse oDSInvoiceReverse, int nWHID)
        //{
        //    if (!DBController.Instance.CheckConnection())
        //    {
        //        DBController.Instance.OpenNewConnection();
        //    }
        //    OleDbCommand cmd = DBController.Instance.GetCommand();
        //    InvoiceReverse oInvoiceReverse;
        //    /// Insert Customer Temp Data

        //    foreach (DSInvoiceReverse.InvoiceReverseRow oInvoiceReverseRow in oDSInvoiceReverse.InvoiceReverse)
        //    {
        //        cmd.Dispose();
        //        cmd = DBController.Instance.GetCommand();

        //        oInvoiceReverse = new InvoiceReverse();

        //        oInvoiceReverse.ReverseID = oInvoiceReverseRow.ReverseID;
        //        oInvoiceReverse.WarehouseID = nWHID;
        //        oInvoiceReverse.InvoiceNo = oInvoiceReverseRow.InvoiceNo;
        //        oInvoiceReverse.Reason = oInvoiceReverseRow.Reason;
        //        oInvoiceReverse.CreateDate = oInvoiceReverseRow.CreateDate;
        //        oInvoiceReverse.CreateUserID = oInvoiceReverseRow.CreateUserID;
        //        if (oInvoiceReverseRow.IsUpdateDateNull())
        //            oInvoiceReverse.UpdateDate = DateTime.Now.Date;
        //        else oInvoiceReverse.UpdateDate = oInvoiceReverseRow.UpdateDate;
        //        if (oInvoiceReverseRow.IsUpdateUserIDNull())
        //            oInvoiceReverse.UpdateUserID = -1;
        //        else oInvoiceReverse.UpdateUserID = oInvoiceReverseRow.UpdateUserID;
        //        oInvoiceReverse.Status = oInvoiceReverseRow.Status;


        //        if (CheckInvoiceReverseID(Convert.ToInt32(oInvoiceReverseRow.ReverseID), nWHID))
        //        {

        //            try
        //            {
        //                oInvoiceReverse.AddForWeb();
        //                oInvoiceReverseRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
        //                AppLogger.LogInfo("Successfully Add Invoice Reverse Appalication (ReverseID=" + oInvoiceReverseRow.ReverseID + " and WareHouseID=" + oInvoiceReverseRow.WarehouseID + ")");
        //            }
        //            catch (Exception ex)
        //            {
        //                oInvoiceReverseRow.IsDownload = (int)Dictionary.YesOrNoStatus.NO;
        //                AppLogger.LogError("Error Add Invoice Reverse Appalication (ReverseID=" + oInvoiceReverseRow.ReverseID + " and WareHouseID=" + oInvoiceReverseRow.WarehouseID + ") /" + ex.Message);
        //                DBController.Instance.RollbackTransaction();
        //                throw (ex);
        //            }

        //        }
        //        else
        //        {
        //            oInvoiceReverse.EditForWEB();
        //            oInvoiceReverseRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
        //            AppLogger.LogInfo("Successfully Add Invoice Reverse Appalication (ReverseID=" + oInvoiceReverseRow.ReverseID + " and WareHouseID=" + oInvoiceReverseRow.WarehouseID + ")");
        //        }
        //    }
        //    DBController.Instance.CommitTransaction();
        //    DBController.Instance.CloseConnection();


        //    return oDSInvoiceReverse;

        //}
        public DSInvoiceReverse InsertDSInvoiceReverseData(DSInvoiceReverse oDSInvoiceReverse, int nWHID)
        {
            if (!DBController.Instance.CheckConnection())
            {
                DBController.Instance.OpenNewConnection();
            }

            InvoiceReverse oInvoiceReverse;
            /// Insert Customer Temp Data

            foreach (DSInvoiceReverse.InvoiceReverseRow oInvoiceReverseRow in oDSInvoiceReverse.InvoiceReverse)
            {
                oInvoiceReverse = new InvoiceReverse();
                oInvoiceReverse = GetDataForInvoiceReverse(oInvoiceReverse, oInvoiceReverseRow, oDSInvoiceReverse);

                if (CheckInvoiceReverseID(Convert.ToInt32(oInvoiceReverseRow.ReverseID), nWHID))
                {
                    try
                    {

                        oInvoiceReverse.AddForWeb();
                        oInvoiceReverseRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                        AppLogger.LogInfo("Successfully Add Invoice Reverse Appalication (ReverseID=" + oInvoiceReverseRow.ReverseID + " and WareHouseID=" + oInvoiceReverseRow.WarehouseID + ")");
                    }
                    catch (Exception ex)
                    {
                        oInvoiceReverseRow.IsDownload = (int)Dictionary.YesOrNoStatus.NO;
                        AppLogger.LogError("Error Add Invoice Reverse Appalication (ReverseID=" + oInvoiceReverseRow.ReverseID + " and WareHouseID=" + oInvoiceReverseRow.WarehouseID + ") /" + ex.Message);
                        DBController.Instance.RollbackTransaction();
                        throw (ex);
                    }

                }
                else
                {
                    try
                    {
                        oInvoiceReverse.EditForWEB();
                        AppLogger.LogInfo("Successfully Add Invoice Reverse Appalication (ReverseID=" + oInvoiceReverseRow.ReverseID + " and WareHouseID=" + oInvoiceReverseRow.WarehouseID + ")");
                        oInvoiceReverseRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                    }
                    catch (Exception ex)
                    {
                        oInvoiceReverseRow.IsDownload = (int)Dictionary.YesOrNoStatus.NO;
                        AppLogger.LogError("Error Add Invoice Reverse Appalication (ReverseID=" + oInvoiceReverseRow.ReverseID + " and WareHouseID=" + oInvoiceReverseRow.WarehouseID + ") /" + ex.Message);
                        DBController.Instance.RollbackTransaction();
                        throw (ex);
                    }

                }
            }
            DBController.Instance.CommitTransaction();
            DBController.Instance.CloseConnection();


            return oDSInvoiceReverse;

        }
        public DSExchangeOfferMR InsertExchangeOfferMRData(DSExchangeOfferMR oDSExchangeOfferMR, int nWHID)
        {
            if (!DBController.Instance.CheckConnection())
            {
                DBController.Instance.OpenNewConnection();
            }

            OleDbCommand cmd = DBController.Instance.GetCommand();
            ExchangeOfferMR oExchangeOfferMR;
            ExchangeOfferVenderTran oExchangeOfferVenderTran;
            ExchangeOfferVender _oExchangeOfferVender;
            ExchangeOfferVenderParent _oExchangeOfferVenderParent;

            /// Insert Customer Temp Data

            foreach (DSExchangeOfferMR.ExchangeOfferMRRow oExchangeOfferMRRow in oDSExchangeOfferMR.ExchangeOfferMR)
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                oExchangeOfferMR = new ExchangeOfferMR();

                oExchangeOfferMR.MoneyReceiptID = oExchangeOfferMRRow.MoneyReceiptID;
                oExchangeOfferMR.MoneyReceiptNo = oExchangeOfferMRRow.MoneyReceiptNo;
                oExchangeOfferMR.JobID = oExchangeOfferMRRow.JobID;
                oExchangeOfferMR.CreateWHID = oExchangeOfferMRRow.CreateWHID;
                if (oExchangeOfferMRRow.IsTransferWHIDNull())
                    oExchangeOfferMR.TransferWHID = -1;
                else oExchangeOfferMR.TransferWHID = oExchangeOfferMRRow.TransferWHID;
                if (oExchangeOfferMRRow.IsRedeemWHIDNull())
                    oExchangeOfferMR.RedeemWHID = -1;
                else oExchangeOfferMR.RedeemWHID = oExchangeOfferMRRow.RedeemWHID;
                oExchangeOfferMR.Amount = oExchangeOfferMRRow.Amount;
                if (oExchangeOfferMRRow.IsRemarksNull())
                    oExchangeOfferMR.Remarks = "";
                else oExchangeOfferMR.Remarks = oExchangeOfferMRRow.Remarks;
                oExchangeOfferMR.CreateUserID = oExchangeOfferMRRow.CreateUserID;
                oExchangeOfferMR.CreateDate = oExchangeOfferMRRow.CreateDate;
                if (oExchangeOfferMRRow.IsUpdateUserIDNull())
                    oExchangeOfferMR.UpdateUserID = -1;
                else oExchangeOfferMR.UpdateUserID = oExchangeOfferMRRow.UpdateUserID;
                if (oExchangeOfferMRRow.IsUpdateDateNull())
                    oExchangeOfferMR.UpdateDate = DateTime.Now.Date;
                else oExchangeOfferMR.UpdateDate = oExchangeOfferMRRow.UpdateDate;

                oExchangeOfferMR.Status = oExchangeOfferMRRow.Status;




                if (CheckExchangeOfferMRNo(oExchangeOfferMR.MoneyReceiptNo))
                {

                    try
                    {
                        oExchangeOfferMR.AddForWebUpload();
                        AppLogger.LogInfo("Successfully Add Exchange Offer MR (MRID=" + oExchangeOfferMRRow.MoneyReceiptID + ")");
                    }
                    catch (Exception ex)
                    {
                        //oInvoiceReverseRow.IsDownload = (int)Dictionary.YesOrNoStatus.NO;
                        AppLogger.LogError("Error Add Exchange Offer MR (MRID=" + oExchangeOfferMRRow.MoneyReceiptID + ") /" + ex.Message);
                        DBController.Instance.RollbackTransaction();
                        throw (ex);
                    }

                }
                else
                {
                    oExchangeOfferMR.UpdateForPOSWEB();
                    AppLogger.LogInfo("Successfully Update Exchange Offer MR (MRID=" + oExchangeOfferMRRow.MoneyReceiptID + ")");
                }
                oExchangeOfferVenderTran = new ExchangeOfferVenderTran();
                if (oExchangeOfferMRRow.VenderTranID != -1)
                {
                    oExchangeOfferVenderTran.VenderTranID = oExchangeOfferMRRow.VenderTranID;
                    oExchangeOfferVenderTran.VenderTranNo = oExchangeOfferMRRow.VenderTranNo;
                    oExchangeOfferVenderTran.VenderTranDate = oExchangeOfferMRRow.VenderTranDate;
                    oExchangeOfferVenderTran.TranSide = oExchangeOfferMRRow.TranSide;
                    oExchangeOfferVenderTran.Type = oExchangeOfferMRRow.Type;
                    oExchangeOfferVenderTran.FromVenderID = oExchangeOfferMRRow.FromVenderID;
                    oExchangeOfferVenderTran.ToVenderID = oExchangeOfferMRRow.ToVenderID;
                    oExchangeOfferVenderTran.Amount = oExchangeOfferMRRow.Amount;
                    oExchangeOfferVenderTran.Remarks = oExchangeOfferMRRow.Remarks;
                    oExchangeOfferVenderTran.CreateDate = oExchangeOfferMRRow.CreateDate;
                    oExchangeOfferVenderTran.CreateUserID = oExchangeOfferMRRow.CreateUserID;

                    if (CheckEOVenderTranForMR(oExchangeOfferVenderTran.VenderTranNo))
                    {

                        try
                        {
                            oExchangeOfferVenderTran.AddFromMR();

                            _oExchangeOfferVender = new ExchangeOfferVender();
                            _oExchangeOfferVender.VenderID = oExchangeOfferMRRow.FromVenderID;
                            _oExchangeOfferVender.Balance = oExchangeOfferMRRow.Amount;
                            _oExchangeOfferVender.UpdateChildBalanceByType((int)Dictionary.ExchangeOfferDepositType.Money_Receipt);

                            _oExchangeOfferVender = new ExchangeOfferVender();
                            _oExchangeOfferVender.VenderID = oExchangeOfferMRRow.FromVenderID;
                            _oExchangeOfferVender.GetParentVenderID();

                            _oExchangeOfferVenderParent = new ExchangeOfferVenderParent();
                            _oExchangeOfferVenderParent.ParentVenderID = _oExchangeOfferVender.ParentVenderID;
                            _oExchangeOfferVenderParent.ChildAcctBalance = oExchangeOfferMRRow.Amount;
                            _oExchangeOfferVenderParent.UpdateChildBalanceByType((int)Dictionary.ExchangeOfferDepositType.Money_Receipt);

                            AppLogger.LogInfo("Successfully Add Exchange Offer Vender Tran (VenderTranNo=" + oExchangeOfferMRRow.VenderTranNo + ")");
                        }
                        catch (Exception ex)
                        {
                            //oInvoiceReverseRow.IsDownload = (int)Dictionary.YesOrNoStatus.NO;
                            AppLogger.LogError("Error Add Exchange Offer Vender Tran (VenderTranNo=" + oExchangeOfferMRRow.VenderTranNo + ") /" + ex.Message);
                            DBController.Instance.RollbackTransaction();
                            throw (ex);
                        }

                    }

                    else
                    {
                        oExchangeOfferVenderTran.UpdateForWEB();
                        AppLogger.LogInfo("Successfully Update Exchange Offer Vender Tran (VenderTranNo=" + oExchangeOfferMRRow.VenderTranNo + ")");
                    }
                }




            }
            DBController.Instance.CommitTransaction();
            return oDSExchangeOfferMR;

        }

        public DSExchangeOfferJob UpdateExchangeOfferJobPOS(DSExchangeOfferJob oDSExchangeOfferJob, int nWHID)
        {
            if (!DBController.Instance.CheckConnection())
            {
                DBController.Instance.OpenNewConnection();
            }

            OleDbCommand cmd = DBController.Instance.GetCommand();
            ExchangeOfferJob oExchangeOfferJob;
            /// Insert Exchange Offer Job

            foreach (DSExchangeOfferJob.ExchangeOfferJobRow oExchangeOfferJobRow in oDSExchangeOfferJob.ExchangeOfferJob)
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                oExchangeOfferJob = new ExchangeOfferJob();

                oExchangeOfferJob.JobID = oExchangeOfferJobRow.JobID;

                if (oExchangeOfferJobRow.IsRefInvoiceNoNull())
                    oExchangeOfferJob.RefInvoiceNo = "";
                else oExchangeOfferJob.RefInvoiceNo = oExchangeOfferJobRow.RefInvoiceNo;
                if (oExchangeOfferJobRow.IsSalesExecuteDateNull())
                    oExchangeOfferJob.SalesExecuteDate = DateTime.Now.Date;
                else oExchangeOfferJob.SalesExecuteDate = oExchangeOfferJobRow.SalesExecuteDate;
                oExchangeOfferJob.Status = oExchangeOfferJobRow.Status;

                if (CheckExchangeOfferJob(oExchangeOfferJob.JobID))
                {

                    try
                    {
                        AppLogger.LogInfo("There is No Exchange Offer Job Data (JobID=" + oExchangeOfferJobRow.JobID + ")");
                    }
                    catch (Exception ex)
                    {

                        AppLogger.LogError("Error Update Exchange Offer Job (JobID=" + oExchangeOfferJobRow.JobID + ") /" + ex.Message);
                        DBController.Instance.RollbackTransaction();
                        throw (ex);
                    }

                }
                else
                {
                    oExchangeOfferJob.UpdateSalesStatus();
                    AppLogger.LogInfo("Successfully Update Exchange Offer Job (JobID=" + oExchangeOfferJobRow.JobID + ")");
                }
            }
            DBController.Instance.CommitTransaction();
            return oDSExchangeOfferJob;

        }

        //Should be deleted after implementing V9
        public DSRetailConsumer InsertConsumerForSend(DSRetailConsumer oDSRetailConsumer)
        {
            DBController.Instance.BeginNewTransaction();
            string sSql = "";
            int nCount = 0;

            /// Insert retail consumer from outlet to HO

            foreach (DSRetailConsumer.RetailConsumerRow oRetailConsumerRow in oDSRetailConsumer.RetailConsumer)
            {
                OleDbCommand cmd = DBController.Instance.GetCommand();

                try
                {
                    RetailConsumer oRetaillConsumer = new RetailConsumer();
                    oRetaillConsumer.ConsumerID = oRetailConsumerRow.ConsumerID;
                    oRetaillConsumer.ConsumerCode = oRetailConsumerRow.ConsumerCode;
                    oRetaillConsumer.ConsumerName = oRetailConsumerRow.ConsumerName;
                    oRetaillConsumer.ConsumerType = oRetailConsumerRow.ConsumerType;
                    oRetaillConsumer.CustomerID = oRetailConsumerRow.CustomerID;
                    oRetaillConsumer.ParentCustomerID = oRetailConsumerRow.ParentCustomerID;
                    oRetaillConsumer.Address = oRetailConsumerRow.Address;
                    oRetaillConsumer.CellNo = oRetailConsumerRow.CellNo;

                    if (oRetailConsumerRow.IsPhoneNoNull())
                        oRetaillConsumer.PhoneNo = "";
                    else oRetaillConsumer.PhoneNo = oRetailConsumerRow.PhoneNo;

                    if (oRetailConsumerRow.IsEmailNull())
                        oRetaillConsumer.Email = "";
                    else oRetaillConsumer.Email = oRetailConsumerRow.Email;
                    oRetaillConsumer.EmployeeCode = oRetailConsumerRow.EmployeeCode;
                    if (oRetailConsumerRow.IsNationalIDNull())
                        oRetaillConsumer.NationalID = "";
                    else oRetaillConsumer.NationalID = oRetailConsumerRow.NationalID;

                    if (oRetailConsumerRow.IsDateofBirthNull())
                        oRetaillConsumer.DateofBirth = null;
                    else oRetaillConsumer.DateofBirth = oRetailConsumerRow.DateofBirth;

                    if (oRetailConsumerRow.IsVatRegNoNull())
                        oRetaillConsumer.VatRegNo = "";
                    else oRetaillConsumer.VatRegNo = oRetailConsumerRow.VatRegNo;

                    if (oRetailConsumerRow.IsShortNameNull())
                        oRetaillConsumer.ShortName = "";
                    else oRetaillConsumer.ShortName = oRetailConsumerRow.ShortName;

                    if (oRetailConsumerRow.IsFatherNameNull())
                        oRetaillConsumer.FatherName = "";
                    else oRetaillConsumer.FatherName = oRetailConsumerRow.FatherName;

                    if (oRetailConsumerRow.IsMotherNameNull())
                        oRetaillConsumer.MotherName = "";
                    else oRetaillConsumer.MotherName = oRetailConsumerRow.MotherName;

                    if (oRetailConsumerRow.IsSpouseNameNull())
                        oRetaillConsumer.SpouseName = "";
                    else oRetaillConsumer.SpouseName = oRetailConsumerRow.SpouseName;

                    if (oRetailConsumerRow.IsPermanentAddressNull())
                        oRetaillConsumer.PermanentAddress = "";
                    else oRetaillConsumer.PermanentAddress = oRetailConsumerRow.PermanentAddress;

                    if (oRetailConsumerRow.IsNationalityNull())
                        oRetaillConsumer.Nationality = "";
                    else oRetaillConsumer.Nationality = oRetailConsumerRow.Nationality;

                    if (oRetailConsumerRow.IsPassportNoNull())
                        oRetaillConsumer.PassportNo = "";
                    else oRetaillConsumer.PassportNo = oRetailConsumerRow.PassportNo;

                    if (oRetailConsumerRow.IsIsCLPNull())
                        oRetaillConsumer.IsCLP = -1;
                    else oRetaillConsumer.IsCLP = oRetailConsumerRow.IsCLP;

                    if (oRetailConsumerRow.IsCurrentCLPNull())
                        oRetaillConsumer.CurrentCLP = -1;
                    else oRetaillConsumer.CurrentCLP = oRetailConsumerRow.CurrentCLP;

                    if (oRetailConsumerRow.IsIsRegisterNull())
                        oRetaillConsumer.IsRegister = -1;
                    else oRetaillConsumer.IsRegister = oRetailConsumerRow.IsRegister;

                    if (oRetailConsumerRow.IsIsAuthorizedNull())
                        oRetaillConsumer.IsAuthorized = -1;
                    else oRetaillConsumer.IsAuthorized = oRetailConsumerRow.IsAuthorized;

                    if (int.Parse(oRetailConsumerRow.TransferType.ToString()) == (int)Dictionary.DataTransferType.Add)
                    {
                        if (oRetaillConsumer.CheckConsumer())
                        {
                            oRetailConsumerRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                            AppLogger.LogInfo("Successfully Insert Retail Consumer (POST) (ConsumerID=" + oRetailConsumerRow.ConsumerID + " and CustoerID=" + oRetailConsumerRow.CustomerID + ")");
                        }
                        else
                        {

                            oRetaillConsumer.AddForHOEnd();
                            oRetailConsumerRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                            AppLogger.LogInfo("Successfully Insert Retail Consumer (ConsumerID=" + oRetailConsumerRow.ConsumerID + " and CustoerID=" + oRetailConsumerRow.CustomerID + ")");
                        }
                    }
                    else
                    {
                        oRetaillConsumer.Update();
                        if (oRetaillConsumer.Flag == false)
                        {
                            oRetaillConsumer.AddForHOEnd();
                            oRetailConsumerRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                            AppLogger.LogInfo("Successfully Update Retail Consumer (ConsumerID=" + oRetailConsumerRow.ConsumerID + " and CustoerID=" + oRetailConsumerRow.CustomerID + ")");

                        }
                        else
                        {
                            oRetailConsumerRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                            AppLogger.LogInfo("Successfully Insert Retail Consumer (ConsumerID=" + oRetailConsumerRow.ConsumerID + " and CustoerID=" + oRetailConsumerRow.CustomerID + ")");
                        }
                    }
                    //oRetailConsumerRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                }
                catch (Exception ex)
                {
                    AppLogger.LogError("Error Inserting Retail Consumer (ConsumerID=" + oRetailConsumerRow.ConsumerID + " and CustoerID=" + oRetailConsumerRow.CustomerID + ") /" + ex.Message);
                    oRetailConsumerRow.IsDownload = (int)Dictionary.YesOrNoStatus.NO;
                    DBController.Instance.RollbackTransaction();
                    throw (ex);
                }
            }

            DBController.Instance.CommitTransaction();
            return oDSRetailConsumer;

        }
        public DSRetailConsumer InsertConsumerHOEnd(DSRetailConsumer oDSRetailConsumer, int nWHID)
        {
            if (!DBController.Instance.CheckConnection())
            {
                DBController.Instance.OpenNewConnection();
            }

            DBController.Instance.BeginNewTransaction();
            string sSql = "";
            int nCount = 0;

            /// Insert retail consumer from outlet to HO

            foreach (DSRetailConsumer.RetailConsumerRow oRetailConsumerRow in oDSRetailConsumer.RetailConsumer)
            {
                OleDbCommand cmd = DBController.Instance.GetCommand();

                try
                {
                    RetailConsumer oRetaillConsumer = new RetailConsumer();
                    oRetaillConsumer.SecondaryConsumer = oRetailConsumerRow.SecondaryConsumer;
                    oRetaillConsumer.SecondaryMobileNo = oRetailConsumerRow.SecondaryMobileNo;

                    oRetaillConsumer.ConsumerID = oRetailConsumerRow.ConsumerID;
                    oRetaillConsumer.ConsumerCode = oRetailConsumerRow.ConsumerCode;
                    oRetaillConsumer.ConsumerName = oRetailConsumerRow.ConsumerName;
                    oRetaillConsumer.ConsumerType = oRetailConsumerRow.ConsumerType;
                    oRetaillConsumer.CustomerID = oRetailConsumerRow.CustomerID;
                    oRetaillConsumer.ParentCustomerID = oRetailConsumerRow.ParentCustomerID;
                    oRetaillConsumer.Address = oRetailConsumerRow.Address;
                    oRetaillConsumer.CellNo = oRetailConsumerRow.CellNo;
                    oRetaillConsumer.SalesType = oRetailConsumerRow.SalesType;
                    oRetaillConsumer.WarehouseID = nWHID;

                    if (oRetailConsumerRow.IsPhoneNoNull())
                        oRetaillConsumer.PhoneNo = "";
                    else oRetaillConsumer.PhoneNo = oRetailConsumerRow.PhoneNo;

                    if (oRetailConsumerRow.IsEmailNull())
                        oRetaillConsumer.Email = "";
                    else oRetaillConsumer.Email = oRetailConsumerRow.Email;
                    oRetaillConsumer.EmployeeCode = oRetailConsumerRow.EmployeeCode;
                    if (oRetailConsumerRow.IsNationalIDNull())
                        oRetaillConsumer.NationalID = "";
                    else oRetaillConsumer.NationalID = oRetailConsumerRow.NationalID;

                    if (oRetailConsumerRow.IsDateofBirthNull())
                        oRetaillConsumer.DateofBirth = null;
                    else oRetaillConsumer.DateofBirth = oRetailConsumerRow.DateofBirth;

                    if (oRetailConsumerRow.IsVatRegNoNull())
                        oRetaillConsumer.VatRegNo = "";
                    else oRetaillConsumer.VatRegNo = oRetailConsumerRow.VatRegNo;

                    if (oRetailConsumerRow.IsShortNameNull())
                        oRetaillConsumer.ShortName = "";
                    else oRetaillConsumer.ShortName = oRetailConsumerRow.ShortName;

                    if (oRetailConsumerRow.IsFatherNameNull())
                        oRetaillConsumer.FatherName = "";
                    else oRetaillConsumer.FatherName = oRetailConsumerRow.FatherName;

                    if (oRetailConsumerRow.IsMotherNameNull())
                        oRetaillConsumer.MotherName = "";
                    else oRetaillConsumer.MotherName = oRetailConsumerRow.MotherName;

                    if (oRetailConsumerRow.IsSpouseNameNull())
                        oRetaillConsumer.SpouseName = "";
                    else oRetaillConsumer.SpouseName = oRetailConsumerRow.SpouseName;

                    if (oRetailConsumerRow.IsPermanentAddressNull())
                        oRetaillConsumer.PermanentAddress = "";
                    else oRetaillConsumer.PermanentAddress = oRetailConsumerRow.PermanentAddress;

                    if (oRetailConsumerRow.IsNationalityNull())
                        oRetaillConsumer.Nationality = "";
                    else oRetaillConsumer.Nationality = oRetailConsumerRow.Nationality;

                    if (oRetailConsumerRow.IsPassportNoNull())
                        oRetaillConsumer.PassportNo = "";
                    else oRetaillConsumer.PassportNo = oRetailConsumerRow.PassportNo;

                    if (oRetailConsumerRow.IsIsCLPNull())
                        oRetaillConsumer.IsCLP = -1;
                    else oRetaillConsumer.IsCLP = oRetailConsumerRow.IsCLP;

                    if (oRetailConsumerRow.IsCurrentCLPNull())
                        oRetaillConsumer.CurrentCLP = -1;
                    else oRetaillConsumer.CurrentCLP = oRetailConsumerRow.CurrentCLP;

                    if (oRetailConsumerRow.IsIsRegisterNull())
                        oRetaillConsumer.IsRegister = -1;
                    else oRetaillConsumer.IsRegister = oRetailConsumerRow.IsRegister;

                    if (oRetailConsumerRow.IsIsAuthorizedNull())
                        oRetaillConsumer.IsAuthorized = -1;
                    else oRetaillConsumer.IsAuthorized = oRetailConsumerRow.IsAuthorized;

                    if (oRetailConsumerRow.IsIsVerifiedEmailNull())
                        oRetaillConsumer.IsVerifiedEmail = 0;
                    else oRetaillConsumer.IsVerifiedEmail = oRetailConsumerRow.IsVerifiedEmail;

                    if (int.Parse(oRetailConsumerRow.TransferType.ToString()) == (int)Dictionary.DataTransferType.Add)
                    {
                        if (oRetaillConsumer.CheckConsumerHOEnd())
                        {
                            oRetailConsumerRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                            AppLogger.LogInfo("Successfully Insert Retail Consumer (POST) (ConsumerID=" + oRetailConsumerRow.ConsumerID + " and CustoerID=" + oRetailConsumerRow.CustomerID + ")");
                        }
                        else
                        {

                            oRetaillConsumer.AddHOEnd();
                            oRetailConsumerRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                            AppLogger.LogInfo("Successfully Insert Retail Consumer (ConsumerID=" + oRetailConsumerRow.ConsumerID + " and CustoerID=" + oRetailConsumerRow.CustomerID + ")");
                        }
                    }
                    else
                    {
                        oRetaillConsumer.UpdateHOEnd();
                        oRetailConsumerRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                        AppLogger.LogInfo("Successfully Update Retail Consumer (ConsumerID=" + oRetailConsumerRow.ConsumerID + " and CustoerID=" + oRetailConsumerRow.CustomerID + ")");

                        //if (oRetaillConsumer.Flag == false)
                        //{
                        //    oRetaillConsumer.AddForHOEnd();
                        //    oRetailConsumerRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                        //    AppLogger.LogInfo("Successfully Update Retail Consumer (ConsumerID=" + oRetailConsumerRow.ConsumerID + " and CustoerID=" + oRetailConsumerRow.CustomerID + ")");

                        //}
                        //else
                        //{
                        //    oRetailConsumerRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                        //    AppLogger.LogInfo("Successfully Insert Retail Consumer (ConsumerID=" + oRetailConsumerRow.ConsumerID + " and CustoerID=" + oRetailConsumerRow.CustomerID + ")");
                        //}
                    }
                    //oRetailConsumerRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                }
                catch (Exception ex)
                {
                    AppLogger.LogError("Error Inserting Retail Consumer (ConsumerID=" + oRetailConsumerRow.ConsumerID + " and CustoerID=" + oRetailConsumerRow.CustomerID + ") /" + ex.Message);
                    oRetailConsumerRow.IsDownload = (int)Dictionary.YesOrNoStatus.NO;
                    DBController.Instance.RollbackTransaction();
                    throw (ex);
                }
            }

            DBController.Instance.CommitTransaction();
            return oDSRetailConsumer;

        }
        public void InsertMonitoredData(DSDataMonitoring oDSDataMonitoring, int nWarehouseID)
        {

            string sSql = "";
            int nCount = 0;

            /// Insert Monitored Data
            try
            {
                DBController.Instance.BeginNewTransaction();
                foreach (DSDataMonitoring.DataMonitoringRow oDataMonitoringRow in oDSDataMonitoring.DataMonitoring)
                {
                    DataMonitoring oDataMonitoring = new DataMonitoring();



                    if (oDataMonitoring.TableName == "t_SalesPromo")
                    {
                        SalesPromotion oSP = new SalesPromotion();
                        int nCountPromo = oSP.GetNosOfHOPromo();
                        int nDifference = nCountPromo - Convert.ToInt32(oDataMonitoringRow.Field1);
                        if (nDifference != 0)
                        {
                            oDataMonitoring.WarehouseID = nWarehouseID;
                            oDataMonitoring.TableName = oDataMonitoringRow.TableName;
                            oDataMonitoring.DataID = oDataMonitoringRow.DataID;
                            oDataMonitoring.Instruction = oDataMonitoringRow.Instruction;
                            oDataMonitoring.CreateDate = DateTime.Now;

                            oDataMonitoring.Field1 = oDataMonitoringRow.Field1;
                            oDataMonitoring.Field2 = nCountPromo.ToString();
                            oDataMonitoring.Field3 = nDifference.ToString();
                        }
                    }
                    else
                    {
                        oDataMonitoring.WarehouseID = nWarehouseID;
                        oDataMonitoring.TableName = oDataMonitoringRow.TableName;
                        oDataMonitoring.DataID = oDataMonitoringRow.DataID;
                        oDataMonitoring.Instruction = oDataMonitoringRow.Instruction;
                        oDataMonitoring.CreateDate = DateTime.Now;

                        oDataMonitoring.Field1 = oDataMonitoringRow.Field1;
                        oDataMonitoring.Field2 = oDataMonitoringRow.Field2;
                        oDataMonitoring.Field3 = oDataMonitoringRow.Field3;
                    }
                    if (nCount == 0)
                    {
                        oDataMonitoring.Delete();
                        oDataMonitoring.DeleteStockSerialTD();
                    }
                    oDataMonitoring.Add();
                    if (oDataMonitoring.TableName == "t_ProductStockSerial")
                    {
                        oDataMonitoring.AddStockSerialTD();
                    }
                    nCount++;
                }
                DBController.Instance.CommitTransaction();
                if (nCount > 0)
                {
                    AppLogger.LogInfo("Successfully Insert Monitored Data and WarehouseID=" + nWarehouseID + ")");
                }
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                AppLogger.LogInfo("Error Inserting Monitored Data and WarehouseID=" + nWarehouseID + ")/" + ex.Message);
            }
        }
        public DSDayStartEndLog InsertDayStartEndLog(DSDayStartEndLog oDSDayStartEndLog)
        {
            DBController.Instance.BeginNewTransaction();
            string sSql = "";
            int nCount = 0;

            /// Insert retail consumer from outlet to HO

            foreach (DSDayStartEndLog.DayStartEndLogRow oDayStartEndLogRow in oDSDayStartEndLog.DayStartEndLog)
            {
                OleDbCommand cmd = DBController.Instance.GetCommand();

                try
                {

                    DayStartEndLog oDayStartEndLog = new DayStartEndLog();

                    oDayStartEndLog.LogID = oDayStartEndLogRow.LogID;
                    oDayStartEndLog.WarehouseID = oDayStartEndLogRow.WarehouseID;
                    oDayStartEndLog.Type = oDayStartEndLogRow.Type;

                    if (oDayStartEndLog.CheckLog())
                    {
                        oDayStartEndLogRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                        AppLogger.LogInfo("Successfully Insert (POST) Day Start End Log (LogID=" + oDayStartEndLogRow.LogID + " and WarehouseID=" + oDayStartEndLogRow.WarehouseID + ")");
                    }
                    else
                    {

                        oDayStartEndLog.OperationDate = oDayStartEndLogRow.OperationDate;
                        oDayStartEndLog.CreateUserID = oDayStartEndLogRow.CreateUserID;
                        oDayStartEndLog.UploadDate = DateTime.Now;
                        oDayStartEndLog.Add();

                        oDayStartEndLogRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                        AppLogger.LogInfo("Successfully Insert Day Start End Log (LogID=" + oDayStartEndLogRow.LogID + " and WarehouseID=" + oDayStartEndLogRow.WarehouseID + ")");
                    }
                }
                catch (Exception ex)
                {
                    AppLogger.LogError("Error Inserting Day Start End Log (LogID=" + oDayStartEndLogRow.LogID + " and WarehouseID=" + oDayStartEndLogRow.WarehouseID + ") /" + ex.Message);
                    oDayStartEndLogRow.IsDownload = (int)Dictionary.YesOrNoStatus.NO;
                    DBController.Instance.RollbackTransaction();
                    throw (ex);
                }
            }

            DBController.Instance.CommitTransaction();
            return oDSDayStartEndLog;

        }

        public DSProductComponent InsertFactoryData(DSProductComponent oDSProductComponent, string sTableName, int nLocationID)
        {
            DBController.Instance.BeginNewTransaction();
            if (sTableName == "t_ProductComponent")
            {

                foreach (DSProductComponent.ProductComponentRow oProductComponentRow in oDSProductComponent.ProductComponent)
                {
                    OleDbCommand cmd = DBController.Instance.GetCommand();
                    try
                    {

                        ProductComponent oProductComponent = new ProductComponent();
                        oProductComponent.ProductComponentID = oProductComponentRow.ProductComponentID;
                        oProductComponent.ProductID = oProductComponentRow.ProductID;
                        oProductComponent.ProductSerial = oProductComponentRow.ProductSerial;
                        oProductComponent.PanelSerial = oProductComponentRow.PanelSerial;
                        oProductComponent.SSBSerial = oProductComponentRow.SSBSerial;
                        oProductComponent.PSUSerial = oProductComponentRow.PSUSerial;
                        oProductComponent.BarcodeSerial = oProductComponentRow.BarcodeSerial;
                        oProductComponent.CreateUserID = oProductComponentRow.CreateUserID;
                        oProductComponent.CreateDate = Convert.ToDateTime(oProductComponentRow.CreateDate);
                        oProductComponent.UpdateUserID = oProductComponentRow.UpdateUserID;
                        oProductComponent.UpdateDate = Convert.ToDateTime(oProductComponentRow.UpdateDate);
                        oProductComponent.CBSerial = oProductComponentRow.CBSerial;
                        oProductComponent.CompressorSerial = oProductComponentRow.CompressorSerial;
                        oProductComponent.IsIndoorItem = oProductComponentRow.IsIndoorItem;
                        oProductComponent.ACIndoorPCBSerial = oProductComponentRow.ACIndoorPCBSerial;
                        oProductComponent.AddForTelFactory(sTableName);


                        AppLogger.LogInfo("Successfully Insert " + sTableName + " (ProductComponentID=" + oProductComponentRow.ProductComponentID + " and LocationID=" + nLocationID + ")");
                    }
                    catch (Exception ex)
                    {
                        AppLogger.LogError("Error Inserting " + sTableName + " (ProductComponentID=" + oProductComponentRow.ProductComponentID + " and LocationID=" + nLocationID + ") /" + ex.Message);
                        DBController.Instance.RollbackTransaction();
                        throw (ex);
                    }
                }
            }
            else if (sTableName == "t_ProductComponentSerialUniversal")
            {

                foreach (DSProductComponent.ProductComponentSerialUniversalRow oProductComponentSerialUniversalRow in oDSProductComponent.ProductComponentSerialUniversal)
                {
                    OleDbCommand cmd = DBController.Instance.GetCommand();
                    try
                    {

                        ProductComponent oProductComponent = new ProductComponent();
                        oProductComponent.SetID = oProductComponentSerialUniversalRow.SetID;
                        oProductComponent.ProductID = oProductComponentSerialUniversalRow.ProductID;
                        oProductComponent.ComponentID = oProductComponentSerialUniversalRow.ComponentID;
                        oProductComponent.BarcodeSerial = oProductComponentSerialUniversalRow.SerialNo;
                        oProductComponent.CreateUserID = oProductComponentSerialUniversalRow.CreateUserID;
                        oProductComponent.CreateDate = Convert.ToDateTime(oProductComponentSerialUniversalRow.CreateDate);
                        oProductComponent.UpdateUserID = oProductComponentSerialUniversalRow.UpdateUserID;
                        oProductComponent.UpdateDate = Convert.ToDateTime(oProductComponentSerialUniversalRow.UpdateDate);
                        oProductComponent.ProductionType = oProductComponentSerialUniversalRow.ProductionType;
                        oProductComponent.IsIndoorItem = oProductComponentSerialUniversalRow.IsIndoorItem;
                        oProductComponent.LocationID = oProductComponentSerialUniversalRow.LocationID;
                        oProductComponent.Status = oProductComponentSerialUniversalRow.Status;
                        oProductComponent.Remarks = oProductComponentSerialUniversalRow.Remarks;
                        oProductComponent.DeleteFactorySerialUniversal();
                        oProductComponent.AddForTelFactory(sTableName);


                        AppLogger.LogInfo("Successfully Insert " + sTableName + " (SetID=" + oProductComponentSerialUniversalRow.SetID + " and LocationID=" + nLocationID + ")");
                    }
                    catch (Exception ex)
                    {
                        AppLogger.LogError("Error Inserting " + sTableName + " (SetID=" + oProductComponentSerialUniversalRow.SetID + " and LocationID=" + nLocationID + ") /" + ex.Message);
                        DBController.Instance.RollbackTransaction();
                        throw (ex);
                    }
                }

            }
            else if (sTableName == "t_ProductComponentUniversal")
            {
                foreach (DSProductComponent.ProductComponentUniversalRow oProductComponentUniversalRow in oDSProductComponent.ProductComponentUniversal)
                {
                    OleDbCommand cmd = DBController.Instance.GetCommand();
                    try
                    {

                        ProductComponent oProductComponent = new ProductComponent();
                        oProductComponent.ProductComponentUniversalID = oProductComponentUniversalRow.ProductComponentUniversalID;
                        oProductComponent.ComponentID = oProductComponentUniversalRow.ComponentID;
                        oProductComponent.ASGID = oProductComponentUniversalRow.ASGID;
                        oProductComponent.ComponentName = oProductComponentUniversalRow.ComponentName;
                        oProductComponent.CreateUserID = oProductComponentUniversalRow.CreateUserID;
                        oProductComponent.CreateDate = Convert.ToDateTime(oProductComponentUniversalRow.CreateDate);
                        oProductComponent.IsActive = oProductComponentUniversalRow.IsActive;
                        oProductComponent.UpdateUserID = oProductComponentUniversalRow.UpdateUserID;
                        oProductComponent.UpdateDate = Convert.ToDateTime(oProductComponentUniversalRow.UpdateDate);
                        oProductComponent.Sort = oProductComponentUniversalRow.Sort;
                        oProductComponent.ProductionType = oProductComponentUniversalRow.ProductionType;
                        oProductComponent.IsIndoorItem = oProductComponentUniversalRow.IsIndoorItem;

                        oProductComponent.AddForTelFactory(sTableName);


                        AppLogger.LogInfo("Successfully Insert " + sTableName + " (SetID=" + oProductComponentUniversalRow.ProductComponentUniversalID + " and LocationID=" + nLocationID + ")");
                    }
                    catch (Exception ex)
                    {
                        AppLogger.LogError("Error Inserting " + sTableName + " (SetID=" + oProductComponentUniversalRow.ProductComponentUniversalID + " and LocationID=" + nLocationID + ") /" + ex.Message);
                        DBController.Instance.RollbackTransaction();
                        throw (ex);
                    }
                }

                }
                else if (sTableName == "t_SKDDefectiveComponent")
                {

                    foreach (DSProductComponent.ProductComponentSerialUniversalRow oProductComponentSerialUniversalRow in oDSProductComponent.ProductComponentSerialUniversal)
                    {
                        OleDbCommand cmd = DBController.Instance.GetCommand();
                        try
                        {

                            ProductComponent oProductComponent = new ProductComponent();
                            oProductComponent.DefectiveID = oProductComponentSerialUniversalRow.DefectiveID;
                            oProductComponent.SetID = oProductComponentSerialUniversalRow.SetID;
                            oProductComponent.ComponentID = oProductComponentSerialUniversalRow.ComponentID;
                            oProductComponent.BarcodeSerial = oProductComponentSerialUniversalRow.SerialNo;
                            oProductComponent.CreateUserID = oProductComponentSerialUniversalRow.CreateUserID;
                            oProductComponent.CreateDate = Convert.ToDateTime(oProductComponentSerialUniversalRow.CreateDate);
                            oProductComponent.Symtom = oProductComponentSerialUniversalRow.Symtom;
                            oProductComponent.Rootcause = oProductComponentSerialUniversalRow.Rootcause;
                            oProductComponent.LocationID = oProductComponentSerialUniversalRow.LocationID;
                            oProductComponent.Status = oProductComponentSerialUniversalRow.Status;
                            oProductComponent.Remarks = oProductComponentSerialUniversalRow.Remarks;
                            //oProductComponent.DeleteFactorySerialUniversal();
                            oProductComponent.AddForTelFactory(sTableName);


                            AppLogger.LogInfo("Successfully Insert " + sTableName + " (SetID=" + oProductComponentSerialUniversalRow.SetID + " and LocationID=" + nLocationID + ")");
                        }
                        catch (Exception ex)
                        {
                            AppLogger.LogError("Error Inserting " + sTableName + " (SetID=" + oProductComponentSerialUniversalRow.SetID + " and LocationID=" + nLocationID + ") /" + ex.Message);
                            DBController.Instance.RollbackTransaction();
                            throw (ex);
                        }
                    }

                }

            DBController.Instance.CommitTransaction();
            return oDSProductComponent;

        }
               
        public DSDBBackupLog InsertDBBackupLog(DSDBBackupLog oDSDBBackupLog)
        {
            DBController.Instance.BeginNewTransaction();
            string sSql = "";
            int nCount = 0;

            /// Insert retail consumer from outlet to HO

            foreach (DSDBBackupLog.DBBackupLogRow oDBBackupLogRow in oDSDBBackupLog.DBBackupLog)
            {
                OleDbCommand cmd = DBController.Instance.GetCommand();

                try
                {

                    DBBackupLog oDBBackupLog = new DBBackupLog();

                    oDBBackupLog.BackupID = oDBBackupLogRow.BackupID;
                    oDBBackupLog.WarehouseID = oDBBackupLogRow.WarehouseID;
                    oDBBackupLog.OperationDate = oDBBackupLogRow.OperationDate;
                    oDBBackupLog.BakcupDate = oDBBackupLogRow.BakcupDate;
                    oDBBackupLog.FileName = oDBBackupLogRow.FileName;
                    oDBBackupLog.UploadDate = DateTime.Now;

                    if (oDBBackupLog.CheckLog())
                    {
                        oDBBackupLogRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                        AppLogger.LogInfo("Successfully Insert (POST) Database Backup Log (BackupID=" + oDBBackupLogRow.BackupID + " and WarehouseID=" + oDBBackupLogRow.WarehouseID + ")");
                    }
                    else
                    {
                        oDBBackupLog.Add();
                        oDBBackupLogRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                        AppLogger.LogInfo("Successfully Insert Database Backup Log (BackupID=" + oDBBackupLogRow.BackupID + " and WarehouseID=" + oDBBackupLogRow.WarehouseID + ")");
                    }
                }
                catch (Exception ex)
                {
                    AppLogger.LogError("Error Inserting Database Backup Log (BackupID=" + oDBBackupLogRow.BackupID + " and WarehouseID=" + oDBBackupLogRow.WarehouseID + ") /" + ex.Message);
                    oDBBackupLogRow.IsDownload = (int)Dictionary.YesOrNoStatus.NO;
                    DBController.Instance.RollbackTransaction();
                    throw (ex);
                }
            }

            DBController.Instance.CommitTransaction();
            return oDSDBBackupLog;

        }
        ///
        // Insert CLP
        ///
        public void InsertCLP(DSCLP oDSCLP)
        {
            try
            {

                oCLPEligibility = new CLPEligibility();
                oCLPPointSlab = new CLPPointSlab();
                oCLPPoint = new CLPPoint();

                oCLPEligibility.DeleteAll();
                oCLPPointSlab.DeleteAll();
                oCLPPoint.DeleteAll();
            }
            catch (Exception ex)
            {
                throw (ex);
            }

            OleDbCommand cmd = DBController.Instance.GetCommand();

            /// Insert CLP

            foreach (DSCLP.CLPEligibilityRow oCLPEligibilityRow in oDSCLP.CLPEligibility)
            {
                try
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    cmd.CommandText = "INSERT INTO t_CLPEligibility VALUES(?,?,?)";
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.AddWithValue("EligibilityID", oCLPEligibilityRow.EligibilityID);
                    cmd.Parameters.AddWithValue("Amount", oCLPEligibilityRow.Amount);
                    cmd.Parameters.AddWithValue("EffectDate", oCLPEligibilityRow.EffectDate);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                catch (Exception ex)
                {
                    throw (ex);
                }
            }
            foreach (DSCLP.CLPPointRow oCLPPointRow in oDSCLP.CLPPoint)
            {
                try
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    cmd.CommandText = "INSERT INTO t_CLPPoint VALUES(?,?,?)";
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.AddWithValue("PointID", oCLPPointRow.PointID);
                    cmd.Parameters.AddWithValue("Description", oCLPPointRow.Description);
                    cmd.Parameters.AddWithValue("EffectDate", oCLPPointRow.EffectDate);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                catch (Exception ex)
                {
                    throw (ex);
                }
            }
            foreach (DSCLP.CLPPointSlabRow oCLPPointSlabRow in oDSCLP.CLPPointSlab)
            {
                try
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    cmd.CommandText = "INSERT INTO t_CLPPointSlab VALUES(?,?,?,?)";
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.AddWithValue("SlabID", oCLPPointSlabRow.SlabID);
                    cmd.Parameters.AddWithValue("PointID", oCLPPointSlabRow.PointID);
                    cmd.Parameters.AddWithValue("SlabAmount", oCLPPointSlabRow.SlabAmount);
                    cmd.Parameters.AddWithValue("Point", oCLPPointSlabRow.Point);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                catch (Exception ex)
                {
                    throw (ex);
                }
            }
        }

        ///
        // Insert/Update ProductTranType
        ///
        public void InsertProductTranType(DSProductTransactionType oDSProductTransactionType)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();

            try
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                cmd.CommandText = "Delete FROM t_ProductStockTranType ";
                cmd.CommandType = CommandType.Text;

                cmd.ExecuteNonQuery();
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw (ex);
            }

            string sSql = "";

            foreach (DSProductTransactionType.ProductStockTranTypeRow oProductStockTranTypeRow in oDSProductTransactionType.ProductStockTranType)
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                try
                {
                    sSql = "INSERT INTO t_ProductStockTranType VALUES(?,?,?,?,?,?)";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.AddWithValue("TranTypeID", oProductStockTranTypeRow.TranTypeID);
                    cmd.Parameters.AddWithValue("TranTypeCode", oProductStockTranTypeRow.TranTypeCode);
                    cmd.Parameters.AddWithValue("TranTypeName", oProductStockTranTypeRow.TranTypeName);
                    cmd.Parameters.AddWithValue("TransactionSide", oProductStockTranTypeRow.TransactionSide);
                    cmd.Parameters.AddWithValue("IsSystem", oProductStockTranTypeRow.IsSystem);
                    cmd.Parameters.AddWithValue("Status", oProductStockTranTypeRow.Status);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();

                }
                catch (Exception ex)
                {
                    throw (ex);
                }


            }
        }


        ///
        // Insert Product stock transaction
        ///
        public void InsertProductStockTran(DSProductTransaction oDSProductTransaction)
        {
            /// Insert Product stock tran
            DSProductTransaction oDSProductTransactionItem = new DSProductTransaction();

            try
            {
                foreach (DSProductTransaction.ProductStockTranRow oProductStockTranRow in oDSProductTransaction.ProductStockTran)
                {
                    if (CheckProductStockTran(oProductStockTranRow.TranNo))
                    {
                        ProductTransaction _oProductTransaction = new ProductTransaction();

                        _oProductTransaction.TranNo = oProductStockTranRow.TranNo;
                        _oProductTransaction.TranDate = oProductStockTranRow.TranDate;
                        _oProductTransaction.TranTypeID = oProductStockTranRow.TranTypeId;
                        _oProductTransaction.CreateDate = oProductStockTranRow.LastUpdateDate;
                        _oProductTransaction.LastUpdateDate = oProductStockTranRow.CreateDate;
                        _oProductTransaction.LastUpdateUserID = int.Parse(oProductStockTranRow.LastUpdateUserId.ToString());
                        _oProductTransaction.ToWHID = int.Parse(oProductStockTranRow.ToWHId.ToString());
                        _oProductTransaction.ToChannelID = int.Parse(oProductStockTranRow.ToChannelID.ToString());
                        _oProductTransaction.FromWHID = int.Parse(oProductStockTranRow.FromWHId.ToString());
                        _oProductTransaction.FromChannelID = int.Parse(oProductStockTranRow.FromChannelId.ToString());
                        _oProductTransaction.UserID = int.Parse(oProductStockTranRow.UserId.ToString());
                        _oProductTransaction.Remarks = oProductStockTranRow.Remarks;
                        _oProductTransaction.Terminal = (int)Dictionary.Terminal.Branch_Office;
                        _oProductTransaction.Status = (int)Dictionary.StockTransactionStatus.PENDING;

                        DataRow[] oDR = oDSProductTransaction.ProductStockTranItem.Select(" TranId= '" + oProductStockTranRow.TranId + "'");
                        oDSProductTransactionItem = new DSProductTransaction();
                        oDSProductTransactionItem.Merge(oDR);
                        oDSProductTransactionItem.ProductStockTranItem.AcceptChanges();

                        foreach (DSProductTransaction.ProductStockTranItemRow oProductStockTranItemRow in oDSProductTransactionItem.ProductStockTranItem)
                        {
                            ProductTransactionDetail oProductTransactionDetail = new ProductTransactionDetail();

                            oProductTransactionDetail.ProductID = int.Parse(oProductStockTranItemRow.ProductID.ToString());
                            oProductTransactionDetail.Qty = oProductStockTranItemRow.Qty;
                            oProductTransactionDetail.StockPrice = oProductStockTranItemRow.StockPrice;

                            oProductTransactionDetail.DutyTranNo = oProductStockTranItemRow.DutyTranNo;
                            oProductTransactionDetail.DutyPrice = oProductStockTranItemRow.DutyPrice;
                            oProductTransactionDetail.DutyRate = oProductStockTranItemRow.DutyRate;


                            _oProductTransaction.Add(oProductTransactionDetail);
                        }

                        _oProductTransaction.InsertProductTranWithVATData();

                        POSRequisition oPOSRequisition = new POSRequisition();

                        oPOSRequisition.GetStockRequisitionIDByRequistionNo(_oProductTransaction.TranNo);
                        oPOSRequisition.StockTranID = _oProductTransaction.TranID;
                        oPOSRequisition.Status = (int)Dictionary.StockRequisitionStatus.Transfer_To_Branch;
                        oPOSRequisition.UpdateStockTranID_POS();
                        oPOSRequisition.UpdateStatus();



                        ProductBarcode _oMAXID = new ProductBarcode();
                        int _nMAXVATPaidID = _oMAXID.GetMaxID();


                        ProductTransferProductSerials oPTPSs = new ProductTransferProductSerials();
                        foreach (DSProductTransaction.ProductTransferProductSerialRow oProductTransferProductSerialRow in oDSProductTransaction.ProductTransferProductSerial)
                        {
                            if (oProductStockTranRow.TranId == oProductTransferProductSerialRow.TranID)
                            {
                                ProductTransferProductSerial oPTPS = new ProductTransferProductSerial();
                                oPTPS.ProductID = int.Parse(oProductTransferProductSerialRow.ProductID.ToString());
                                oPTPS.SerialNo = int.Parse(oProductTransferProductSerialRow.SerialNo.ToString());
                                oPTPS.ProductSerialNo = oProductTransferProductSerialRow.ProductSerialNo;
                                oPTPSs.Add(oPTPS);

                                if (oProductTransferProductSerialRow.IsVATPaidProduct == 1)
                                {
                                    //update Vat Paid Data
                                    ProductBarcode _oProductBarcode = new ProductBarcode();
                                    _oProductBarcode.VatPaidID = _nMAXVATPaidID;
                                    _oProductBarcode.ProductId = int.Parse(oProductTransferProductSerialRow.ProductID.ToString());
                                    _oProductBarcode.WarehouseID = int.Parse(oProductStockTranRow.ToWHId.ToString());
                                    _oProductBarcode.TranNo = oProductStockTranRow.TranNo;
                                    _oProductBarcode.TranDate = oProductStockTranRow.TranDate;
                                    _oProductBarcode.ProductSerialNo = oProductTransferProductSerialRow.ProductSerialNo;
                                    _oProductBarcode.Status = 1;
                                    _oProductBarcode.InsertVatPaidProductSerial();
                                }
                            }
                        }
                        _oProductTransaction.ProdSL(oPTPSs);


                    }
                }
            }
            catch (Exception ex)
            {
                throw (ex);
            }
        }

        public void InsertTDDeliveryShipment(DSBasicData oDSTDDeliveryShipment)
        {
            foreach (DSBasicData.TDDeliveryShipmentRow oTDDeliveryShipmentRow in oDSTDDeliveryShipment.TDDeliveryShipment)
            {
                try
                {
                    if (!DBController.Instance.CheckConnection())
                    {
                        DBController.Instance.OpenNewConnection();
                    }
                    DBController.Instance.BeginNewTransaction();

                    TDDeliveryShipment _oTDDeliveryShipment = new TDDeliveryShipment();
                    DSBasicData oTDDeliveryShipmentItem = new DSBasicData();

                    _oTDDeliveryShipment.ShipmentID = oTDDeliveryShipmentRow.ShipmentID;
                    _oTDDeliveryShipment.WHID = oTDDeliveryShipmentRow.WHID;
                    _oTDDeliveryShipment.InvoiceNo = oTDDeliveryShipmentRow.InvoiceNo;
                    _oTDDeliveryShipment.Remarks = oTDDeliveryShipmentRow.Remarks;
                    _oTDDeliveryShipment.Status = oTDDeliveryShipmentRow.Status;
                    _oTDDeliveryShipment.CreateDate = oTDDeliveryShipmentRow.CreateDate;
                    _oTDDeliveryShipment.CreateUserID = oTDDeliveryShipmentRow.CreateUserID;

                    DataRow[] oDR = oDSTDDeliveryShipment.TDDeliveryShipmentItem.Select("ShipmentID= '" + oTDDeliveryShipmentRow.ShipmentID + "' and WHID= '" + oTDDeliveryShipmentRow.WHID + "'");
                    oTDDeliveryShipmentItem.Merge(oDR);
                    oTDDeliveryShipmentItem.AcceptChanges();

                    foreach (DSBasicData.TDDeliveryShipmentItemRow oTDDeliveryShipmentItemRow in oTDDeliveryShipmentItem.TDDeliveryShipmentItem)
                    {
                        TDDeliveryShipmentItem _oTDDeliveryShipmentItem = new TDDeliveryShipmentItem();
                        _oTDDeliveryShipmentItem.ShipmentID = oTDDeliveryShipmentItemRow.ShipmentID;
                        _oTDDeliveryShipmentItem.ProductID = oTDDeliveryShipmentItemRow.ProductID;
                        _oTDDeliveryShipmentItem.UnitPrice = oTDDeliveryShipmentItemRow.UnitPrice;
                        _oTDDeliveryShipmentItem.Qty = oTDDeliveryShipmentItemRow.Qty;
                        _oTDDeliveryShipmentItem.ShipmentDate = oTDDeliveryShipmentItemRow.ShipmentDate;
                        _oTDDeliveryShipmentItem.ShipmentTime = oTDDeliveryShipmentItemRow.ShipmentTime;
                        _oTDDeliveryShipmentItem.ShipingAddress = oTDDeliveryShipmentItemRow.ShipingAddress;
                        _oTDDeliveryShipmentItem.ContactNo = oTDDeliveryShipmentItemRow.ContactNo;
                        _oTDDeliveryShipmentItem.InstallationRequired = oTDDeliveryShipmentItemRow.InstallationRequired;
                        _oTDDeliveryShipmentItem.ExpInstallationDate = oTDDeliveryShipmentItemRow.ExpInstallationDate;
                        _oTDDeliveryShipmentItem.ExpInstallationTime = oTDDeliveryShipmentItemRow.ExpInstallationTime;
                        _oTDDeliveryShipmentItem.DeliveryMode = oTDDeliveryShipmentItemRow.DeliveryMode;
                        _oTDDeliveryShipmentItem.VehicleNo = oTDDeliveryShipmentItemRow.VehicleNo;
                        _oTDDeliveryShipmentItem.FreightCost = oTDDeliveryShipmentItemRow.FreightCost;
                        _oTDDeliveryShipmentItem.HDCompletionDate = oTDDeliveryShipmentItemRow.HDCompletionDate;
                        _oTDDeliveryShipmentItem.HDCompletionTime = oTDDeliveryShipmentItemRow.HDCompletionTime;
                        _oTDDeliveryShipmentItem.IsSafelyDelivered = oTDDeliveryShipmentItemRow.IsSafelyDelivered;
                        _oTDDeliveryShipmentItem.Reason = oTDDeliveryShipmentItemRow.Reason;
                        _oTDDeliveryShipmentItem.ActionTaken = oTDDeliveryShipmentItemRow.ActionTaken;
                        _oTDDeliveryShipmentItem.Remarks = oTDDeliveryShipmentItemRow.Remarks;
                        _oTDDeliveryShipmentItem.JobNo = oTDDeliveryShipmentItemRow.JobNo;
                        if (!oTDDeliveryShipmentItemRow.IsInstallationDateNull())
                        {
                            _oTDDeliveryShipmentItem.InstallationDate = oTDDeliveryShipmentItemRow.InstallationDate;
                        }
                        if (!oTDDeliveryShipmentItemRow.IsInstallationTimeNull())
                        {
                            _oTDDeliveryShipmentItem.InstallationTime = oTDDeliveryShipmentItemRow.InstallationTime;
                        }
                        _oTDDeliveryShipmentItem.IsProperlyInstalled = oTDDeliveryShipmentItemRow.IsProperlyInstalled;
                        _oTDDeliveryShipmentItem.CSDReason = oTDDeliveryShipmentItemRow.CSDReason;
                        _oTDDeliveryShipmentItem.CSDRemarks = oTDDeliveryShipmentItemRow.CSDRemarks;

                        _oTDDeliveryShipmentItem.WHID = oTDDeliveryShipmentItemRow.WHID;
                        _oTDDeliveryShipmentItem.LiftingCost = oTDDeliveryShipmentItemRow.LiftingCost;
                        _oTDDeliveryShipmentItem.ApprovedLiftingCost = oTDDeliveryShipmentItemRow.ApprovedLiftingCost;
                        _oTDDeliveryShipmentItem.ApprovedFreightCost = oTDDeliveryShipmentItemRow.ApprovedFreightCost;
                        _oTDDeliveryShipmentItem.FloorNo = oTDDeliveryShipmentItemRow.FloorNo;
                        _oTDDeliveryShipmentItem.DistanceKM = oTDDeliveryShipmentItemRow.DistanceKM;

                        _oTDDeliveryShipment.Add(_oTDDeliveryShipmentItem);
                    }

                    _oTDDeliveryShipment.DeleteShipmentData();
                    _oTDDeliveryShipment.Add(_oTDDeliveryShipment.ShipmentID, _oTDDeliveryShipment.Status);

                    DBController.Instance.CommitTransaction();
                    AppLogger.LogInfo("Successfully Insert TD Delivery Shipment, WHID=" + oTDDeliveryShipmentRow.WHID + " and Shipment=" + oTDDeliveryShipmentRow.ShipmentID + "");
                }
                catch (Exception ex)
                {
                    DBController.Instance.RollbackTransaction();
                    AppLogger.LogError("Error Inserting TD Delivery Shipment, WHID=" + oTDDeliveryShipmentRow.WHID + " and Shipment=" + oTDDeliveryShipmentRow.ShipmentID + "/" + ex.Message);
                    throw (ex);
                }
            }
        }


        public void InsertPettyCashExpence(DSPettyCash oDSPettyCashExpence, int nWarehouseID)
        {
            foreach (DSPettyCash.PettyCashExpenseRow oPettyCashExpenseRow in oDSPettyCashExpence.PettyCashExpense)
            {
                try
                {
                    if (!DBController.Instance.CheckConnection())
                    {
                        DBController.Instance.OpenNewConnection();
                    }
                    //DBController.Instance.BeginNewTransaction();

                    PettyCashExpense _oPettyCashExpense = new PettyCashExpense();
                    DSPettyCash oDSPettyCashExpenseItem = new DSPettyCash();

                    _oPettyCashExpense.ID = oPettyCashExpenseRow.ID;
                    _oPettyCashExpense.ExpanceCode = oPettyCashExpenseRow.ExpanceCode;
                    _oPettyCashExpense.WarehouseID = oPettyCashExpenseRow.WarehouseID;
                    _oPettyCashExpense.Remarks = oPettyCashExpenseRow.Remarks;
                    _oPettyCashExpense.Status = oPettyCashExpenseRow.Status;
                    _oPettyCashExpense.CreateDate = oPettyCashExpenseRow.CreateDate;
                    _oPettyCashExpense.CreateUserID = oPettyCashExpenseRow.CreateUserID;
                    if (!oPettyCashExpenseRow.IsApproveDateNull())
                    {
                        _oPettyCashExpense.ApproveDate = oPettyCashExpenseRow.ApproveDate;
                    }
                    if (!oPettyCashExpenseRow.IsApproveUserIDNull())
                    {
                        _oPettyCashExpense.ApproveUserID = oPettyCashExpenseRow.ApproveUserID;
                    }
                    else
                    {
                        _oPettyCashExpense.ApproveUserID = -1;
                    }

                    DataRow[] oDR = oDSPettyCashExpence.PettyCashExpenseDetail.Select("ID= '" + oPettyCashExpenseRow.ID + "' and WarehouseID= '" + oPettyCashExpenseRow.WarehouseID + "'");
                    oDSPettyCashExpenseItem.Merge(oDR);
                    oDSPettyCashExpenseItem.AcceptChanges();

                    foreach (DSPettyCash.PettyCashExpenseDetailRow oPettyCashExpenseDetailRow in oDSPettyCashExpenseItem.PettyCashExpenseDetail)
                    {
                        PettyCashExpenseDetail _oPettyCashExpenseDetail = new PettyCashExpenseDetail();
                        _oPettyCashExpenseDetail.ID = oPettyCashExpenseDetailRow.ID;
                        _oPettyCashExpenseDetail.WarehouseID = oPettyCashExpenseDetailRow.WarehouseID;
                        _oPettyCashExpenseDetail.ExpenseHeadID = oPettyCashExpenseDetailRow.ExpenseHeadID;
                        _oPettyCashExpenseDetail.VoucherNo = oPettyCashExpenseDetailRow.VoucherNo;
                        _oPettyCashExpenseDetail.Purpose = oPettyCashExpenseDetailRow.Purpose;
                        _oPettyCashExpenseDetail.Amount = oPettyCashExpenseDetailRow.Amount;
                        _oPettyCashExpenseDetail.ApprovedAmount = oPettyCashExpenseDetailRow.ApprovedAmount;
                        _oPettyCashExpense.Add(_oPettyCashExpenseDetail);
                    }

                    _oPettyCashExpense.DeletePettyCashExpenseData();
                    _oPettyCashExpense.AddForWebDownload();

                    //DBController.Instance.CommitTransaction();
                    AppLogger.LogInfo("Successfully Insert Petty Cash Expense, WarehouseID=" + nWarehouseID + " and ID=" + oPettyCashExpenseRow.ID + "");
                }
                catch (Exception ex)
                {
                    DBController.Instance.RollbackTransaction();
                    AppLogger.LogError("Error Inserting Petty Cash Expense, WarehouseID=" + nWarehouseID + " and ID=" + oPettyCashExpenseRow.ID + "/" + ex.Message);
                    throw (ex);
                }
            }

        }


        public void InsertPromoExchnageOffers(DSPromoExchangeOffer oDSPromoExchgangeOffer, int nWarehouseID)
        {
            foreach (DSPromoExchangeOffer.PromoExchangeOfferRow oDSPromoExchgangeOfferRow in oDSPromoExchgangeOffer.PromoExchangeOffer)
            {



                try
                {
                    if (!DBController.Instance.CheckConnection())
                    {
                        DBController.Instance.OpenNewConnection();
                    }
                    CJ.Class.Promotion.ExchangeOffers _oExchangeOffers = new CJ.Class.Promotion.ExchangeOffers();
                    DSPromoExchangeOffer oPromoExchgangeOfferItem = new DSPromoExchangeOffer();

                    _oExchangeOffers.OfferId = oDSPromoExchgangeOfferRow.OfferId;
                    _oExchangeOffers.OfferCode = oDSPromoExchgangeOfferRow.OfferCode;
                    _oExchangeOffers.Status = oDSPromoExchgangeOfferRow.Status;
                    _oExchangeOffers.Description = oDSPromoExchgangeOfferRow.Description;
                    _oExchangeOffers.IsActive = oDSPromoExchgangeOfferRow.IsActive;
                    _oExchangeOffers.ToDate = oDSPromoExchgangeOfferRow.ToDate;
                    _oExchangeOffers.FromDate = oDSPromoExchgangeOfferRow.FromDate;
                    _oExchangeOffers.CreateDate = oDSPromoExchgangeOfferRow.CreateDate;
                    _oExchangeOffers.CreateUserId = oDSPromoExchgangeOfferRow.CreateUserId;

                    DataRow[] oDR = oDSPromoExchgangeOffer.PromoExchangeOfferDetail.Select("OfferId=" + oDSPromoExchgangeOfferRow.OfferId);
                    oPromoExchgangeOfferItem.Merge(oDR);
                    oPromoExchgangeOfferItem.AcceptChanges();

                    foreach (DSPromoExchangeOffer.PromoExchangeOfferDetailRow oPromoExchangeOfferDetailRow in oPromoExchgangeOfferItem.PromoExchangeOfferDetail)
                    {
                        CJ.Class.Promotion.ExchangeOfferDetail _oExchangeOfferDetails = new CJ.Class.Promotion.ExchangeOfferDetail();
                        _oExchangeOfferDetails.OfferDetailsId = oPromoExchangeOfferDetailRow.OfferDetailsId;
                        _oExchangeOfferDetails.OfferId = oPromoExchangeOfferDetailRow.OfferId;
                        _oExchangeOfferDetails.DataType = oPromoExchangeOfferDetailRow.DataType;
                        _oExchangeOfferDetails.DataId = oPromoExchangeOfferDetailRow.DataId;
                        _oExchangeOffers.Add(_oExchangeOfferDetails);
                    }



                    if (CheckPromoExchangeOffer(oDSPromoExchgangeOfferRow.OfferId))
                    {
                        _oExchangeOffers.DeleteExchangeOfferData();
                        _oExchangeOffers.AddPos();
                        AppLogger.LogInfo("Successfully insert exchange offer, warehouseID=" + nWarehouseID + " and id=" + oDSPromoExchgangeOfferRow.OfferId + "");
                    }
                    else
                    {
                        _oExchangeOffers.Edit();
                        AppLogger.LogInfo("Successfully update exchange offer, warehouseID=" + nWarehouseID + " and id=" + oDSPromoExchgangeOfferRow.OfferId + "");
                    }
                    
                }
                catch (Exception ex)
                {
                    DBController.Instance.RollbackTransaction();
                    AppLogger.LogError("Error Inserting Exchange offer, WarehouseID=" + nWarehouseID + " and ID=" + oDSPromoExchgangeOfferRow.OfferId + "/" + ex.Message);
                    throw (ex);
                }
            }

        }
        public void InsertPromoWarranty(DSPromoWarranty oPromoWarranty, int nWarehouseID)
        {
            foreach (DSPromoWarranty.PromoWarrantyRow oDSPromoWarrantyRow in oPromoWarranty.PromoWarranty)
            {
                try
                {
                    if (!DBController.Instance.CheckConnection())
                    {
                        DBController.Instance.OpenNewConnection();
                    }
                    PromoWarranty _oPromoWarranty = new PromoWarranty();
                    DSPromoWarranty oDSPromoWarrantyItem = new DSPromoWarranty();

                    _oPromoWarranty.WarrantyId = oDSPromoWarrantyRow.WarrantyId;
                    _oPromoWarranty.Status = oDSPromoWarrantyRow.Status;
                    _oPromoWarranty.Description = oDSPromoWarrantyRow.Description;
                    _oPromoWarranty.ExtendedWarranty = oDSPromoWarrantyRow.ExtendedWarranty;
                    _oPromoWarranty.IsActive = oDSPromoWarrantyRow.IsActive;
                    _oPromoWarranty.ToDate = oDSPromoWarrantyRow.ToDate;
                    _oPromoWarranty.FromDate = oDSPromoWarrantyRow.FromDate;
                    _oPromoWarranty.CreateDate = oDSPromoWarrantyRow.CreateDate;
                    _oPromoWarranty.CreateUserId = oDSPromoWarrantyRow.CreateUserId;

                    DataRow[] oDR = oPromoWarranty.PromoWarrntyDetail.Select("WarrantyId=" + oDSPromoWarrantyRow.WarrantyId);
                    oDSPromoWarrantyItem.Merge(oDR);
                    oDSPromoWarrantyItem.AcceptChanges();

                    foreach (DSPromoWarranty.PromoWarrntyDetailRow oPromoWarrntyDetailRow in oDSPromoWarrantyItem.PromoWarrntyDetail)
                    {
                        PromoWarrantyDetail _oPromoWarrantyDetail = new PromoWarrantyDetail();
                        _oPromoWarrantyDetail.WarrantyDetailId = oPromoWarrntyDetailRow.WarrantyDetailId;
                        _oPromoWarrantyDetail.WarrantyId = oPromoWarrntyDetailRow.WarrantyId;
                        _oPromoWarrantyDetail.ProductId = oPromoWarrntyDetailRow.ProductId;
                        _oPromoWarranty.Add(_oPromoWarrantyDetail);
                    }



                    if (CheckPromoWarranty(oDSPromoWarrantyRow.WarrantyId))
                    {
                        //= have to change this code
                        _oPromoWarranty.DeletePromoWarrantyData();
                        _oPromoWarranty.AddToPos();
                        AppLogger.LogInfo("Successfully insert promo warranty, warehouseID=" + nWarehouseID + " and id=" + oDSPromoWarrantyRow.WarrantyId + "");
                    }
                    else
                    {
                        _oPromoWarranty.Edit();
                        AppLogger.LogInfo("Successfully update promo warranty, warehouseID=" + nWarehouseID + " and id=" + oDSPromoWarrantyRow.WarrantyId + "");
                    }

                }
                catch (Exception ex)
                {
                    DBController.Instance.RollbackTransaction();
                    AppLogger.LogError("Error Inserting promo warranty, WarehouseID=" + nWarehouseID + " and ID=" + oDSPromoWarrantyRow.WarrantyId + "/" + ex.Message);
                    throw (ex);
                }
            }

        }

        public DSSalesOrder InsertDMSSalesOrder(DSSalesOrder oDSSalesOrder, int nWarehouseID)
        {
            foreach (DSSalesOrder.DMSSecondarySalesOrderRow oDMSSecondarySalesOrderRow in oDSSalesOrder.DMSSecondarySalesOrder)
            {
                try
                {
                    if (!DBController.Instance.CheckConnection())
                    {
                        DBController.Instance.OpenNewConnection();
                    }
                    DBController.Instance.BeginNewTransaction();
                    DMSSecondarySalesOrder _oDMSSecondarySalesOrder = new DMSSecondarySalesOrder();
                    DSSalesOrder oDSSalesOrderDetail = new DSSalesOrder();
                    _oDMSSecondarySalesOrder.OrderID = oDMSSecondarySalesOrderRow.OrderID;
                    _oDMSSecondarySalesOrder.OrderNo = oDMSSecondarySalesOrderRow.OrderNo;
                    _oDMSSecondarySalesOrder.WarehouseID = oDMSSecondarySalesOrderRow.WarehouseID;
                    _oDMSSecondarySalesOrder.SalesType = oDMSSecondarySalesOrderRow.SalesType;
                    _oDMSSecondarySalesOrder.CustomerID = oDMSSecondarySalesOrderRow.CustomerID;
                    _oDMSSecondarySalesOrder.ParentCustomerId = oDMSSecondarySalesOrderRow.ParentCustomerID;
                    _oDMSSecondarySalesOrder.EDD = oDMSSecondarySalesOrderRow.EDD;
                    _oDMSSecondarySalesOrder.Amount = oDMSSecondarySalesOrderRow.OrderAmount;
                    _oDMSSecondarySalesOrder.Status = oDMSSecondarySalesOrderRow.Status;
                    _oDMSSecondarySalesOrder.CreateUserID = oDMSSecondarySalesOrderRow.CreateUserID;
                    _oDMSSecondarySalesOrder.CreateDate = oDMSSecondarySalesOrderRow.CreateDate;
                    if (!oDMSSecondarySalesOrderRow.IsRefInvoiceNoNull())
                    {
                        _oDMSSecondarySalesOrder.RefInvoiceNo = oDMSSecondarySalesOrderRow.RefInvoiceNo;
                    }
                    else
                    {
                        _oDMSSecondarySalesOrder.RefInvoiceNo = "";
                    }
                    if (!oDMSSecondarySalesOrderRow.IsRefInvoiceDateNull())
                    {
                        _oDMSSecondarySalesOrder.RefInvoiceDate = oDMSSecondarySalesOrderRow.RefInvoiceDate;
                    }

                    if (!oDMSSecondarySalesOrderRow.IsUpdateUserIDNull())
                    {
                        _oDMSSecondarySalesOrder.UpdateUserID = oDMSSecondarySalesOrderRow.UpdateUserID;
                    }
                    else
                    {
                        _oDMSSecondarySalesOrder.UpdateUserID = -1;
                    }
                    if (!oDMSSecondarySalesOrderRow.IsUpdateDateNull())
                    {
                        _oDMSSecondarySalesOrder.UpdateDate = oDMSSecondarySalesOrderRow.UpdateDate;
                    }





                    if (!oDMSSecondarySalesOrderRow.IsAuthorizedByNull())
                    {
                        _oDMSSecondarySalesOrder.AuthorizedBy = oDMSSecondarySalesOrderRow.AuthorizedBy;
                    }
                    else
                    {
                        _oDMSSecondarySalesOrder.AuthorizedBy = -1;
                    }
                    if (!oDMSSecondarySalesOrderRow.IsAuthorizeDateNull())
                    {
                        _oDMSSecondarySalesOrder.AuthorizeDate = oDMSSecondarySalesOrderRow.AuthorizeDate;
                    }
                    if (!oDMSSecondarySalesOrderRow.IsAuthorizeRemarksNull())
                    {
                        _oDMSSecondarySalesOrder.AuthorizeRemarks = oDMSSecondarySalesOrderRow.AuthorizeRemarks;
                    }
                    else
                    {
                        _oDMSSecondarySalesOrder.AuthorizeRemarks = "";
                    }

                    if (!oDMSSecondarySalesOrderRow.IsOrderTypeNull())
                    {
                        _oDMSSecondarySalesOrder.OrderType = oDMSSecondarySalesOrderRow.OrderType;
                    }
                    else
                    {
                        _oDMSSecondarySalesOrder.OrderType = "";
                    }
                    DataRow[] oDR = oDSSalesOrder.DMSSecondarySalesOrderDetail.Select("OrderID= '" + oDMSSecondarySalesOrderRow.OrderID + "' and WarehouseID= '" + nWarehouseID + "'");
                    oDSSalesOrderDetail.Merge(oDR);
                    oDSSalesOrderDetail.AcceptChanges();

                    foreach (DSSalesOrder.DMSSecondarySalesOrderDetailRow oDMSSecondarySalesOrderDetailRow in oDSSalesOrderDetail.DMSSecondarySalesOrderDetail)
                    {
                        DMSSecondarySalesOrderDetail _oDMSSecondarySalesOrderDetail = new DMSSecondarySalesOrderDetail();

                        _oDMSSecondarySalesOrderDetail.OrderID = oDMSSecondarySalesOrderDetailRow.OrderID;
                        _oDMSSecondarySalesOrderDetail.ProductID = oDMSSecondarySalesOrderDetailRow.ProductID;
                        _oDMSSecondarySalesOrderDetail.WarehouseID = oDMSSecondarySalesOrderDetailRow.WarehouseID;
                        _oDMSSecondarySalesOrderDetail.OrderQty = oDMSSecondarySalesOrderDetailRow.OrderQty;
                        _oDMSSecondarySalesOrderDetail.ConfirmedQty = oDMSSecondarySalesOrderDetailRow.ConfirmedQty;
                        _oDMSSecondarySalesOrderDetail.UnitPrice = oDMSSecondarySalesOrderDetailRow.UnitPrice;
                        _oDMSSecondarySalesOrder.Add(_oDMSSecondarySalesOrderDetail);
                    }

                    _oDMSSecondarySalesOrder.Delete();
                    _oDMSSecondarySalesOrder.InsertForWEB();

                    DBController.Instance.CommitTransaction();
                    AppLogger.LogInfo("Successfully Insert DMS Sales Order, WarehouseID=" + nWarehouseID + " and OrderID=" + oDMSSecondarySalesOrderRow.OrderID + "");
                }
                catch (Exception ex)
                {
                    DBController.Instance.RollbackTransaction();
                    AppLogger.LogError("Error Inserting DMS Sales Order, WarehouseID=" + nWarehouseID + " and OrderID=" + oDMSSecondarySalesOrderRow.OrderID + "/" + ex.Message);
                    throw (ex);
                }
            }
            return oDSSalesOrder;
        }
        ///
        // Insert Product stock transaction with IMEI
        ///
        public void InsertProductStockTranWithIMEI(DSProductTransaction oDSProductTransaction)
        {
            /// Insert Product stock tran
            DSProductTransaction oDSProductTransactionItem = new DSProductTransaction();

            try
            {
                foreach (DSProductTransaction.ProductStockTranRow oProductStockTranRow in oDSProductTransaction.ProductStockTran)
                {
                    ProductTransaction _oProductTransaction = new ProductTransaction();

                    _oProductTransaction.TranNo = oProductStockTranRow.TranNo;
                    _oProductTransaction.TranDate = oProductStockTranRow.TranDate;
                    _oProductTransaction.TranTypeID = oProductStockTranRow.TranTypeId;
                    _oProductTransaction.CreateDate = oProductStockTranRow.LastUpdateDate;
                    _oProductTransaction.LastUpdateDate = oProductStockTranRow.CreateDate;
                    _oProductTransaction.LastUpdateUserID = int.Parse(oProductStockTranRow.LastUpdateUserId.ToString());
                    _oProductTransaction.ToWHID = int.Parse(oProductStockTranRow.ToWHId.ToString());
                    _oProductTransaction.ToChannelID = int.Parse(oProductStockTranRow.ToChannelID.ToString());
                    _oProductTransaction.FromWHID = int.Parse(oProductStockTranRow.FromWHId.ToString());
                    _oProductTransaction.FromChannelID = int.Parse(oProductStockTranRow.FromChannelId.ToString());
                    _oProductTransaction.UserID = int.Parse(oProductStockTranRow.UserId.ToString());
                    _oProductTransaction.Remarks = oProductStockTranRow.Remarks;
                    _oProductTransaction.HOTranID = int.Parse(oProductStockTranRow.TranId.ToString());

                    DataRow[] oDR = oDSProductTransaction.ProductStockTranItem.Select(" TranId= '" + oProductStockTranRow.TranId + "'");
                    oDSProductTransactionItem.Merge(oDR);
                    oDSProductTransactionItem.AcceptChanges();

                    foreach (DSProductTransaction.ProductStockTranItemRow oProductStockTranItemRow in oDSProductTransactionItem.ProductStockTranItem)
                    {

                        if (oProductStockTranRow.TranId == oProductStockTranItemRow.TranID)
                        {
                            ProductTransactionDetail oProductTransactionDetail = new ProductTransactionDetail();

                            oProductTransactionDetail.ProductID = int.Parse(oProductStockTranItemRow.ProductID.ToString());
                            oProductTransactionDetail.Qty = oProductStockTranItemRow.Qty;
                            oProductTransactionDetail.StockPrice = oProductStockTranItemRow.StockPrice;

                            _oProductTransaction.Add(oProductTransactionDetail);
                        }
                    }
                    if (_oProductTransaction.InsertForTransferWithIMEI_POS(false))
                    {
                    }
                    else
                    {
                        int tem = int.Parse("Create Exception");
                    }

                    ProductTransferProductSerials oPTPSs = new ProductTransferProductSerials();
                    foreach (DSProductTransaction.ProductTransferProductSerialRow oProductTransferProductSerialRow in oDSProductTransaction.ProductTransferProductSerial)
                    {
                        if (oProductStockTranRow.TranId == oProductTransferProductSerialRow.TranID)
                        {
                            ProductTransferProductSerial oPTPS = new ProductTransferProductSerial();
                            oPTPS.ProductID = int.Parse(oProductTransferProductSerialRow.ProductID.ToString());
                            oPTPS.SerialNo = int.Parse(oProductTransferProductSerialRow.SerialNo.ToString());
                            oPTPS.ProductSerialNo = oProductTransferProductSerialRow.ProductSerialNo;

                            oPTPSs.Add(oPTPS);
                        }
                    }
                    _oProductTransaction.ProdSL(oPTPSs);
                }
            }
            catch (Exception ex)
            {
                throw (ex);
            }
        }

        ///
        // Insert Product Stock
        ///
        public void InsertProductStock(DSStock oDSStock)
        {

            OleDbCommand cmd = DBController.Instance.GetCommand();

            try
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                cmd.CommandText = "Delete FROM t_ProductStock where WarehouseID=?";
                cmd.Parameters.AddWithValue("WarehouseID", Utility.CentralRetailWarehouse);
                cmd.CommandType = CommandType.Text;

                cmd.ExecuteNonQuery();
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw (ex);
            }

            foreach (DSStock.ProductStockRow oProductStockRow in oDSStock.ProductStock)
            {
                try
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    cmd.CommandText = "INSERT INTO t_ProductStock VALUES(?,?,?,?,?,?,?,?,?)";
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("ProductID", oProductStockRow.ProductID);
                    cmd.Parameters.AddWithValue("WarehouseID", oProductStockRow.WarehouseID);
                    cmd.Parameters.AddWithValue("StockType", oProductStockRow.StockType);
                    cmd.Parameters.AddWithValue("CurrentStock", oProductStockRow.CurrentStock);
                    cmd.Parameters.AddWithValue("CurrentStockValue", oProductStockRow.CurrentStockValue);
                    cmd.Parameters.AddWithValue("BookingStock", oProductStockRow.BookingStock);
                    cmd.Parameters.AddWithValue("TransitStock", oProductStockRow.TransitStock);
                    cmd.Parameters.AddWithValue("ChannelID", oProductStockRow.ChannelID);
                    cmd.Parameters.AddWithValue("Status", oProductStockRow.Status);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                catch (Exception ex)
                {
                    throw (ex);
                }
            }

        }

        ///
        // Insert User
        ///
        public void InsertUser(DSUser oDSUser)
        {

            OleDbCommand cmd = DBController.Instance.GetCommand();

            foreach (DSUser.UserRow oUserRow in oDSUser.User)
            {
                try
                {
                    cmd.Dispose();

                    cmd = DBController.Instance.GetCommand();

                    cmd.CommandText = "Delete FROM t_UserPermission where UserID=?";
                    cmd.Parameters.AddWithValue("UserID", int.Parse(oUserRow.UserID.ToString()));
                    cmd.CommandType = CommandType.Text;

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                catch (Exception ex)
                {
                    throw (ex);
                }
            }

            foreach (DSUser.UserRow oUserRow in oDSUser.User)
            {
                try
                {
                    User oUser = new User();

                    oUser.UserId = int.Parse(oUserRow.UserID.ToString());
                    oUser.UserFullName = oUserRow.UserFullName;
                    oUser.Username = oUserRow.UserName;
                    oUser.UserPassword = oUserRow.Password;
                    oUser.UserSBUs = oUserRow.UserSBUs;
                    oUser.Salt = oUserRow.Salt;
                    oUser.EmployeeID = int.Parse(oUserRow.EmployeeID.ToString());

                    if (CheckUser(oUser.UserId))
                    {
                        oUser.AddForTransfer();
                    }
                    else
                    {
                        oUser.Update(true);
                    }

                }
                catch (Exception ex)
                {
                    throw (ex);
                }
            }
            foreach (DSUser.PermissionRow oPermissionRow in oDSUser.Permission)
            {
                try
                {
                    User oUser = new User();
                    oUser.UserId = int.Parse(oPermissionRow.UserID.ToString());

                    oUser.AddPermission(oPermissionRow.PermissionKey);

                }
                catch (Exception ex)
                {
                    throw (ex);
                }
            }

        }

        ///
        // Insert Channel
        ///
        public void InsertChannel(DSChannel oDSChannel)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                cmd.CommandText = "Delete FROM t_Channel ";
                cmd.CommandType = CommandType.Text;

                cmd.ExecuteNonQuery();
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw (ex);
            }

            foreach (DSChannel.ChannelRow oChannelRow in oDSChannel.Channel)
            {
                try
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    cmd.CommandText = "INSERT INTO t_Channel VALUES(?,?,?,?,?,?)";
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("ChannelID", oChannelRow.ChannelID);
                    cmd.Parameters.AddWithValue("ChannelCode", oChannelRow.ChannelCode);
                    cmd.Parameters.AddWithValue("ChannelDescription", oChannelRow.ChannelDescription);
                    cmd.Parameters.AddWithValue("IsActive", oChannelRow.IsActive);
                    cmd.Parameters.AddWithValue("ChannelType", oChannelRow.ChannelType);
                    if (oChannelRow.SBUID != -1)
                        cmd.Parameters.AddWithValue("SBUID", oChannelRow.SBUID);
                    else cmd.Parameters.AddWithValue("SBUID", null);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                catch (Exception ex)
                {
                    throw (ex);
                }
            }

        }

        ///
        // Insert SBU
        ///
        public void InsertSBU(DSSBU oDSSBU)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                cmd.CommandText = "Delete FROM t_SBU ";
                cmd.CommandType = CommandType.Text;

                cmd.ExecuteNonQuery();
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw (ex);
            }

            foreach (DSSBU.SBURow oSBURow in oDSSBU.SBU)
            {
                try
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    cmd.CommandText = "INSERT INTO t_SBU VALUES(?,?,?,?,?,?,?)";
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("SBUID", oSBURow.SBUID);
                    cmd.Parameters.AddWithValue("IsActive", oSBURow.IsActive);
                    cmd.Parameters.AddWithValue("SBUCode", oSBURow.SBUCode);
                    cmd.Parameters.AddWithValue("SBUName", oSBURow.SBUName);
                    cmd.Parameters.AddWithValue("CompanyID", oSBURow.CompanyID);
                    cmd.Parameters.AddWithValue("NextVatChallanNo", null);
                    cmd.Parameters.AddWithValue("IsSystem", oSBURow.IsSystem);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                catch (Exception ex)
                {
                    throw (ex);
                }
            }

        }

        ///
        // Insert Market Group
        ///
        public void InsertMarketGroup(DSMarketGroup oDSMarketGroup)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                cmd.CommandText = "Delete FROM t_MarketGroup ";
                cmd.CommandType = CommandType.Text;

                cmd.ExecuteNonQuery();
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw (ex);
            }

            foreach (DSMarketGroup.MarketGroupRow oMarketGroupRow in oDSMarketGroup.MarketGroup)
            {
                try
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    cmd.CommandText = "INSERT INTO t_MarketGroup VALUES(?,?,?,?,?,?,?,?)";
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("MarketGroupID", oMarketGroupRow.MarketGroupID);
                    if (oMarketGroupRow.Pos != -1)
                        cmd.Parameters.AddWithValue("Pos", oMarketGroupRow.Pos);
                    else cmd.Parameters.AddWithValue("Pos", null);
                    cmd.Parameters.AddWithValue("MarketGroupCode", oMarketGroupRow.MarketGroupCode);
                    cmd.Parameters.AddWithValue("MarketGroupDesc", oMarketGroupRow.MarketGroupDesc);
                    cmd.Parameters.AddWithValue("MarketGroupType", oMarketGroupRow.MarketGroupType);
                    if (oMarketGroupRow.ParentID != -1)
                        cmd.Parameters.AddWithValue("ParentID", oMarketGroupRow.ParentID);
                    else cmd.Parameters.AddWithValue("ParentID", null);
                    if (oMarketGroupRow.EmployeeID != -1)
                        cmd.Parameters.AddWithValue("EmployeeID", oMarketGroupRow.EmployeeID);
                    else cmd.Parameters.AddWithValue("EmployeeID", null);
                    cmd.Parameters.AddWithValue("ChannelID", oMarketGroupRow.ChannelID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                catch (Exception ex)
                {
                    throw (ex);
                }
            }

        }
        public DSReceivableOutletData GetReceivableOutletData(DSReceivableOutletData oDSReceivableOutletData, int nWarehouseID)
        {

            OleDbCommand cmd = DBController.Instance.GetCommand();

            try
            {
                cmd.CommandText = " Select * from t_Showroom Where WarehouseID=" + nWarehouseID + " ";

                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                if (reader.Read())
                {
                    DSReceivableOutletData.DataRow oDataRow = oDSReceivableOutletData.Data.NewDataRow();

                    oDataRow.DataCategory = (int)reader["ReceivableDataCategory"];
                    oDataRow.DataType = (int)reader["ReceivableDataType"];

                    oDSReceivableOutletData.Data.AddDataRow(oDataRow);
                }
                oDSReceivableOutletData.AcceptChanges();

                reader.Close();

            }

            catch (Exception ex)
            {
                throw (ex);
            }
            return oDSReceivableOutletData;
        }
        ///
        // Insert Geolocation
        ///
        public void InsertGeoLocation(DSGeoLocation oDSGeoLocation)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                cmd.CommandText = "Delete FROM t_GeoLocation ";
                cmd.CommandType = CommandType.Text;

                cmd.ExecuteNonQuery();
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw (ex);
            }

            foreach (DSGeoLocation.GeoLocationRow oGeoLocationRow in oDSGeoLocation.GeoLocation)
            {
                try
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    cmd.CommandText = "INSERT INTO t_GeoLocation VALUES(?,?,?,?,?,?)";
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("GeoLocationID", oGeoLocationRow.GeoLocationID);
                    cmd.Parameters.AddWithValue("GeoLocationCode", oGeoLocationRow.GeoLocationCode);
                    cmd.Parameters.AddWithValue("GeoLocationName", oGeoLocationRow.GeoLocationName);
                    cmd.Parameters.AddWithValue("GeoLocationType", oGeoLocationRow.GeoLocationTypeID);
                    if (oGeoLocationRow.ParentID != -1)
                        cmd.Parameters.AddWithValue("ParentID", oGeoLocationRow.ParentID);
                    else cmd.Parameters.AddWithValue("ParentID", null);
                    cmd.Parameters.AddWithValue("GeoLocationCategory", oGeoLocationRow.GeoLocationCategory);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                catch (Exception ex)
                {
                    throw (ex);
                }
            }

        }

        ///
        // Insert Customer Type
        ///
        public void InsertCustomerType(DSCustomerType oDSCustomerType)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            //try
            //{
            //    cmd.Dispose();
            //    cmd = DBController.Instance.GetCommand();

            //    cmd.CommandText = "Delete FROM t_CustomerType ";
            //    cmd.CommandType = CommandType.Text;

            //    cmd.ExecuteNonQuery();
            //    cmd.Dispose();
            //}
            //catch (Exception ex)
            //{
            //    throw (ex);
            //}

            foreach (DSCustomerType.CustomerTypeRow oCustomerTypeRow in oDSCustomerType.CustomerType)
            {
                try
                {

                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    cmd.CommandText = "Delete FROM t_CustomerType where CustTypeID=" + oCustomerTypeRow.CustTypeID + "";
                    cmd.CommandType = CommandType.Text;

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();

                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    cmd.CommandText = "INSERT INTO t_CustomerType (CustTypeID,CustTypeCode,CustTypeDescription,ChannelID,IsActive,Pos,ReportingChannelID,SalesType) VALUES(?,?,?,?,?,?,?,?)";
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("CustTypeID", oCustomerTypeRow.CustTypeID);
                    cmd.Parameters.AddWithValue("CustTypeCode", oCustomerTypeRow.CustTypeCode);
                    cmd.Parameters.AddWithValue("CustTypeDescription", oCustomerTypeRow.CustTypeDescription);
                    cmd.Parameters.AddWithValue("ChannelID", oCustomerTypeRow.ChannelID);
                    cmd.Parameters.AddWithValue("IsActive", oCustomerTypeRow.IsActive);
                    cmd.Parameters.AddWithValue("Pos", oCustomerTypeRow.Pos);
                    if (oCustomerTypeRow.ReportingChannelID != -1)
                        cmd.Parameters.AddWithValue("ReportingChannelID", oCustomerTypeRow.ReportingChannelID);
                    else cmd.Parameters.AddWithValue("ReportingChannelID", null);

                    if (oCustomerTypeRow.SalesType != -1)
                        cmd.Parameters.AddWithValue("SalesType", oCustomerTypeRow.SalesType);
                    else cmd.Parameters.AddWithValue("SalesType", null);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                catch (Exception ex)
                {
                    throw (ex);
                }
            }

        }

        ///
        // Insert Customer 
        ///
        public void InsertCustomer(DSCustomer oDSCustomer)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();

            foreach (DSCustomer.CustomerRow oCustomerRow in oDSCustomer.Customer)
            {
                if (CheckCustomer(oCustomerRow.CustomerID))
                {
                    try
                    {

                        cmd.Dispose();
                        cmd = DBController.Instance.GetCommand();

                        cmd.CommandText = "INSERT INTO t_Customer (CustomerID,ParentCustomerID,CustomerCode,CustomerName, " +
                            "CustomerAddress,CustomerTelephone,CustomerFax,CellPhoneNumber,ContactPerson,ContactDesignation,IsActive, " +
                            "CustTypeID,MarketGroupID,GeoLocationID,TaxNumber) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("CustomerID", oCustomerRow.CustomerID);
                        if (oCustomerRow.ParentCustomerID != -1)
                            cmd.Parameters.AddWithValue("ParentCustomerID", oCustomerRow.ParentCustomerID);
                        else cmd.Parameters.AddWithValue("ParentCustomerID", null);
                        cmd.Parameters.AddWithValue("CustomerCode", oCustomerRow.CustomerCode);
                        cmd.Parameters.AddWithValue("CustomerName", oCustomerRow.CustomerName);
                        cmd.Parameters.AddWithValue("CustomerAddress", oCustomerRow.CustomerAddress);
                        cmd.Parameters.AddWithValue("CustomerTelephone", oCustomerRow.CustomerTelephone);
                        cmd.Parameters.AddWithValue("CustomerFax", oCustomerRow.CustomerFax);
                        cmd.Parameters.AddWithValue("CellPhoneNumber", oCustomerRow.CellPhoneNumber);
                        cmd.Parameters.AddWithValue("ContactPerson", oCustomerRow.ContactPerson);
                        cmd.Parameters.AddWithValue("ContactDesignation", oCustomerRow.ContactDesignation);
                        cmd.Parameters.AddWithValue("IsActive", oCustomerRow.IsActive);
                        cmd.Parameters.AddWithValue("CustTypeID", oCustomerRow.CustTypeID);
                        cmd.Parameters.AddWithValue("MarketGroupID", oCustomerRow.MarketGroupID);
                        cmd.Parameters.AddWithValue("GeoLocationID", oCustomerRow.GeoLocationID);
                        cmd.Parameters.AddWithValue("TaxNumber", oCustomerRow.TaxNumber);

                        cmd.ExecuteNonQuery();
                        cmd.Dispose();
                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }

                }
                else
                {
                    try
                    {

                        cmd.Dispose();
                        cmd = DBController.Instance.GetCommand();

                        cmd.CommandText = "Update t_Customer Set ParentCustomerID=?,CustomerCode=?,CustomerName=?,CustomerAddress=?,CustomerTelephone=?, "
                                           + " CustomerFax=?,CellPhoneNumber=?,ContactPerson=?,ContactDesignation=?,IsActive=?,CustTypeID=?,MarketGroupID=?,"
                                           + " GeoLocationID=? Where CustomerID=? ";
                        cmd.CommandType = CommandType.Text;

                        if (oCustomerRow.ParentCustomerID != -1)
                            cmd.Parameters.AddWithValue("ParentCustomerID", oCustomerRow.ParentCustomerID);
                        else cmd.Parameters.AddWithValue("ParentCustomerID", null);
                        cmd.Parameters.AddWithValue("CustomerCode", oCustomerRow.CustomerCode);
                        cmd.Parameters.AddWithValue("CustomerName", oCustomerRow.CustomerName);
                        cmd.Parameters.AddWithValue("CustomerAddress", oCustomerRow.CustomerAddress);
                        cmd.Parameters.AddWithValue("CustomerTelephone", oCustomerRow.CustomerTelephone);
                        cmd.Parameters.AddWithValue("CustomerFax", oCustomerRow.CustomerFax);
                        cmd.Parameters.AddWithValue("CellPhoneNumber", oCustomerRow.CellPhoneNumber);
                        cmd.Parameters.AddWithValue("ContactPerson", oCustomerRow.ContactPerson);
                        cmd.Parameters.AddWithValue("ContactDesignation", oCustomerRow.ContactDesignation);
                        cmd.Parameters.AddWithValue("IsActive", oCustomerRow.IsActive);
                        cmd.Parameters.AddWithValue("CustTypeID", oCustomerRow.CustTypeID);
                        cmd.Parameters.AddWithValue("MarketGroupID", oCustomerRow.MarketGroupID);
                        cmd.Parameters.AddWithValue("GeoLocationID", oCustomerRow.GeoLocationID);

                        cmd.Parameters.AddWithValue("CustomerID", oCustomerRow.CustomerID);

                        cmd.ExecuteNonQuery();
                        cmd.Dispose();
                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }

                }
            }
        }

        public void InsertBank(DSBank oDSBank)
        {

            foreach (DSBank.BankRow oBankRow in oDSBank.Bank)
            {

                Bank oBank = new Bank();

                oBank.BankID = oBankRow.BankID;
                oBank.Code = oBankRow.Code;
                oBank.Name = oBankRow.Name;
                oBank.Description = oBankRow.Discription;
                oBank.IsEMI = oBankRow.IsEMI;
                try
                {
                    if (CheckBank(oBankRow.BankID))
                    {
                        oBank.Add();
                        AppLogger.LogInfo("Successfully Insert Bank");
                    }
                    else
                    {
                        oBank.Update();
                        AppLogger.LogInfo("Successfully Update Bank");
                    }
                }
                catch (Exception ex)
                {
                    AppLogger.LogError("Error Inserting/Updating Bank /" + ex.Message);
                    throw (ex);
                }
            }
        }

        public void InsertShowroom(DSShowroom oDSShowroom)
        {

            foreach (DSShowroom.ShowroomRow oShowroomRow in oDSShowroom.Showroom)
            {

                Showroom oShowroom = new Showroom();

                oShowroom.ShowroomID = oShowroomRow.ShowroomID;
                oShowroom.PositionNo = oShowroomRow.PositionNo;
                oShowroom.ShowroomCode = oShowroomRow.ShowroomCode;
                oShowroom.ShowroomName = oShowroomRow.ShowroomName;
                oShowroom.ShowroomType = oShowroomRow.ShowroomType;
                oShowroom.ShowroomAddress = oShowroomRow.ShowroomAddress;
                oShowroom.Telephone = oShowroomRow.Telephone;
                oShowroom.Email = oShowroomRow.Email;
                oShowroom.WarehouseID = oShowroomRow.WarehouseID;
                oShowroom.ManagerID = oShowroomRow.ManagerID;
                oShowroom.IsActive = oShowroomRow.IsActive;
                oShowroom.DistanceType = oShowroomRow.DistanceType;
                oShowroom.CustomerID = oShowroomRow.CustomerID;
                oShowroom.ChannelID = oShowroomRow.ChannelID;
                oShowroom.MobileNo = oShowroomRow.MobileNo;
                oShowroom.IsPOSActive = oShowroomRow.IsPOSActive;



                try
                {
                    if (CheckShowroom(oShowroomRow.ShowroomID))
                    {
                        oShowroom.Add();
                        AppLogger.LogInfo("Successfully Insert Showroom");
                    }
                    else
                    {
                        oShowroom.Edit();
                        AppLogger.LogInfo("Successfully Update Showroom");
                    }
                }
                catch (Exception ex)
                {
                    AppLogger.LogError("Error Inserting/Updating Showroom /" + ex.Message);
                    throw (ex);
                }
            }
        }
        public void InsertUnsoldDefectiveProduct(DSUnsoldDefectiveProduct oDSUnsoldDefectiveProduct)
        {

            foreach (DSUnsoldDefectiveProduct.UnsoldDefectiveProductRow oUnsoldDefectiveProductRow in oDSUnsoldDefectiveProduct.UnsoldDefectiveProduct)
            {

                UnsoldDefectiveProduct oUnsoldDefectiveProduct = new UnsoldDefectiveProduct();

                oUnsoldDefectiveProduct.DefectiveID = oUnsoldDefectiveProductRow.DefectiveID;
                oUnsoldDefectiveProduct.DefectiveNo = oUnsoldDefectiveProductRow.DefectiveNo;
                oUnsoldDefectiveProduct.WarehouseID = oUnsoldDefectiveProductRow.WarehouseID;
                oUnsoldDefectiveProduct.ProductID = oUnsoldDefectiveProductRow.ProductID;
                oUnsoldDefectiveProduct.BarcodeSL = oUnsoldDefectiveProductRow.BarcodeSL;
                oUnsoldDefectiveProduct.DefectiveType = oUnsoldDefectiveProductRow.DefectiveType;
                oUnsoldDefectiveProduct.Fault = oUnsoldDefectiveProductRow.Fault;
                oUnsoldDefectiveProduct.Reason = oUnsoldDefectiveProductRow.Reason;
                if (!oUnsoldDefectiveProductRow.IsRemarksNull())
                    oUnsoldDefectiveProduct.Remarks = oUnsoldDefectiveProductRow.Remarks;
                if (!oUnsoldDefectiveProductRow.IsProposeDicAmountNull())
                    oUnsoldDefectiveProduct.ProposeDicAmount = oUnsoldDefectiveProductRow.ProposeDicAmount;
                oUnsoldDefectiveProduct.Status = oUnsoldDefectiveProductRow.Status;
                oUnsoldDefectiveProduct.CreateUserID = oUnsoldDefectiveProductRow.CreateUserID;
                oUnsoldDefectiveProduct.CreateDate = oUnsoldDefectiveProductRow.CreateDate;
                oUnsoldDefectiveProduct.RefTranNo = oUnsoldDefectiveProductRow.RefTranNo;
                oUnsoldDefectiveProduct.RefTranDate = oUnsoldDefectiveProductRow.RefTranDate;
                if (!oUnsoldDefectiveProductRow.IsJobNoNull())
                    oUnsoldDefectiveProduct.JobNo = oUnsoldDefectiveProductRow.JobNo;

                if (!oUnsoldDefectiveProductRow.IsApproveDicAmountNull())
                    oUnsoldDefectiveProduct.ApproveDicAmount = oUnsoldDefectiveProductRow.ApproveDicAmount;
                if (!oUnsoldDefectiveProductRow.IsApproveByNull())
                    oUnsoldDefectiveProduct.ApproveBy = oUnsoldDefectiveProductRow.ApproveBy;
                if (!oUnsoldDefectiveProductRow.IsApproveDateNull())
                    oUnsoldDefectiveProduct.ApproveDate = oUnsoldDefectiveProductRow.ApproveDate;
                if (!oUnsoldDefectiveProductRow.IsRefInvoiceNoNull())
                    oUnsoldDefectiveProduct.RefInvoiceNo = oUnsoldDefectiveProductRow.RefInvoiceNo;
                if (!oUnsoldDefectiveProductRow.IsRefInvoiceDateNull())
                    oUnsoldDefectiveProduct.RefInvoiceDate = oUnsoldDefectiveProductRow.RefInvoiceDate;
                if (!oUnsoldDefectiveProductRow.IsDefectiveCategoryNull())
                    oUnsoldDefectiveProduct.DefectiveCategory = oUnsoldDefectiveProductRow.DefectiveCategory;
                if (!oUnsoldDefectiveProductRow.IsAssessmentFindingsNull())
                    oUnsoldDefectiveProduct.AssessmentFindings = oUnsoldDefectiveProductRow.AssessmentFindings;
                if (!oUnsoldDefectiveProductRow.IsIsRepairableNull())
                    oUnsoldDefectiveProduct.IsRepairable = oUnsoldDefectiveProductRow.IsRepairable;
                if (!oUnsoldDefectiveProductRow.IsAccessoriesNull())
                    oUnsoldDefectiveProduct.Accessories = oUnsoldDefectiveProductRow.Accessories;
                if (!oUnsoldDefectiveProductRow.IsTechRecommandationNull())
                    oUnsoldDefectiveProduct.TechRecommandation = oUnsoldDefectiveProductRow.TechRecommandation;
                if (!oUnsoldDefectiveProductRow.IsTechRemarksNull())
                    oUnsoldDefectiveProduct.TechRemarks = oUnsoldDefectiveProductRow.TechRemarks;
                if (!oUnsoldDefectiveProductRow.IsIsLocallySaleableNull())
                    oUnsoldDefectiveProduct.IsLocallySaleable = oUnsoldDefectiveProductRow.IsLocallySaleable;
                if (!oUnsoldDefectiveProductRow.IsPaneltyAmountNull())
                    oUnsoldDefectiveProduct.PaneltyAmount = oUnsoldDefectiveProductRow.PaneltyAmount;
                if (!oUnsoldDefectiveProductRow.IsIsLocallyRepairedNull())
                    oUnsoldDefectiveProduct.IsLocallyRepaired = oUnsoldDefectiveProductRow.IsLocallyRepaired;
                if (!oUnsoldDefectiveProductRow.IsRepairStatusNull())
                    oUnsoldDefectiveProduct.RepairStatus = oUnsoldDefectiveProductRow.RepairStatus;
                if (!oUnsoldDefectiveProductRow.IsOriginalSLNull())
                    oUnsoldDefectiveProduct.OriginalSL = oUnsoldDefectiveProductRow.OriginalSL;
                if (!oUnsoldDefectiveProductRow.IsIsPenaltyApplicableNull())
                    oUnsoldDefectiveProduct.IsPenaltyApplicable = oUnsoldDefectiveProductRow.IsPenaltyApplicable;
                if (!oUnsoldDefectiveProductRow.IsIsDefectiveAcknowledgedNull())
                    oUnsoldDefectiveProduct.IsDefectiveAcknowledged = oUnsoldDefectiveProductRow.IsDefectiveAcknowledged;
                if (!oUnsoldDefectiveProductRow.IsAcknowledgmentRemarksNull())
                    oUnsoldDefectiveProduct.AcknowledgmentRemarks = oUnsoldDefectiveProductRow.AcknowledgmentRemarks;
                if (!oUnsoldDefectiveProductRow.IsExpSalesDateNull())
                    oUnsoldDefectiveProduct.ExpSalesDate = oUnsoldDefectiveProductRow.ExpSalesDate;
                if (!oUnsoldDefectiveProductRow.IsFromWHNull())
                    oUnsoldDefectiveProduct.FromWH = oUnsoldDefectiveProductRow.FromWH;
                //else oUnsoldDefectiveProduct.FromWH = null;
                if (!oUnsoldDefectiveProductRow.IsToWHNull())
                    oUnsoldDefectiveProduct.ToWH = oUnsoldDefectiveProductRow.ToWH;
                //else oUnsoldDefectiveProduct.ToWH = null;

                try
                {

                    if (oUnsoldDefectiveProduct.CheckDefectiveIDHOEnd())
                    {
                        oUnsoldDefectiveProduct.EditStatusForDatatransfer();
                        AppLogger.LogInfo("Successfully Update Unsold Defective Product");
                    }
                    else
                    {
                        oUnsoldDefectiveProduct.AddForWeb();
                        AppLogger.LogInfo("Successfully Insert Unsold Defective Product");
                    }

                }
                catch (Exception ex)
                {
                    AppLogger.LogError("Error Updating Unsold Defective Product /" + ex.Message);
                    throw (ex);
                }
            }
        }
        public void InsertUnsoldDefectiveProductNew(DSUnsoldDefectiveProduct oDSUnsoldDefectiveProduct)
        {

            foreach (DSUnsoldDefectiveProduct.UnsoldDefectiveProductRow oUnsoldDefectiveProductRow in oDSUnsoldDefectiveProduct.UnsoldDefectiveProduct)
            {

                UnsoldDefectiveProduct oUnsoldDefectiveProduct = new UnsoldDefectiveProduct();

                oUnsoldDefectiveProduct.DefectiveID = oUnsoldDefectiveProductRow.DefectiveID;
                oUnsoldDefectiveProduct.DefectiveNo = oUnsoldDefectiveProductRow.DefectiveNo;
                oUnsoldDefectiveProduct.WarehouseID = oUnsoldDefectiveProductRow.WarehouseID;
                oUnsoldDefectiveProduct.ProductID = oUnsoldDefectiveProductRow.ProductID;
                oUnsoldDefectiveProduct.BarcodeSL = oUnsoldDefectiveProductRow.BarcodeSL;
                oUnsoldDefectiveProduct.DefectiveType = oUnsoldDefectiveProductRow.DefectiveType;
                oUnsoldDefectiveProduct.Fault = oUnsoldDefectiveProductRow.Fault;
                oUnsoldDefectiveProduct.Reason = oUnsoldDefectiveProductRow.Reason;
                if (!oUnsoldDefectiveProductRow.IsRemarksNull())
                    oUnsoldDefectiveProduct.Remarks = oUnsoldDefectiveProductRow.Remarks;
                if (!oUnsoldDefectiveProductRow.IsProposeDicAmountNull())
                    oUnsoldDefectiveProduct.ProposeDicAmount = oUnsoldDefectiveProductRow.ProposeDicAmount;
                oUnsoldDefectiveProduct.Status = oUnsoldDefectiveProductRow.Status;
                oUnsoldDefectiveProduct.CreateUserID = oUnsoldDefectiveProductRow.CreateUserID;
                oUnsoldDefectiveProduct.CreateDate = oUnsoldDefectiveProductRow.CreateDate;
                oUnsoldDefectiveProduct.RefTranNo = oUnsoldDefectiveProductRow.RefTranNo;
                oUnsoldDefectiveProduct.RefTranDate = oUnsoldDefectiveProductRow.RefTranDate;
                if (!oUnsoldDefectiveProductRow.IsJobNoNull())
                    oUnsoldDefectiveProduct.JobNo = oUnsoldDefectiveProductRow.JobNo;

                if (!oUnsoldDefectiveProductRow.IsApproveDicAmountNull())
                    oUnsoldDefectiveProduct.ApproveDicAmount = oUnsoldDefectiveProductRow.ApproveDicAmount;
                if (!oUnsoldDefectiveProductRow.IsApproveByNull())
                    oUnsoldDefectiveProduct.ApproveBy = oUnsoldDefectiveProductRow.ApproveBy;
                if (!oUnsoldDefectiveProductRow.IsApproveDateNull())
                    oUnsoldDefectiveProduct.ApproveDate = oUnsoldDefectiveProductRow.ApproveDate;
                if (!oUnsoldDefectiveProductRow.IsRefInvoiceNoNull())
                    oUnsoldDefectiveProduct.RefInvoiceNo = oUnsoldDefectiveProductRow.RefInvoiceNo;
                if (!oUnsoldDefectiveProductRow.IsRefInvoiceDateNull())
                    oUnsoldDefectiveProduct.RefInvoiceDate = oUnsoldDefectiveProductRow.RefInvoiceDate;
                if (!oUnsoldDefectiveProductRow.IsDefectiveCategoryNull())
                    oUnsoldDefectiveProduct.DefectiveCategory = oUnsoldDefectiveProductRow.DefectiveCategory;
                if (!oUnsoldDefectiveProductRow.IsAssessmentFindingsNull())
                    oUnsoldDefectiveProduct.AssessmentFindings = oUnsoldDefectiveProductRow.AssessmentFindings;

                if (!oUnsoldDefectiveProductRow.IsAccessoriesNull())
                    oUnsoldDefectiveProduct.Accessories = oUnsoldDefectiveProductRow.Accessories;
                if (!oUnsoldDefectiveProductRow.IsTechRecommandationNull())
                    oUnsoldDefectiveProduct.TechRecommandation = oUnsoldDefectiveProductRow.TechRecommandation;
                if (!oUnsoldDefectiveProductRow.IsTechRemarksNull())
                    oUnsoldDefectiveProduct.TechRemarks = oUnsoldDefectiveProductRow.TechRemarks;
                if (!oUnsoldDefectiveProductRow.IsIsLocallySaleableNull())
                    oUnsoldDefectiveProduct.IsLocallySaleable = oUnsoldDefectiveProductRow.IsLocallySaleable;
                if (!oUnsoldDefectiveProductRow.IsPaneltyAmountNull())
                    oUnsoldDefectiveProduct.PaneltyAmount = oUnsoldDefectiveProductRow.PaneltyAmount;

                if (!oUnsoldDefectiveProductRow.IsOriginalSLNull())
                    oUnsoldDefectiveProduct.OriginalSL = oUnsoldDefectiveProductRow.OriginalSL;
                if (!oUnsoldDefectiveProductRow.IsIsPenaltyApplicableNull())
                    oUnsoldDefectiveProduct.IsPenaltyApplicable = oUnsoldDefectiveProductRow.IsPenaltyApplicable;
                if (!oUnsoldDefectiveProductRow.IsIsDefectiveAcknowledgedNull())
                    oUnsoldDefectiveProduct.IsDefectiveAcknowledged = oUnsoldDefectiveProductRow.IsDefectiveAcknowledged;
                if (!oUnsoldDefectiveProductRow.IsAcknowledgmentRemarksNull())
                    oUnsoldDefectiveProduct.AcknowledgmentRemarks = oUnsoldDefectiveProductRow.AcknowledgmentRemarks;
                if (!oUnsoldDefectiveProductRow.IsExpSalesDateNull())
                    oUnsoldDefectiveProduct.ExpSalesDate = oUnsoldDefectiveProductRow.ExpSalesDate;
                if (!oUnsoldDefectiveProductRow.IsFromWHNull())
                    oUnsoldDefectiveProduct.FromWH = oUnsoldDefectiveProductRow.FromWH;
                if (!oUnsoldDefectiveProductRow.IsToWHNull())
                    oUnsoldDefectiveProduct.ToWH = oUnsoldDefectiveProductRow.ToWH;

                try
                {

                    if (oUnsoldDefectiveProduct.CheckDefectiveIDHOEndNew())
                    {
                        oUnsoldDefectiveProduct.EditStatusForDatatransferNew();
                        AppLogger.LogInfo("Successfully Update Unsold Defective Product");
                    }
                    else
                    {
                        oUnsoldDefectiveProduct.AddForWebNew();
                        AppLogger.LogInfo("Successfully Insert Unsold Defective Product");
                    }

                }
                catch (Exception ex)
                {
                    AppLogger.LogError("Error Updating Unsold Defective Product /" + ex.Message);
                    throw (ex);
                }
            }
        }
        public void InsertPaymentMode(DSPaymentMode oDSPaymentMode)
        {

            foreach (DSPaymentMode.PaymentModeRow oPaymentModeRow in oDSPaymentMode.PaymentMode)
            {
                PaymentMode oPaymentMode = new PaymentMode();
                oPaymentMode.PaymentModeID = oPaymentModeRow.PaymentModeID;
                oPaymentMode.PaymentModeName = oPaymentModeRow.PaymentModeName;
                oPaymentMode.IsActive = oPaymentModeRow.IsActive;
                oPaymentMode.CreateUserID = oPaymentModeRow.CreateUserID;
                oPaymentMode.CreateDate = oPaymentModeRow.CreateDate;
                oPaymentMode.SalesType = oPaymentModeRow.SalesType;

                oPaymentMode.IsReceivableItem = oPaymentModeRow.IsReceivableItem;
                oPaymentMode.IsFinancialInstitution = oPaymentModeRow.IsFinancialInstitution;
                oPaymentMode.BankID = oPaymentModeRow.BankID;
                oPaymentMode.IsMandatoryInstrumentNo = oPaymentModeRow.IsMandatoryInstrumentNo;

                oPaymentMode.IsEligableforAdvance = oPaymentModeRow.IsEligableforAdvance;
                oPaymentMode.PaymentModeType = oPaymentModeRow.PaymentModeType;

                try
                {
                    if (oPaymentMode.CheckPaymentMode())
                    {
                        oPaymentMode.UpdateForPOS();
                        AppLogger.LogInfo("Successfully Update Payment Mode");
                    }
                    else
                    {
                        oPaymentMode.AddforPOS();
                        AppLogger.LogInfo("Successfully Insert Payment Mode");
                    }
                }
                catch (Exception ex)
                {
                    AppLogger.LogError("Error Inserting/Updating Payment Mode /" + ex.Message);
                    throw (ex);
                }
            }
        }
        public void InsertSalesPromotionType(DSSalesPromotionType oDSSalesPromotionType)
        {

            foreach (DSSalesPromotionType.SalesPromotionTypeRow oSalesPromotionTypeRow in oDSSalesPromotionType.SalesPromotionType)
            {
                SalesPromotionType oSalesPromotionType = new SalesPromotionType();


                oSalesPromotionType.SalesPromotionTypeID = oSalesPromotionTypeRow.SalesPromotionTypeID;
                oSalesPromotionType.SalesPromotionTypeName = oSalesPromotionTypeRow.SalesPromotionTypeName;
                oSalesPromotionType.IsActive = oSalesPromotionTypeRow.IsActive;
                oSalesPromotionType.CreateUserID = oSalesPromotionTypeRow.CreateUserID;
                oSalesPromotionType.CreateDate = oSalesPromotionTypeRow.CreateDate;

                try
                {
                    if (oSalesPromotionType.CheckSalesPromotionType())
                    {
                        oSalesPromotionType.UpdateForPOS();
                        AppLogger.LogInfo("Successfully Update Sales Promotion Type");
                    }
                    else
                    {
                        oSalesPromotionType.Add();
                        AppLogger.LogInfo("Successfully Insert Sales Promotion Type");
                    }
                }
                catch (Exception ex)
                {
                    AppLogger.LogError("Error Inserting/Updating Sales Promotion Type /" + ex.Message);
                    throw (ex);
                }
            }
        }

        public DSPromoDiscount InsertPromoDiscount(DSPromoDiscount oDSPromoDiscount, int nWHID)
        {
            DBController.Instance.BeginNewTransaction();
            /// Insert Special Discount from outlet to HO

            foreach (DSPromoDiscount.PromoDiscountSpecialRow oPromoDiscountSpecialRow in oDSPromoDiscount.PromoDiscountSpecial)
            {
                OleDbCommand cmd = DBController.Instance.GetCommand();

                try
                {
                    ConsumerPromotionEngine oPromoDiscountSpecial = new ConsumerPromotionEngine();
                    oPromoDiscountSpecial.SpecialDiscountID = oPromoDiscountSpecialRow.SpecialDiscountID;
                    oPromoDiscountSpecial.ApprovalNumber = oPromoDiscountSpecialRow.ApprovalNumber;
                    oPromoDiscountSpecial.ChannelID = oPromoDiscountSpecialRow.ChannelID;
                    oPromoDiscountSpecial.CustomerID = oPromoDiscountSpecialRow.CustomerID;
                    oPromoDiscountSpecial.Type = oPromoDiscountSpecialRow.Type;
                    oPromoDiscountSpecial.ConsumerID = oPromoDiscountSpecialRow.ConsumerID;
                    oPromoDiscountSpecial.WarehouseID = nWHID;
                    oPromoDiscountSpecial.Amount = oPromoDiscountSpecialRow.Amount;
                    oPromoDiscountSpecial.IsApplicableB2BDiscount = oPromoDiscountSpecialRow.IsApplicableB2BDiscount;
                    oPromoDiscountSpecial.Status = oPromoDiscountSpecialRow.Status;
                    oPromoDiscountSpecial.CreateUserID = oPromoDiscountSpecialRow.CreateUserID;
                    oPromoDiscountSpecial.CreateDate = oPromoDiscountSpecialRow.CreateDate;

                    if (oPromoDiscountSpecialRow.IsApproveUserIDNull())
                        oPromoDiscountSpecial.ApproveUserID = -1;
                    else oPromoDiscountSpecial.ApproveUserID = oPromoDiscountSpecialRow.ApproveUserID;

                    if (oPromoDiscountSpecialRow.IsApproveDateNull())
                        oPromoDiscountSpecial.ApproveDate = null;
                    else oPromoDiscountSpecial.ApproveDate = oPromoDiscountSpecialRow.ApproveDate;
                    oPromoDiscountSpecial.Reason = oPromoDiscountSpecialRow.Reason;
                    oPromoDiscountSpecial.ApproveRemarks = oPromoDiscountSpecialRow.ApproveRemarks;
                    oPromoDiscountSpecial.AuthorityID = oPromoDiscountSpecialRow.AuthorityID;

                    oPromoDiscountSpecial.DiscountType = oPromoDiscountSpecialRow.DiscountType;
                    oPromoDiscountSpecial.ProductID = oPromoDiscountSpecialRow.ProductID;
                    oPromoDiscountSpecial.EMITenureID = oPromoDiscountSpecialRow.EMITenureID;
                    oPromoDiscountSpecial.Terminal = oPromoDiscountSpecialRow.Terminal;


                    if (oPromoDiscountSpecial.CheckSpacialDiscountHOEnd())
                    {
                        oPromoDiscountSpecial.UpdateSpacialDiscount();
                        AppLogger.LogInfo("Successfully Insert Spacial Discount (POST) (SpecialDiscountID=" + oPromoDiscountSpecial.SpecialDiscountID + " and WarehouseID=" + oPromoDiscountSpecial.WarehouseID + ")");
                    }
                    else
                    {

                        oPromoDiscountSpecial.AddSpacialDiscountHO();
                        AppLogger.LogInfo("Successfully Insert Spacial Discount (SpecialDiscountID=" + oPromoDiscountSpecial.SpecialDiscountID + " and WarehouseID=" + oPromoDiscountSpecial.WarehouseID + ")");
                    }

                }

                catch (Exception ex)
                {
                    AppLogger.LogError("Error Inserting Spacial Discount  (SpecialDiscountID=" + oPromoDiscountSpecialRow.SpecialDiscountID + " and WarehouseID=" + oPromoDiscountSpecialRow.WarehouseID + ") /" + ex.Message);
                    DBController.Instance.RollbackTransaction();
                    throw (ex);
                }
            }

            DBController.Instance.CommitTransaction();
            return oDSPromoDiscount;

        }
        public void InsertDiscountReason(DSDiscountReason oDSDiscountReason)
        {

            foreach (DSDiscountReason.DiscountReasonRow oDiscountReasonRow in oDSDiscountReason.DiscountReason)
            {
                DiscountReason oDiscountReason = new DiscountReason();


                oDiscountReason.DiscountReasonID = oDiscountReasonRow.DiscountReasonID;
                oDiscountReason.Description = oDiscountReasonRow.Discription;
                oDiscountReason.IsActive = oDiscountReasonRow.IsActive;
                oDiscountReason.CreateUserID = oDiscountReasonRow.CreateUserID;
                oDiscountReason.CreateDate = oDiscountReasonRow.CreateDate;

                try
                {
                    if (oDiscountReason.CheckDiscountReason())
                    {
                        oDiscountReason.UpdateForPOS();
                        AppLogger.LogInfo("Successfully Update Discount Reason");
                    }
                    else
                    {
                        oDiscountReason.Add();
                        AppLogger.LogInfo("Successfully Insert Discount Reason");
                    }
                }
                catch (Exception ex)
                {
                    AppLogger.LogError("Error Inserting/Updating Discount Reason /" + ex.Message);
                    throw (ex);
                }
            }
        }

        public void UpdateStatusCustomerTemp(DSCustomerTemp oDSCustomerTemp, int nWHID)
        {

            foreach (DSCustomerTemp.CustomerTempRow oCustomerTempRow in oDSCustomerTemp.CustomerTemp)
            {
                Customer oCustomer = new Customer();


                oCustomer.CustomerID = oCustomerTempRow.CustomerID;
                oCustomer.WarehouseID = nWHID;
                oCustomer.CustomerCode = oCustomerTempRow.CustomerCode;
                oCustomer.Status = oCustomerTempRow.Status;
                oCustomer.ApprovedUserID = oCustomerTempRow.ApprovedUserID;
                oCustomer.ApprovedDate = oCustomerTempRow.ApprovedDate;

                try
                {
                    if (CheckTempCustomer(oCustomer.CustomerID, nWHID))
                    {
                        oCustomer.UpdateTempCustomerStatusWEB();
                        AppLogger.LogInfo("Successfully Update Temp Customer Data");
                    }
                }
                catch (Exception ex)
                {
                    AppLogger.LogError("Error Updating Temp Customer Data /" + ex.Message);
                    throw (ex);
                }
            }
        }

        public void UpdateStatusInvoiceReverse(DSInvoiceReverse oDSInvoiceReverse, int nWHID)
        {

            foreach (DSInvoiceReverse.InvoiceReverseRow oInvoiceReverseRow in oDSInvoiceReverse.InvoiceReverse)
            {
                InvoiceReverse oInvoiceReverse = new InvoiceReverse();


                oInvoiceReverse.ReverseID = oInvoiceReverseRow.ReverseID;
                oInvoiceReverse.WarehouseID = nWHID;
                oInvoiceReverse.InvoiceNo = oInvoiceReverseRow.InvoiceNo;
                oInvoiceReverse.Status = oInvoiceReverseRow.Status;
                oInvoiceReverse.Recommend = oInvoiceReverseRow.Recommend;
                oInvoiceReverse.RecommendBy = oInvoiceReverseRow.RecommendBy;
                oInvoiceReverse.RecommendDate = oInvoiceReverseRow.RecommendDate;
                oInvoiceReverse.ApprovedCommand = oInvoiceReverseRow.ApprovedCommand;
                oInvoiceReverse.ApprovedUserID = oInvoiceReverseRow.ApprovedUserID;
                oInvoiceReverse.ApprovedDate = oInvoiceReverseRow.ApprovedDate;

                try
                {
                    if (CheckReverseAppalication(oInvoiceReverse.ReverseID, nWHID))
                    {
                        oInvoiceReverse.UpdateInvoiceReverseStatusWEB();
                        AppLogger.LogInfo("Successfully Update Temp Customer Data");
                    }
                }
                catch (Exception ex)
                {
                    AppLogger.LogError("Error Updating Temp Customer Data /" + ex.Message);
                    throw (ex);
                }
            }
        }


        public void UpdateExchangeOfferMRData(DSExchangeOfferMR oDSExchangeOfferMR)
        {

            foreach (DSExchangeOfferMR.ExchangeOfferMRRow oExchangeOfferMRRow in oDSExchangeOfferMR.ExchangeOfferMR)
            {
                ExchangeOfferMR oExchangeOfferMR = new ExchangeOfferMR();


                oExchangeOfferMR.MoneyReceiptID = oExchangeOfferMRRow.MoneyReceiptID;
                oExchangeOfferMR.MoneyReceiptNo = oExchangeOfferMRRow.MoneyReceiptNo;
                oExchangeOfferMR.JobID = oExchangeOfferMRRow.JobID;
                oExchangeOfferMR.CreateWHID = oExchangeOfferMRRow.CreateWHID;
                oExchangeOfferMR.TransferWHID = oExchangeOfferMRRow.TransferWHID;
                oExchangeOfferMR.RedeemWHID = oExchangeOfferMRRow.RedeemWHID;
                oExchangeOfferMR.Amount = oExchangeOfferMRRow.Amount;
                oExchangeOfferMR.Remarks = oExchangeOfferMRRow.Remarks;
                oExchangeOfferMR.CreateDate = oExchangeOfferMRRow.CreateDate;
                oExchangeOfferMR.CreateUserID = oExchangeOfferMRRow.CreateUserID;
                oExchangeOfferMR.TransferUserID = oExchangeOfferMRRow.TransferUserID;
                oExchangeOfferMR.TransferDate = oExchangeOfferMRRow.TransferDate;
                oExchangeOfferMR.UpdateUserID = oExchangeOfferMRRow.UpdateUserID;
                oExchangeOfferMR.UpdateDate = oExchangeOfferMRRow.UpdateDate;
                oExchangeOfferMR.Status = oExchangeOfferMRRow.Status;

                try
                {
                    if (CheckExchangeOfferMRNo(oExchangeOfferMR.MoneyReceiptNo))
                    {
                        oExchangeOfferMR.AddForWeb();
                        AppLogger.LogInfo("Successfully Update Exchange Offer MR Data");
                    }
                    else
                    {
                        oExchangeOfferMR.UpdaetMRForWeb();
                        AppLogger.LogInfo("Successfully Update Exchange Offer MR Data");
                    }
                }
                catch (Exception ex)
                {
                    AppLogger.LogError("Error Updating Temp Customer Data /" + ex.Message);
                    throw (ex);
                }
            }
        }

        public void InsertExchangeOfferVender(DSExchangeOfferVender oDSExchangeOfferVender)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Product Insert
            foreach (DSExchangeOfferVender.ExchangeOfferVenderRow oExchangeOfferVenderRow in oDSExchangeOfferVender.ExchangeOfferVender)
            {

                if (CheckExchangeOfferVender(oExchangeOfferVenderRow.VenderID))
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();
                    sSql = "INSERT INTO t_ExchangeOfferVender (VenderID,Code,Name,Address,ContactNo,ContactPerson,ParentCustomerID, Balance, Remarks,IsActive,CreateUserID,CreateDate,UpdateUserID,UpdateDate) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                    try
                    {
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("VenderID", oExchangeOfferVenderRow.VenderID);
                        cmd.Parameters.AddWithValue("Code", oExchangeOfferVenderRow.Code);
                        cmd.Parameters.AddWithValue("Name", oExchangeOfferVenderRow.Name);
                        cmd.Parameters.AddWithValue("Address", oExchangeOfferVenderRow.Address);
                        cmd.Parameters.AddWithValue("ContactNo", oExchangeOfferVenderRow.ContactNo);
                        cmd.Parameters.AddWithValue("ContactPerson", oExchangeOfferVenderRow.ContactPerson);
                        cmd.Parameters.AddWithValue("ParentCustomerID", oExchangeOfferVenderRow.ParentCustomerID);
                        cmd.Parameters.AddWithValue("Balance", oExchangeOfferVenderRow.Balance);
                        if (oExchangeOfferVenderRow["Remarks"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("Remarks", oExchangeOfferVenderRow.Remarks);
                        else cmd.Parameters.AddWithValue("Remarks", null);
                        cmd.Parameters.AddWithValue("IsActive", oExchangeOfferVenderRow.IsActive);
                        cmd.Parameters.AddWithValue("CreateUserID", oExchangeOfferVenderRow.CreateUserID);
                        cmd.Parameters.AddWithValue("CreateDate", oExchangeOfferVenderRow.CreateDate);
                        if (oExchangeOfferVenderRow["UpdateUserID"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("UpdateUserID", oExchangeOfferVenderRow.UpdateUserID);
                        else cmd.Parameters.AddWithValue("UpdateUserID", -1);

                        if (oExchangeOfferVenderRow["UpdateDate"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("UpdateDate", oExchangeOfferVenderRow.UpdateDate);
                        else cmd.Parameters.AddWithValue("UpdateDate", null);


                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
                else
                {
                    try
                    {
                        cmd.Dispose();
                        cmd = DBController.Instance.GetCommand();

                        sSql = "UPDATE t_ExchangeOfferVender SET Code = ?, Name = ?, Address = ?, ContactNo = ?, ContactPerson = ?, Balance = ?, Remarks = ?, IsActive = ?,UpdateUserID = ?,UpdateDate = ?   WHERE VenderID = ?";

                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;


                        cmd.Parameters.AddWithValue("Code", oExchangeOfferVenderRow.Code);
                        cmd.Parameters.AddWithValue("Name", oExchangeOfferVenderRow.Name);
                        cmd.Parameters.AddWithValue("Address", oExchangeOfferVenderRow.Address);
                        cmd.Parameters.AddWithValue("ContactNo", oExchangeOfferVenderRow.ContactNo);
                        cmd.Parameters.AddWithValue("ContactPerson", oExchangeOfferVenderRow.ContactPerson);
                        cmd.Parameters.AddWithValue("Balance", oExchangeOfferVenderRow.Balance);
                        if (oExchangeOfferVenderRow["Remarks"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("Remarks", oExchangeOfferVenderRow.Remarks);
                        else cmd.Parameters.AddWithValue("Remarks", null);
                        cmd.Parameters.AddWithValue("IsActive", oExchangeOfferVenderRow.IsActive);
                        cmd.Parameters.AddWithValue("UpdateUserID", Utility.UserId);
                        cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now.Date);
                        cmd.Parameters.AddWithValue("VenderID", oExchangeOfferVenderRow.VenderID);


                        int nCount = cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
            }
        }

        public void InsertExchangeOfferVenderAccount(DSExchangeOfferVender oDSExchangeOfferVender)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Product Insert
            foreach (DSExchangeOfferVender.ExchangeOfferVenderRow oExchangeOfferVenderRow in oDSExchangeOfferVender.ExchangeOfferVender)
            {

                if (CheckExchangeOfferVenderAccount(oExchangeOfferVenderRow.VenderID))
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();
                    sSql = "INSERT INTO t_ExchangeOfferVenderAccount (VenderID,Balance) VALUES(?,?)";
                    try
                    {
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("VenderID", oExchangeOfferVenderRow.VenderID);
                        cmd.Parameters.AddWithValue("Balance", oExchangeOfferVenderRow.Balance);

                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
                else
                {
                    try
                    {
                        cmd.Dispose();
                        cmd = DBController.Instance.GetCommand();

                        sSql = "UPDATE t_ExchangeOfferVenderAccount SET Balance = ? WHERE VenderID = ?";

                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("Balance", oExchangeOfferVenderRow.Balance);
                        cmd.Parameters.AddWithValue("VenderID", oExchangeOfferVenderRow.VenderID);

                        int nCount = cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
            }
        }

        public void InsertExchangeOfferVenderTran(DSExchangeOfferVenderTran oDSExchangeOfferVenderTran)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Product Insert
            foreach (DSExchangeOfferVenderTran.ExchangeOfferVenderTranRow oExchangeOfferVenderTranRow in oDSExchangeOfferVenderTran.ExchangeOfferVenderTran)
            {

                if (CheckExchangeOfferVenderTran(oExchangeOfferVenderTranRow.VenderTranID, oExchangeOfferVenderTranRow.TranSide))
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();
                    sSql = "INSERT INTO t_ExchangeOfferVenderTran (VenderTranID,VenderTranNo,VenderTranDate,TranSide,VenderID,Amount, " +
                           "InstrumentType,InstrumentNo,InstrumentDate,BankID,BranchName,Remarks,CreateUserID,CreateDate,UpdateUserID,UpdateDate) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                    try
                    {
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("VenderTranID", oExchangeOfferVenderTranRow.VenderTranID);
                        cmd.Parameters.AddWithValue("VenderTranNo", oExchangeOfferVenderTranRow.VenderTranNo);
                        cmd.Parameters.AddWithValue("VenderTranDate", oExchangeOfferVenderTranRow.VenderTranDate);
                        cmd.Parameters.AddWithValue("TranSide", oExchangeOfferVenderTranRow.TranSide);
                        cmd.Parameters.AddWithValue("VenderID", oExchangeOfferVenderTranRow.VenderID);
                        cmd.Parameters.AddWithValue("Amount", oExchangeOfferVenderTranRow.Amount);

                        if (oExchangeOfferVenderTranRow["InstrumentType"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("InstrumentType", oExchangeOfferVenderTranRow.InstrumentType);
                        else cmd.Parameters.AddWithValue("InstrumentType", -1);

                        if (oExchangeOfferVenderTranRow["InstrumentNo"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("InstrumentNo", oExchangeOfferVenderTranRow.InstrumentNo);
                        else cmd.Parameters.AddWithValue("InstrumentNo", null);


                        if (oExchangeOfferVenderTranRow["InstrumentDate"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("InstrumentDate", oExchangeOfferVenderTranRow.InstrumentDate);
                        else cmd.Parameters.AddWithValue("InstrumentDate", null);

                        if (oExchangeOfferVenderTranRow["BankID"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("BankID", oExchangeOfferVenderTranRow.BankID);
                        else cmd.Parameters.AddWithValue("BankID", -1);

                        if (oExchangeOfferVenderTranRow["BranchName"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("BranchName", oExchangeOfferVenderTranRow.BranchName);
                        else cmd.Parameters.AddWithValue("BranchName", null);

                        if (oExchangeOfferVenderTranRow["Remarks"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("Remarks", oExchangeOfferVenderTranRow.Remarks);
                        else cmd.Parameters.AddWithValue("Remarks", null);

                        cmd.Parameters.AddWithValue("CreateUserID", oExchangeOfferVenderTranRow.CreateUserID);
                        cmd.Parameters.AddWithValue("CreateDate", oExchangeOfferVenderTranRow.CreateDate);

                        if (oExchangeOfferVenderTranRow["UpdateUserID"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("UpdateUserID", oExchangeOfferVenderTranRow.UpdateUserID);
                        else cmd.Parameters.AddWithValue("UpdateUserID", -1);

                        if (oExchangeOfferVenderTranRow["UpdateDate"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("UpdateDate", oExchangeOfferVenderTranRow.UpdateDate);
                        else cmd.Parameters.AddWithValue("UpdateDate", null);


                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
                else
                {
                    try
                    {
                        cmd.Dispose();
                        cmd = DBController.Instance.GetCommand();

                        sSql = "UPDATE t_ExchangeOfferVenderTran SET VenderTranNo = ?, VenderTranDate = ?, VenderID = ?, Amount = ?, " +
                               "InstrumentType = ?, InstrumentNo = ?, InstrumentDate = ?,BankID = ?,BranchName = ?, Remarks = ?, UpdateUserID = ?, UpdateDate = ?  " +
                               "WHERE VenderTranID = ? and TranSide = ?";

                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;



                        cmd.Parameters.AddWithValue("VenderTranNo", oExchangeOfferVenderTranRow.VenderTranNo);
                        cmd.Parameters.AddWithValue("VenderTranDate", oExchangeOfferVenderTranRow.VenderTranDate);
                        cmd.Parameters.AddWithValue("VenderID", oExchangeOfferVenderTranRow.VenderID);
                        cmd.Parameters.AddWithValue("Amount", oExchangeOfferVenderTranRow.Amount);

                        if (oExchangeOfferVenderTranRow["InstrumentType"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("InstrumentType", oExchangeOfferVenderTranRow.InstrumentType);
                        else cmd.Parameters.AddWithValue("InstrumentType", -1);

                        if (oExchangeOfferVenderTranRow["InstrumentNo"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("InstrumentNo", oExchangeOfferVenderTranRow.InstrumentNo);
                        else cmd.Parameters.AddWithValue("InstrumentNo", null);


                        if (oExchangeOfferVenderTranRow["InstrumentDate"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("InstrumentDate", oExchangeOfferVenderTranRow.InstrumentDate);
                        else cmd.Parameters.AddWithValue("InstrumentDate", null);

                        if (oExchangeOfferVenderTranRow["BankID"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("BankID", oExchangeOfferVenderTranRow.BankID);
                        else cmd.Parameters.AddWithValue("BankID", -1);

                        if (oExchangeOfferVenderTranRow["BranchName"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("BranchName", oExchangeOfferVenderTranRow.BranchName);
                        else cmd.Parameters.AddWithValue("BranchName", null);

                        if (oExchangeOfferVenderTranRow["Remarks"] != DBNull.Value)
                            cmd.Parameters.AddWithValue("Remarks", oExchangeOfferVenderTranRow.Remarks);
                        else cmd.Parameters.AddWithValue("Remarks", null);

                        cmd.Parameters.AddWithValue("UpdateUserID", Utility.UserId);
                        cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now.Date);

                        cmd.Parameters.AddWithValue("VenderTranID", oExchangeOfferVenderTranRow.VenderTranID);
                        cmd.Parameters.AddWithValue("TranSide", oExchangeOfferVenderTranRow.TranSide);

                        int nCount = cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
            }
        }

        public void InsertExchangeOfferVenderTranAccount(DSExchangeOfferVenderTran oDSExchangeOfferVenderTran)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Product Insert
            foreach (DSExchangeOfferVenderTran.ExchangeOfferVenderTranRow oExchangeOfferVenderTranRow in oDSExchangeOfferVenderTran.ExchangeOfferVenderTran)
            {

                if (CheckExchangeOfferVenderAccount(oExchangeOfferVenderTranRow.VenderID))
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();
                    sSql = "INSERT INTO t_ExchangeOfferVenderAccount (VenderID,Balance) VALUES(?,?)";
                    try
                    {
                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("VenderID", oExchangeOfferVenderTranRow.VenderID);
                        cmd.Parameters.AddWithValue("Balance", oExchangeOfferVenderTranRow.Balance);

                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
                else
                {
                    try
                    {
                        cmd.Dispose();
                        cmd = DBController.Instance.GetCommand();

                        sSql = "UPDATE t_ExchangeOfferVenderAccount SET Balance = ? WHERE VenderID = ?";

                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("Balance", oExchangeOfferVenderTranRow.Balance);
                        cmd.Parameters.AddWithValue("VenderID", oExchangeOfferVenderTranRow.VenderID);

                        int nCount = cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
            }
        }

        ///
        // Insert Exchange Offer Job
        ///
        public void InsertExchangeOfferJob(DSExchangeOfferJob oDSExchangeOfferJob)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";
            DSExchangeOfferJob oDSExchangeOfferJobDetail = new DSExchangeOfferJob();
            ExchangeOfferJobDetail oExchangeOfferJobDetail = new ExchangeOfferJobDetail();

            /// Insert Exchange Offer Job
            foreach (DSExchangeOfferJob.ExchangeOfferJobRow oExchangeOfferJobRow in oDSExchangeOfferJob.ExchangeOfferJob)
            {
                //ExchangeOfferJob

                if (CheckExchangeOfferJob(oExchangeOfferJobRow.JobID))
                {
                    try
                    {


                        cmd.Dispose();
                        cmd = DBController.Instance.GetCommand();


                        sSql = "INSERT INTO t_ExchangeOfferJob (JobID, JobNo, ContactMode, ContactDate, CustomerName, Address, ContactNo, Email, AssignedVenderID,  " +
                                "ParentCustomerID, AssignDate, ExpectedVisitDate, Remarks, RefInvoiceNo, SalesExecuteDate, CancelNote, CancelDate,  " +
                                "CreateUserID, CreateDate,UpdateUserID,UpdateDate, Status, Terminal, HappyCallStatus) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("JobID", oExchangeOfferJobRow.JobID);
                        cmd.Parameters.AddWithValue("JobNo", oExchangeOfferJobRow.JobNo);
                        cmd.Parameters.AddWithValue("ContactMode", oExchangeOfferJobRow.ContactMode);
                        cmd.Parameters.AddWithValue("ContactDate", oExchangeOfferJobRow.ContactDate);
                        cmd.Parameters.AddWithValue("CustomerName", oExchangeOfferJobRow.CustomerName);
                        cmd.Parameters.AddWithValue("Address", oExchangeOfferJobRow.Address);
                        cmd.Parameters.AddWithValue("ContactNo", oExchangeOfferJobRow.ContactNo);
                        cmd.Parameters.AddWithValue("Email", oExchangeOfferJobRow.Email);
                        cmd.Parameters.AddWithValue("AssignedVenderID", oExchangeOfferJobRow.AssignedVenderID);
                        cmd.Parameters.AddWithValue("ParentCustomerID", oExchangeOfferJobRow.ParentCustomerID);
                        cmd.Parameters.AddWithValue("AssignDate", oExchangeOfferJobRow.AssignDate);
                        cmd.Parameters.AddWithValue("ExpectedVisitDate", oExchangeOfferJobRow.ExpectedVisitDate);
                        if (oExchangeOfferJobRow.Remarks != null)
                        {
                            cmd.Parameters.AddWithValue("Remarks", oExchangeOfferJobRow.Remarks);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("Remarks", null);
                        }
                        if (oExchangeOfferJobRow.RefInvoiceNo != null)
                        {
                            cmd.Parameters.AddWithValue("RefInvoiceNo", oExchangeOfferJobRow.RefInvoiceNo);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("RefInvoiceNo", null);
                        }

                        //if (oExchangeOfferJobRow.SalesExecuteDate == DBNull.Value)
                        //{
                        //    cmd.Parameters.AddWithValue("SalesExecuteDate", oExchangeOfferJobRow.SalesExecuteDate);
                        //}
                        //else
                        //{
                        cmd.Parameters.AddWithValue("SalesExecuteDate", null);
                        //}

                        if (oExchangeOfferJobRow.CancelNote != null)
                        {
                            cmd.Parameters.AddWithValue("CancelNote", oExchangeOfferJobRow.CancelNote);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("CancelNote", null);
                        }

                        //if (oExchangeOfferJobRow.CancelDate == DBNull.Value)
                        //{
                        //    cmd.Parameters.AddWithValue("CancelDate", oExchangeOfferJobRow.CancelDate);
                        //}
                        //else
                        //{
                        cmd.Parameters.AddWithValue("CancelDate", null);
                        //}                       

                        cmd.Parameters.AddWithValue("CreateUserID", oExchangeOfferJobRow.CreateUserID);
                        cmd.Parameters.AddWithValue("CreateDate", oExchangeOfferJobRow.CreateDate);

                        cmd.Parameters.AddWithValue("UpdateUserID", null);
                        cmd.Parameters.AddWithValue("UpdateDate", null);
                        cmd.Parameters.AddWithValue("Status", oExchangeOfferJobRow.Status);
                        cmd.Parameters.AddWithValue("Terminal", oExchangeOfferJobRow.Terminal);
                        cmd.Parameters.AddWithValue("HappyCallStatus", oExchangeOfferJobRow.HappyCallStatus);

                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                        //cmd = DBController.Instance.GetCommand();

                        foreach (DSExchangeOfferJob.ExchangeOfferJobDetailRow oExchangeOfferJobDetailRow in oDSExchangeOfferJob.ExchangeOfferJobDetail)
                        {
                            //cmd.CommandText = "INSERT INTO t_ExchangeOfferJobDetail (JobID, ProductDetail, ProductType, Quantity, ProductSize, BrandName, HaveRemortCtrl, Condition) VALUES(?,?,?,?,?,?,?,?)";
                            //cmd.CommandType = CommandType.Text;
                            //cmd.Parameters.AddWithValue("JobID", oExchangeOfferJobDetailRow.JobID);
                            //cmd.Parameters.AddWithValue("ProductDetail", oExchangeOfferJobDetailRow.ProductDetail);
                            //cmd.Parameters.AddWithValue("ProductType", oExchangeOfferJobDetailRow.ProductType);
                            //cmd.Parameters.AddWithValue("Quantity", oExchangeOfferJobDetailRow.Quantity);
                            //cmd.Parameters.AddWithValue("ProductSize", oExchangeOfferJobDetailRow.ProductSize);
                            //cmd.Parameters.AddWithValue("BrandName", oExchangeOfferJobDetailRow.BrandName);
                            //cmd.Parameters.AddWithValue("HaveRemortCtrl", oExchangeOfferJobDetailRow.HaveRemortCtrl);
                            //cmd.Parameters.AddWithValue("Condition", oExchangeOfferJobDetailRow.Condition);

                            //cmd.ExecuteNonQuery();
                            //cmd.Dispose();
                            oExchangeOfferJobDetail.JobID = oExchangeOfferJobDetailRow.JobID;
                            oExchangeOfferJobDetail.ProductDetail = oExchangeOfferJobDetailRow.ProductDetail;
                            oExchangeOfferJobDetail.ProductType = oExchangeOfferJobDetailRow.ProductType;
                            oExchangeOfferJobDetail.Quantity = oExchangeOfferJobDetailRow.Quantity;
                            oExchangeOfferJobDetail.ProductSize = oExchangeOfferJobDetailRow.ProductSize;
                            oExchangeOfferJobDetail.BrandName = oExchangeOfferJobDetailRow.BrandName;
                            oExchangeOfferJobDetail.HaveRemortCtrl = oExchangeOfferJobDetailRow.HaveRemortCtrl;
                            oExchangeOfferJobDetail.Condition = oExchangeOfferJobDetailRow.Condition;
                            oExchangeOfferJobDetail.Add();

                        }

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }


                else
                {
                    try
                    {
                        cmd.Dispose();
                        cmd = DBController.Instance.GetCommand();

                        sSql = "UPDATE t_ExchangeOfferJob SET JobNo = ?, ContactMode = ?, ContactDate = ?, CustomerName = ?, Address = ?, ContactNo = ?, Email = ?, AssignedVenderID = ?, " +
                               "ParentCustomerID = ?, AssignDate = ?, ExpectedVisitDate = ?, Remarks = ?, CancelNote = ?, CancelDate = ?, UpdateUserID = ?,  " +
                               "UpdateDate = ?, Status = ? ,Terminal = ?, HappyCallStatus = ? WHERE JobID = ?";

                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;




                        cmd.Parameters.AddWithValue("JobNo", oExchangeOfferJobRow.JobNo);
                        cmd.Parameters.AddWithValue("ContactMode", oExchangeOfferJobRow.ContactMode);
                        cmd.Parameters.AddWithValue("ContactDate", oExchangeOfferJobRow.ContactDate);
                        cmd.Parameters.AddWithValue("CustomerName", oExchangeOfferJobRow.CustomerName);
                        cmd.Parameters.AddWithValue("Address", oExchangeOfferJobRow.Address);
                        cmd.Parameters.AddWithValue("ContactNo", oExchangeOfferJobRow.ContactNo);
                        cmd.Parameters.AddWithValue("Email", oExchangeOfferJobRow.Email);
                        cmd.Parameters.AddWithValue("AssignedVenderID", oExchangeOfferJobRow.AssignedVenderID);
                        cmd.Parameters.AddWithValue("ParentCustomerID", oExchangeOfferJobRow.ParentCustomerID);
                        cmd.Parameters.AddWithValue("AssignDate", oExchangeOfferJobRow.AssignDate);
                        cmd.Parameters.AddWithValue("ExpectedVisitDate", oExchangeOfferJobRow.ExpectedVisitDate);
                        if (oExchangeOfferJobRow.Remarks != null)
                        {
                            cmd.Parameters.AddWithValue("Remarks", oExchangeOfferJobRow.Remarks);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("Remarks", null);
                        }


                        if (oExchangeOfferJobRow.CancelNote != null)
                        {
                            cmd.Parameters.AddWithValue("CancelNote", oExchangeOfferJobRow.CancelNote);
                        }
                        else
                        {
                            cmd.Parameters.AddWithValue("CancelNote", null);
                        }

                        //if (oExchangeOfferJobRow.CancelDate != null)
                        //{
                        //    cmd.Parameters.AddWithValue("CancelDate", oExchangeOfferJobRow.CancelDate);
                        //}
                        //else
                        //{
                        cmd.Parameters.AddWithValue("CancelDate", null);
                        //}  

                        cmd.Parameters.AddWithValue("UpdateUserID", Utility.UserId);
                        cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now.Date);
                        cmd.Parameters.AddWithValue("Status", oExchangeOfferJobRow.Status);
                        cmd.Parameters.AddWithValue("Terminal", oExchangeOfferJobRow.Terminal);
                        cmd.Parameters.AddWithValue("HappyCallStatus", oExchangeOfferJobRow.HappyCallStatus);
                        cmd.Parameters.AddWithValue("JobID", oExchangeOfferJobRow.JobID);


                        //if (oExchangeOfferVenderTranRow["Remarks"] != DBNull.Value)
                        //    cmd.Parameters.AddWithValue("Remarks", oExchangeOfferVenderTranRow.Remarks);
                        //else cmd.Parameters.AddWithValue("Remarks", null);

                        int nCount = cmd.ExecuteNonQuery();
                        cmd.Dispose();

                        cmd = DBController.Instance.GetCommand();

                        ExchangeOfferJobDetail oExOfferJobDetail = new ExchangeOfferJobDetail();
                        oExchangeOfferJobDetail.JobID = oExchangeOfferJobRow.JobID;
                        oExchangeOfferJobDetail.Delete();

                        foreach (DSExchangeOfferJob.ExchangeOfferJobDetailRow oExchangeOfferJobDetailRow in oDSExchangeOfferJob.ExchangeOfferJobDetail)
                        {

                            oExchangeOfferJobDetail.JobID = oExchangeOfferJobDetailRow.JobID;
                            oExchangeOfferJobDetail.ProductDetail = oExchangeOfferJobDetailRow.ProductDetail;
                            oExchangeOfferJobDetail.ProductType = oExchangeOfferJobDetailRow.ProductType;
                            oExchangeOfferJobDetail.Quantity = oExchangeOfferJobDetailRow.Quantity;
                            oExchangeOfferJobDetail.ProductSize = oExchangeOfferJobDetailRow.ProductSize;
                            oExchangeOfferJobDetail.BrandName = oExchangeOfferJobDetailRow.BrandName;
                            oExchangeOfferJobDetail.HaveRemortCtrl = oExchangeOfferJobDetailRow.HaveRemortCtrl;
                            oExchangeOfferJobDetail.Condition = oExchangeOfferJobDetailRow.Condition;
                            oExchangeOfferJobDetail.Add();

                        }

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
            }
        }

        public void InsertSalesInvoiceEcommerceLead(DSSalesInvoiceEcommerce oDSSalesInvoiceEcommerce)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";
            DSSalesInvoiceEcommerce oDSSalesInvoiceEcommerceDetail = new DSSalesInvoiceEcommerce();
            EcommerceOrderDetail oEcommerceOrderDetail = new EcommerceOrderDetail();

            /// Insert SalesInvoice Ecommerce Lead
            foreach (DSSalesInvoiceEcommerce.SalesInvoiceEcommerceRow oSalesInvoiceEcommerceRow in oDSSalesInvoiceEcommerce.SalesInvoiceEcommerce)
            {

                if (CheckECommerceLead(oSalesInvoiceEcommerceRow.EComOrderID))
                {
                    try
                    {

                        cmd.Dispose();
                        cmd = DBController.Instance.GetCommand();


                        sSql = "INSERT INTO t_SalesInvoiceEcommerce (EComOrderID, LeadType, OrderNo, OrderDate, " +
                               "Outlet, Amount, DeliveryCharge, Discount, CopunNo, ConsumerID, ConsumerName, Addrress, " +
                               "DeliveryAddress, ContactNo, Email, Remarks, Status, PaymentType, SalesPersonID, BankID,  " +
                               "BankName, CardTypeID, CardType, IsEMI, NoOfInstallment, InstrumentNo, InstrumentDate, " +
                               "CardCategoryID, CardCategory, ApprovalNo, RefInvoiceNo) " +
                               "VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("EComOrderID", oSalesInvoiceEcommerceRow.EComOrderID);
                        cmd.Parameters.AddWithValue("LeadType", oSalesInvoiceEcommerceRow.LeadType);
                        cmd.Parameters.AddWithValue("OrderNo", oSalesInvoiceEcommerceRow.OrderNo);
                        cmd.Parameters.AddWithValue("OrderDate", oSalesInvoiceEcommerceRow.OrderDate);
                        cmd.Parameters.AddWithValue("Outlet", oSalesInvoiceEcommerceRow.Outlet);
                        cmd.Parameters.AddWithValue("Amount", oSalesInvoiceEcommerceRow.Amount);
                        cmd.Parameters.AddWithValue("DeliveryCharge", oSalesInvoiceEcommerceRow.DeliveryCharge);
                        cmd.Parameters.AddWithValue("Discount", oSalesInvoiceEcommerceRow.Discount);
                        cmd.Parameters.AddWithValue("CopunNo", oSalesInvoiceEcommerceRow.CopunNo);
                        cmd.Parameters.AddWithValue("ConsumerID", oSalesInvoiceEcommerceRow.ConsumerID);
                        cmd.Parameters.AddWithValue("ConsumerName", oSalesInvoiceEcommerceRow.ConsumerName);
                        cmd.Parameters.AddWithValue("Addrress", oSalesInvoiceEcommerceRow.Addrress);
                        cmd.Parameters.AddWithValue("DeliveryAddress", oSalesInvoiceEcommerceRow.DeliveryAddress);
                        cmd.Parameters.AddWithValue("ContactNo", oSalesInvoiceEcommerceRow.ContactNo);
                        cmd.Parameters.AddWithValue("Email", oSalesInvoiceEcommerceRow.Email);
                        cmd.Parameters.AddWithValue("Remarks", oSalesInvoiceEcommerceRow.Remarks);
                        cmd.Parameters.AddWithValue("Status", oSalesInvoiceEcommerceRow.Status);
                        cmd.Parameters.AddWithValue("PaymentType", oSalesInvoiceEcommerceRow.PaymentType);
                        cmd.Parameters.AddWithValue("SalesPersonID", oSalesInvoiceEcommerceRow.SalesPersonID);
                        cmd.Parameters.AddWithValue("BankID", oSalesInvoiceEcommerceRow.BankID);
                        cmd.Parameters.AddWithValue("BankName", oSalesInvoiceEcommerceRow.BankName);
                        cmd.Parameters.AddWithValue("CardTypeID", oSalesInvoiceEcommerceRow.CardTypeID);
                        cmd.Parameters.AddWithValue("CardType", oSalesInvoiceEcommerceRow.CardType);
                        cmd.Parameters.AddWithValue("IsEMI", oSalesInvoiceEcommerceRow.IsEMI);
                        cmd.Parameters.AddWithValue("NoOfInstallment", oSalesInvoiceEcommerceRow.NoOfInstallment);
                        cmd.Parameters.AddWithValue("InstrumentNo", oSalesInvoiceEcommerceRow.InstrumentNo);
                        cmd.Parameters.AddWithValue("InstrumentDate", oSalesInvoiceEcommerceRow.InstrumentDate);
                        cmd.Parameters.AddWithValue("CardCategoryID", oSalesInvoiceEcommerceRow.CardCategoryID);
                        cmd.Parameters.AddWithValue("CardCategory", oSalesInvoiceEcommerceRow.CardCategory);
                        cmd.Parameters.AddWithValue("ApprovalNo", oSalesInvoiceEcommerceRow.ApprovalNo);
                        cmd.Parameters.AddWithValue("RefInvoiceNo", oSalesInvoiceEcommerceRow.RefInvoiceNo);

                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                        foreach (DSSalesInvoiceEcommerce.SalesInvoiceEcommerceDetailRow oSalesInvoiceEcommerceDetailRow in oDSSalesInvoiceEcommerce.SalesInvoiceEcommerceDetail)
                        {
                            oEcommerceOrderDetail.EcomOrderID = oSalesInvoiceEcommerceDetailRow.EcomOrderID;
                            oEcommerceOrderDetail.ProductCode = oSalesInvoiceEcommerceDetailRow.ProductCode;
                            oEcommerceOrderDetail.ProductName = oSalesInvoiceEcommerceDetailRow.ProductName;
                            oEcommerceOrderDetail.UnitPrice = oSalesInvoiceEcommerceDetailRow.UnitPrice;
                            oEcommerceOrderDetail.DiscountAmount = oSalesInvoiceEcommerceDetailRow.DiscountAmount;
                            oEcommerceOrderDetail.Quantity = oSalesInvoiceEcommerceDetailRow.Quantity;
                            oEcommerceOrderDetail.IsFreeQty = oSalesInvoiceEcommerceDetailRow.IsFreeQty;
                            oEcommerceOrderDetail.Add();

                        }

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }


                else
                {
                    try
                    {
                        cmd.Dispose();
                        cmd = DBController.Instance.GetCommand();

                        sSql = "UPDATE t_SalesInvoiceEcommerce SET LeadType = ?, OrderNo = ?, " +
                               "OrderDate = ?, Outlet = ?, Amount = ?, DeliveryCharge = ?, Discount = ?, CopunNo = ?, " +
                               "ConsumerID = ?, ConsumerName = ?, Addrress = ?, DeliveryAddress = ?, ContactNo = ?, " +
                               "Email = ?, Remarks = ?, Status = ?, PaymentType = ?, SalesPersonID = ?, BankID = ?, " +
                               "BankName = ?, CardTypeID = ?, CardType = ?, IsEMI = ?, NoOfInstallment = ?, " +
                               "InstrumentNo = ?, InstrumentDate = ?, CardCategoryID = ?, CardCategory = ?, " +
                               "ApprovalNo = ?, RefInvoiceNo = ? WHERE EComOrderID = ?";

                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;


                        cmd.Parameters.AddWithValue("LeadType", oSalesInvoiceEcommerceRow.LeadType);
                        cmd.Parameters.AddWithValue("OrderNo", oSalesInvoiceEcommerceRow.OrderNo);
                        cmd.Parameters.AddWithValue("OrderDate", oSalesInvoiceEcommerceRow.OrderDate);
                        cmd.Parameters.AddWithValue("Outlet", oSalesInvoiceEcommerceRow.Outlet);
                        cmd.Parameters.AddWithValue("Amount", oSalesInvoiceEcommerceRow.Amount);
                        cmd.Parameters.AddWithValue("DeliveryCharge", oSalesInvoiceEcommerceRow.DeliveryCharge);
                        cmd.Parameters.AddWithValue("Discount", oSalesInvoiceEcommerceRow.Discount);
                        cmd.Parameters.AddWithValue("CopunNo", oSalesInvoiceEcommerceRow.CopunNo);
                        cmd.Parameters.AddWithValue("ConsumerID", oSalesInvoiceEcommerceRow.ConsumerID);
                        cmd.Parameters.AddWithValue("ConsumerName", oSalesInvoiceEcommerceRow.ConsumerName);
                        cmd.Parameters.AddWithValue("Addrress", oSalesInvoiceEcommerceRow.Addrress);
                        cmd.Parameters.AddWithValue("DeliveryAddress", oSalesInvoiceEcommerceRow.DeliveryAddress);
                        cmd.Parameters.AddWithValue("ContactNo", oSalesInvoiceEcommerceRow.ContactNo);
                        cmd.Parameters.AddWithValue("Email", oSalesInvoiceEcommerceRow.Email);
                        cmd.Parameters.AddWithValue("Remarks", oSalesInvoiceEcommerceRow.Remarks);
                        cmd.Parameters.AddWithValue("Status", oSalesInvoiceEcommerceRow.Status);
                        cmd.Parameters.AddWithValue("PaymentType", oSalesInvoiceEcommerceRow.PaymentType);
                        cmd.Parameters.AddWithValue("SalesPersonID", oSalesInvoiceEcommerceRow.SalesPersonID);
                        cmd.Parameters.AddWithValue("BankID", oSalesInvoiceEcommerceRow.BankID);
                        cmd.Parameters.AddWithValue("BankName", oSalesInvoiceEcommerceRow.BankName);
                        cmd.Parameters.AddWithValue("CardTypeID", oSalesInvoiceEcommerceRow.CardTypeID);
                        cmd.Parameters.AddWithValue("CardType", oSalesInvoiceEcommerceRow.CardType);
                        cmd.Parameters.AddWithValue("IsEMI", oSalesInvoiceEcommerceRow.IsEMI);
                        cmd.Parameters.AddWithValue("NoOfInstallment", oSalesInvoiceEcommerceRow.NoOfInstallment);
                        cmd.Parameters.AddWithValue("InstrumentNo", oSalesInvoiceEcommerceRow.InstrumentNo);
                        cmd.Parameters.AddWithValue("InstrumentDate", oSalesInvoiceEcommerceRow.InstrumentDate);
                        cmd.Parameters.AddWithValue("CardCategoryID", oSalesInvoiceEcommerceRow.CardCategoryID);
                        cmd.Parameters.AddWithValue("CardCategory", oSalesInvoiceEcommerceRow.CardCategory);
                        cmd.Parameters.AddWithValue("ApprovalNo", oSalesInvoiceEcommerceRow.ApprovalNo);
                        cmd.Parameters.AddWithValue("RefInvoiceNo", oSalesInvoiceEcommerceRow.RefInvoiceNo);
                        cmd.Parameters.AddWithValue("EComOrderID", oSalesInvoiceEcommerceRow.EComOrderID);


                        int nCount = cmd.ExecuteNonQuery();
                        cmd.Dispose();

                        cmd = DBController.Instance.GetCommand();

                        EcommerceOrderDetail _oEcommerceOrderDetail = new EcommerceOrderDetail();
                        _oEcommerceOrderDetail.EcomOrderID = oSalesInvoiceEcommerceRow.EComOrderID;
                        _oEcommerceOrderDetail.Delete();

                        foreach (DSSalesInvoiceEcommerce.SalesInvoiceEcommerceDetailRow oSalesInvoiceEcommerceDetailRow in oDSSalesInvoiceEcommerce.SalesInvoiceEcommerceDetail)
                        {

                            _oEcommerceOrderDetail.EcomOrderID = oSalesInvoiceEcommerceDetailRow.EcomOrderID;
                            _oEcommerceOrderDetail.ProductCode = oSalesInvoiceEcommerceDetailRow.ProductCode;
                            _oEcommerceOrderDetail.ProductName = oSalesInvoiceEcommerceDetailRow.ProductName;
                            _oEcommerceOrderDetail.UnitPrice = oSalesInvoiceEcommerceDetailRow.UnitPrice;
                            _oEcommerceOrderDetail.DiscountAmount = oSalesInvoiceEcommerceDetailRow.DiscountAmount;
                            _oEcommerceOrderDetail.Quantity = oSalesInvoiceEcommerceDetailRow.Quantity;
                            _oEcommerceOrderDetail.IsFreeQty = oSalesInvoiceEcommerceDetailRow.IsFreeQty;
                            _oEcommerceOrderDetail.Add();

                        }

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
            }
        }


        //public DSCustomerTemp InsertCustomerTempHOEnd(DSCustomerTemp oDSCustomerTemp, int nWHID)
        //{
        //    DBController.Instance.BeginNewTransaction();
        //    string sSql = "";
        //    int nCount = 0;

        //    /// Insert Customer Temp Data from outlet to HO

        //    foreach (DSCustomerTemp.RetailConsumerRow oRetailConsumerRow in oDSRetailConsumer.RetailConsumer)
        //    {
        //        OleDbCommand cmd = DBController.Instance.GetCommand();

        //        try
        //        {
        //            RetailConsumer oRetaillConsumer = new RetailConsumer();
        //            oRetaillConsumer.ConsumerID = oRetailConsumerRow.ConsumerID;
        //            oRetaillConsumer.ConsumerCode = oRetailConsumerRow.ConsumerCode;
        //            oRetaillConsumer.ConsumerName = oRetailConsumerRow.ConsumerName;
        //            oRetaillConsumer.ConsumerType = oRetailConsumerRow.ConsumerType;
        //            oRetaillConsumer.CustomerID = oRetailConsumerRow.CustomerID;
        //            oRetaillConsumer.ParentCustomerID = oRetailConsumerRow.ParentCustomerID;
        //            oRetaillConsumer.Address = oRetailConsumerRow.Address;
        //            oRetaillConsumer.CellNo = oRetailConsumerRow.CellNo;
        //            oRetaillConsumer.SalesType = oRetailConsumerRow.SalesType;
        //            oRetaillConsumer.WarehouseID = nWHID;

        //            if (oRetailConsumerRow.IsPhoneNoNull())
        //                oRetaillConsumer.PhoneNo = "";
        //            else oRetaillConsumer.PhoneNo = oRetailConsumerRow.PhoneNo;

        //            if (oRetailConsumerRow.IsEmailNull())
        //                oRetaillConsumer.Email = "";
        //            else oRetaillConsumer.Email = oRetailConsumerRow.Email;
        //            oRetaillConsumer.EmployeeCode = oRetailConsumerRow.EmployeeCode;
        //            if (oRetailConsumerRow.IsNationalIDNull())
        //                oRetaillConsumer.NationalID = "";
        //            else oRetaillConsumer.NationalID = oRetailConsumerRow.NationalID;

        //            if (oRetailConsumerRow.IsDateofBirthNull())
        //                oRetaillConsumer.DateofBirth = null;
        //            else oRetaillConsumer.DateofBirth = oRetailConsumerRow.DateofBirth;

        //            if (oRetailConsumerRow.IsVatRegNoNull())
        //                oRetaillConsumer.VatRegNo = "";
        //            else oRetaillConsumer.VatRegNo = oRetailConsumerRow.VatRegNo;

        //            if (oRetailConsumerRow.IsShortNameNull())
        //                oRetaillConsumer.ShortName = "";
        //            else oRetaillConsumer.ShortName = oRetailConsumerRow.ShortName;

        //            if (oRetailConsumerRow.IsFatherNameNull())
        //                oRetaillConsumer.FatherName = "";
        //            else oRetaillConsumer.FatherName = oRetailConsumerRow.FatherName;

        //            if (oRetailConsumerRow.IsMotherNameNull())
        //                oRetaillConsumer.MotherName = "";
        //            else oRetaillConsumer.MotherName = oRetailConsumerRow.MotherName;

        //            if (oRetailConsumerRow.IsSpouseNameNull())
        //                oRetaillConsumer.SpouseName = "";
        //            else oRetaillConsumer.SpouseName = oRetailConsumerRow.SpouseName;

        //            if (oRetailConsumerRow.IsPermanentAddressNull())
        //                oRetaillConsumer.PermanentAddress = "";
        //            else oRetaillConsumer.PermanentAddress = oRetailConsumerRow.PermanentAddress;

        //            if (oRetailConsumerRow.IsNationalityNull())
        //                oRetaillConsumer.Nationality = "";
        //            else oRetaillConsumer.Nationality = oRetailConsumerRow.Nationality;

        //            if (oRetailConsumerRow.IsPassportNoNull())
        //                oRetaillConsumer.PassportNo = "";
        //            else oRetaillConsumer.PassportNo = oRetailConsumerRow.PassportNo;

        //            if (oRetailConsumerRow.IsIsCLPNull())
        //                oRetaillConsumer.IsCLP = -1;
        //            else oRetaillConsumer.IsCLP = oRetailConsumerRow.IsCLP;

        //            if (oRetailConsumerRow.IsCurrentCLPNull())
        //                oRetaillConsumer.CurrentCLP = -1;
        //            else oRetaillConsumer.CurrentCLP = oRetailConsumerRow.CurrentCLP;

        //            if (oRetailConsumerRow.IsIsRegisterNull())
        //                oRetaillConsumer.IsRegister = -1;
        //            else oRetaillConsumer.IsRegister = oRetailConsumerRow.IsRegister;

        //            if (oRetailConsumerRow.IsIsAuthorizedNull())
        //                oRetaillConsumer.IsAuthorized = -1;
        //            else oRetaillConsumer.IsAuthorized = oRetailConsumerRow.IsAuthorized;

        //            if (int.Parse(oRetailConsumerRow.TransferType.ToString()) == (int)Dictionary.DataTransferType.Add)
        //            {
        //                if (oRetaillConsumer.CheckConsumerHOEnd())
        //                {
        //                    oRetailConsumerRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
        //                    AppLogger.LogInfo("Successfully Insert Retail Consumer (POST) (ConsumerID=" + oRetailConsumerRow.ConsumerID + " and CustoerID=" + oRetailConsumerRow.CustomerID + ")");
        //                }
        //                else
        //                {

        //                    oRetaillConsumer.AddHOEnd();
        //                    oRetailConsumerRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
        //                    AppLogger.LogInfo("Successfully Insert Retail Consumer (ConsumerID=" + oRetailConsumerRow.ConsumerID + " and CustoerID=" + oRetailConsumerRow.CustomerID + ")");
        //                }
        //            }
        //            else
        //            {
        //                oRetaillConsumer.UpdateHOEnd();
        //                if (oRetaillConsumer.Flag == false)
        //                {
        //                    oRetaillConsumer.AddForHOEnd();
        //                    oRetailConsumerRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
        //                    AppLogger.LogInfo("Successfully Update Retail Consumer (ConsumerID=" + oRetailConsumerRow.ConsumerID + " and CustoerID=" + oRetailConsumerRow.CustomerID + ")");

        //                }
        //                else
        //                {
        //                    oRetailConsumerRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
        //                    AppLogger.LogInfo("Successfully Insert Retail Consumer (ConsumerID=" + oRetailConsumerRow.ConsumerID + " and CustoerID=" + oRetailConsumerRow.CustomerID + ")");
        //                }
        //            }
        //            //oRetailConsumerRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
        //        }
        //        catch (Exception ex)
        //        {
        //            AppLogger.LogError("Error Inserting Retail Consumer (ConsumerID=" + oRetailConsumerRow.ConsumerID + " and CustoerID=" + oRetailConsumerRow.CustomerID + ") /" + ex.Message);
        //            oRetailConsumerRow.IsDownload = (int)Dictionary.YesOrNoStatus.NO;
        //            DBController.Instance.RollbackTransaction();
        //            throw (ex);
        //        }
        //    }

        //    DBController.Instance.CommitTransaction();
        //    return oDSRetailConsumer;

        //}

        ///
        // Insert Basic Data
        ///
        public void InsertBasicData(DSBasicData oDSBasicData)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                cmd.CommandText = "Delete FROM t_Bank ";
                cmd.CommandType = CommandType.Text;

                cmd.ExecuteNonQuery();
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw (ex);
            }

            try
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                cmd.CommandText = "Delete FROM t_BankBranch ";
                cmd.CommandType = CommandType.Text;

                cmd.ExecuteNonQuery();
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw (ex);
            }

            try
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                cmd.CommandText = "Delete FROM t_company ";
                cmd.CommandType = CommandType.Text;

                cmd.ExecuteNonQuery();
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw (ex);
            }

            try
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                cmd.CommandText = "Delete FROM t_CustomerCreditLimit ";
                cmd.CommandType = CommandType.Text;

                cmd.ExecuteNonQuery();
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw (ex);
            }

            try
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                cmd.CommandText = "Delete FROM t_InvoiceType ";
                cmd.CommandType = CommandType.Text;

                cmd.ExecuteNonQuery();
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw (ex);
            }

            try
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                cmd.CommandText = "Delete FROM t_customerTranType ";
                cmd.CommandType = CommandType.Text;

                cmd.ExecuteNonQuery();
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw (ex);
            }


            try
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                cmd.CommandText = "Delete FROM t_CustomerTypeWisePriceSetting ";
                cmd.CommandType = CommandType.Text;

                cmd.ExecuteNonQuery();
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                throw (ex);
            }

            foreach (DSBasicData.BankRow oBankRow in oDSBasicData.Bank)
            {
                try
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    cmd.CommandText = "INSERT INTO t_Bank VALUES(?,?,?,?)";
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("BankID", oBankRow.BankID);
                    cmd.Parameters.AddWithValue("Code", oBankRow.Code);
                    cmd.Parameters.AddWithValue("Name", oBankRow.Name);
                    cmd.Parameters.AddWithValue("Description", oBankRow.Description);
                    cmd.Parameters.AddWithValue("IsEMI", oBankRow.IsEMI);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                catch (Exception ex)
                {
                    throw (ex);
                }
            }

            foreach (DSBasicData.BankBranchRow oBankBranchRow in oDSBasicData.BankBranch)
            {
                try
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    cmd.CommandText = "INSERT INTO t_BankBranch VALUES(?,?,?,?,?,?)";
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("BranchID", oBankBranchRow.BranchID);
                    cmd.Parameters.AddWithValue("Code", oBankBranchRow.Code);
                    cmd.Parameters.AddWithValue("Name", oBankBranchRow.Name);
                    cmd.Parameters.AddWithValue("Address", oBankBranchRow.Address);
                    cmd.Parameters.AddWithValue("Telephone", oBankBranchRow.Telephone);
                    cmd.Parameters.AddWithValue("BankID", oBankBranchRow.BankID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                catch (Exception ex)
                {
                    throw (ex);
                }
            }

            foreach (DSBasicData.CompanyRow oCompanyRow in oDSBasicData.Company)
            {
                try
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    cmd.CommandText = "INSERT INTO t_Company VALUES(?,?,?,?,?)";
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("CompanyID", oCompanyRow.CompanyID);
                    cmd.Parameters.AddWithValue("CompanyCode", oCompanyRow.CompanyCode);
                    cmd.Parameters.AddWithValue("CompanyName", oCompanyRow.CompanyName);
                    cmd.Parameters.AddWithValue("Description", oCompanyRow.Description);
                    cmd.Parameters.AddWithValue("IsActive", oCompanyRow.IsActive);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                catch (Exception ex)
                {
                    throw (ex);
                }
            }

            foreach (DSBasicData.CustomerCreditLimitRow oCustomerCreditLimitRow in oDSBasicData.CustomerCreditLimit)
            {
                try
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    cmd.CommandText = "INSERT INTO t_CustomerCreditLimit VALUES(?,?,?,?,?,?,?)";
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("CreditLimitID", oCustomerCreditLimitRow.CreditLimitID);
                    cmd.Parameters.AddWithValue("CustomerID", oCustomerCreditLimitRow.CustomerID);
                    cmd.Parameters.AddWithValue("MinCreditLimit", oCustomerCreditLimitRow.MinCreditLimit);
                    cmd.Parameters.AddWithValue("EffectiveDate", oCustomerCreditLimitRow.EffectiveDate);
                    cmd.Parameters.AddWithValue("ExpiryDate", oCustomerCreditLimitRow.ExpiryDate);
                    cmd.Parameters.AddWithValue("UserID", oCustomerCreditLimitRow.UserID);
                    cmd.Parameters.AddWithValue("MaxCreditLimit", oCustomerCreditLimitRow.MaxCreditLimit);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                catch (Exception ex)
                {
                    throw (ex);
                }
            }

            foreach (DSBasicData.InvoiceTypeRow oInvoiceTypeRow in oDSBasicData.InvoiceType)
            {
                try
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    cmd.CommandText = "INSERT INTO t_InvoiceType VALUES(?,?)";
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("InvoiceTypeID", oInvoiceTypeRow.InvoiceTypeID);
                    cmd.Parameters.AddWithValue("InvoiceTypeName", oInvoiceTypeRow.InvoiceTypeName);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                catch (Exception ex)
                {
                    throw (ex);
                }
            }

            foreach (DSBasicData.CustomerTranTypeRow oCustomerTranTypeRow in oDSBasicData.CustomerTranType)
            {
                try
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    cmd.CommandText = "INSERT INTO t_CustomerTranType VALUES(?,?,?,?,?,?)";
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("TranTypeID", oCustomerTranTypeRow.TranTypeID);
                    cmd.Parameters.AddWithValue("TranTypeCode", oCustomerTranTypeRow.TranTypeCode);
                    cmd.Parameters.AddWithValue("TranTypeName", oCustomerTranTypeRow.TranTypeName);
                    cmd.Parameters.AddWithValue("TranSide", oCustomerTranTypeRow.TranSide);
                    if (oCustomerTranTypeRow.CollectionType != -1)
                    {
                        cmd.Parameters.AddWithValue("CollectionType", oCustomerTranTypeRow.CollectionType);
                    }
                    else
                    {
                        cmd.Parameters.AddWithValue("CollectionType", null);
                    }
                    cmd.Parameters.AddWithValue("IsSystem", oCustomerTranTypeRow.IsSystem);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                catch (Exception ex)
                {
                    throw (ex);
                }
            }

            foreach (DSBasicData.CustomerTypeWisePriceSettingRow oCustomerTypeWisePriceSettingRow in oDSBasicData.CustomerTypeWisePriceSetting)
            {
                try
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    cmd.CommandText = "INSERT INTO t_CustomerTypeWisePriceSetting VALUES(?,?,?,?,?,?,?)";
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("PriceSettingID", oCustomerTypeWisePriceSettingRow.PriceSettingID);
                    cmd.Parameters.AddWithValue("PriceOptionID", oCustomerTypeWisePriceSettingRow.PriceOptionID);
                    cmd.Parameters.AddWithValue("DiscountPercent", oCustomerTypeWisePriceSettingRow.DiscountPercent);
                    cmd.Parameters.AddWithValue("EffectiveDate", oCustomerTypeWisePriceSettingRow.EffectiveDate);
                    cmd.Parameters.AddWithValue("IsCurrent", oCustomerTypeWisePriceSettingRow.IsCurrent);
                    cmd.Parameters.AddWithValue("HaveAmountDiscount", oCustomerTypeWisePriceSettingRow.HaveAmountDiscount);
                    cmd.Parameters.AddWithValue("CustTypeID", oCustomerTypeWisePriceSettingRow.CustTypeID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                catch (Exception ex)
                {
                    throw (ex);
                }
            }

            foreach (DSBasicData.CustomerAccountRow oCustomerAccountRow in oDSBasicData.CustomerAccount)
            {
                CustomerTransaction oCT = new CustomerTransaction();
                if (oCT.CheckCustomerAccount(oCustomerAccountRow.CustomerID))
                {
                    try
                    {
                        cmd.Dispose();
                        cmd = DBController.Instance.GetCommand();

                        cmd.CommandText = "INSERT INTO t_CustomerAccount VALUES(?,?)";
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("CustomerID", oCustomerAccountRow.CustomerID);
                        cmd.Parameters.AddWithValue("CurrentBalance", oCustomerAccountRow.CurrentBalance);

                        cmd.ExecuteNonQuery();
                        cmd.Dispose();
                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
            }

        }
        public bool CheckRetailConsumer(int nConsumerID, int nCustomerID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "select ConsumerID from t_RetailConsumer Where ConsumerID=? and CustomerID=?";
                cmd.Parameters.AddWithValue("ConsumerID", nConsumerID);
                cmd.Parameters.AddWithValue("CustomerID", nCustomerID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }
        public bool CheckConsumerPromotion(int nSalesPromotionID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "select SalesPromotionID from t_SalesPromo Where SalesPromotionID=?";
                cmd.Parameters.AddWithValue("SalesPromotionID", nSalesPromotionID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }
        public bool CheckSalesPromotionNew(int nSalesPromotionID, string sTableName)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                if (sTableName == "t_PromoCP")
                {
                    cmd.CommandText = "Select * from t_PromoCP Where ConsumerPromoID=" + nSalesPromotionID + "";
                }
                else if (sTableName == "t_PromoTP")
                {
                    cmd.CommandText = "Select * from t_PromoTP Where TradePromoID=" + nSalesPromotionID + "";
                }

                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount != 0)
                return true;
            else return false;
        }
        public bool CheckScratchCardOffer(int nSalesPromotionID, string sTableName)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                if (sTableName == "t_ScratchCardOffer")
                {
                    cmd.CommandText = "Select * from t_ScratchCardOffer Where ScratchCardOfferID=" + nSalesPromotionID + "";
                }

                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount != 0)
                return true;
            else return false;
        }
        public bool CheckUser(int nUserID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "select UserID from t_User Where userID=?";
                cmd.Parameters.AddWithValue("userID", nUserID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }
        public bool CheckProductGroup(int nProductGroupID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "select PdtGroupID from t_productGroup Where PdtGroupID=?";
                cmd.Parameters.AddWithValue("PdtGroupID", nProductGroupID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }
        public bool CheckProductBrand(int nBrandID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "select BrandID from t_Brand where BrandID=?";
                cmd.Parameters.AddWithValue("BrandID", nBrandID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }
        public bool CheckCustomer(int nCustomerID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "SELECT * FROM t_Customer where CustomerID =?";
                cmd.Parameters.AddWithValue("CustomerID", nCustomerID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }


        public bool CheckPromoExchangeOffer(int nOfferID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "SELECT * FROM t_PromoExchangeOffers where OfferId=?";
                cmd.Parameters.AddWithValue("OfferId", nOfferID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }
        public bool CheckPromoWarranty(int nWarrantyId)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "SELECT * FROM t_PromoWarranty where WarrantyId=?";
                cmd.Parameters.AddWithValue("WarrantyId", nWarrantyId);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }
        public bool CheckEcomOrderNo(int _OrderID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "Select * From t_SalesInvoiceEcommerce where EComOrderID=?";
                cmd.Parameters.AddWithValue("EComOrderID", _OrderID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }
        public bool CheckEcomOrderDetailNo(int _OrderID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "Select * From t_SalesInvoiceEcommerceDetail where EComOrderID=?";
                cmd.Parameters.AddWithValue("EComOrderID", _OrderID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }

        public bool CheckProduct(int nProductID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "SELECT * FROM t_Product where ProductID =?";
                cmd.Parameters.AddWithValue("ProductID", nProductID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }
        public bool CheckProductStockTran(string sTranNo)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "Select * From t_ProductStockTran where TranNo=?";
                cmd.Parameters.AddWithValue("TranNo", sTranNo);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }

        public bool CheckProductStockRequisition(string sRequisitionNo)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "Select * From t_StockRequisition where RequisitionNo=?";
                cmd.Parameters.AddWithValue("RequisitionNo", sRequisitionNo);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }
        public bool CheckCustomerTran(string sTranNo)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "Select * From t_CustomerTran where TranNo=?";
                cmd.Parameters.AddWithValue("TranNo", sTranNo);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }
        public bool CheckProductFeatureType(int nFeatureTypeID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "SELECT * FROM t_ProductFeatureType where FeatureTypeID =?";
                cmd.Parameters.AddWithValue("FeatureTypeID", nFeatureTypeID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }
        public bool CheckNewVatActivation(int nID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "SELECT * FROM t_NewVatActivation where ID =?";
                cmd.Parameters.AddWithValue("ID", nID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }
        public bool CheckBG(int nBGID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "SELECT * FROM t_CustomerBankGuaranty where BGID =?";
                cmd.Parameters.AddWithValue("BGID", nBGID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }
        public bool CheckCustomerAccount(int nCustomerID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "SELECT * FROM t_CustomerAccount where CustomerID =?";
                cmd.Parameters.AddWithValue("CustomerID", nCustomerID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }
        public bool CheckPettyCashExpenseHead(int nExpenseHeadID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "SELECT * FROM t_PettyCashExpenseHead where ExpenseHeadID =?";
                cmd.Parameters.AddWithValue("ExpenseHeadID", nExpenseHeadID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }
        public bool CheckPromoDiscountSpecialAuthority(int nAuthorityID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "SELECT * FROM t_PromoDiscountSpecialAuthority where AuthorityID =?";
                cmd.Parameters.AddWithValue("AuthorityID", nAuthorityID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }
        public bool CheckWarehouse(int nWarehouseID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "SELECT * FROM t_Warehouse where WarehouseID =?";
                cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }

        public bool CheckCustomerCreditLimit(int nCreditLimitID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "SELECT * FROM t_CustomerCreditLimit where CreditLimitID =?";
                cmd.Parameters.AddWithValue("CreditLimitID", nCreditLimitID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }
        public bool CheckProductPrice(int nPriceID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "SELECT * FROM t_FinishedGoodsPrice where PriceID =?";
                cmd.Parameters.AddWithValue("PriceID", nPriceID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }
        public bool CheckEmployee(int nEmployeeID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "select EmployeeID from t_Employee where EmployeeID=?";
                cmd.Parameters.AddWithValue("EmployeeID", nEmployeeID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }
        public bool CheckBank(int nBankID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "select BankID from t_Bank Where BankID=?";
                cmd.Parameters.AddWithValue("BankID", nBankID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }
        public bool CheckShowroom(int nShowroomID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "select ShowroomID from t_Showroom Where ShowroomID=?";
                cmd.Parameters.AddWithValue("ShowroomID", nShowroomID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }
        public bool CheckUnsoldDefectiveProductID(int nDefectiveID, int nWarehouseID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "Select *From t_UnsoldDefectiveProduct Where DefectiveID = ? and WarehouseID = ?";
                cmd.Parameters.AddWithValue("DefectiveID", nDefectiveID);
                cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }
        public bool CheckUnsoldDefectiveProductIDNew(int nDefectiveID, int nWarehouseID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "Select *From t_UnsoldDefectiveProductNew Where DefectiveID = ? and WarehouseID = ?";
                cmd.Parameters.AddWithValue("DefectiveID", nDefectiveID);
                cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }
        public bool CheckOfficeItem(int nID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "Select * From t_OfficeItems where ID =?";
                cmd.Parameters.AddWithValue("ID", nID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }
        public bool CheckTPVatProduct(int nProductID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "Select * From t_TPVatProduct where ProductID = ?";
                cmd.Parameters.AddWithValue("ProductID", nProductID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }
        public bool CheckTempCustomer(int nCustomerID, int nWarehouseID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "Select * From t_CustomerTemp where CustomerID = ? and WarehouseID = ?";
                cmd.Parameters.AddWithValue("CustomerID", nCustomerID);
                cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return false;
            else return true;
        }
        public bool CheckReverseAppalication(int nReverseID, int nWarehouseID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "Select * From t_InvoiceReverse where ReverseID = ? and WarehouseID = ?";
                cmd.Parameters.AddWithValue("ReverseID", nReverseID);
                cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return false;
            else return true;
        }



        public bool CheckExchangeOfferVender(int nVenderID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "Select * From t_ExchangeOfferVender where VenderID = ?";
                cmd.Parameters.AddWithValue("VenderID", nVenderID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }

        public bool CheckExchangeOfferVenderAccount(int nVenderID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "Select * From t_ExchangeOfferVenderAccount where VenderID = ?";
                cmd.Parameters.AddWithValue("VenderID", nVenderID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }

        public bool CheckExchangeOfferVenderTran(int nVenderTranID, int nTranSide)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "Select * From t_ExchangeOfferVenderTran where VenderTranID = ? and TranSide = ? ";
                cmd.Parameters.AddWithValue("VenderTranID", nVenderTranID);
                cmd.Parameters.AddWithValue("TranSide", nTranSide);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }

        public bool CheckExchangeOfferJob(int nJobID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "Select * From t_ExchangeOfferJob where JobID = ? ";
                cmd.Parameters.AddWithValue("JobID", nJobID);

                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }

        public bool CheckECommerceLead(int nEcomorderID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "Select * From t_SalesInvoiceEcommerce where EcomorderID = ? ";
                cmd.Parameters.AddWithValue("EcomorderID", nEcomorderID);

                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }

        public bool CheckCreditApproval(int nID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "Select * From t_CustomerCreditApproval where ID =?";
                cmd.Parameters.AddWithValue("ID", nID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }
        public bool CheckCalendarWeek(int nCalendarID, int nID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "Select * From t_CalendarWeek where CalendarID =? and ID= ?";
                cmd.Parameters.AddWithValue("CalendarID", nCalendarID);
                cmd.Parameters.AddWithValue("ID", nID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }
        public bool CheckPlanCustomerTarget(int nVersionNo, int nCustomerID, int nYear, int nMonth, int nWeek)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "Select * From t_PlanCustomerTarget where VersionNo =? and CustomerID= ? and TYear = ? and TMonth = ? and WeekNo = ? ";
                cmd.Parameters.AddWithValue("VersionNo", nVersionNo);
                cmd.Parameters.AddWithValue("CustomerID", nCustomerID);
                cmd.Parameters.AddWithValue("TYear", nYear);
                cmd.Parameters.AddWithValue("TMonth", nMonth);
                cmd.Parameters.AddWithValue("WeekNo", nWeek);

                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }

        public bool CheckPlanExecutiveWeekTarget(int nVersionNo, int nCustomerID, int nYear, int nMonth, int nWeek, int nSalesPersonID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "Select * From t_PlanExecutiveWeekTarget where VersionNo =? and CustomerID= ? and TYear = ? and TMonth = ? and WeekNo = ? and SalesPersonID = ? ";
                cmd.Parameters.AddWithValue("VersionNo", nVersionNo);
                cmd.Parameters.AddWithValue("CustomerID", nCustomerID);
                cmd.Parameters.AddWithValue("TYear", nYear);
                cmd.Parameters.AddWithValue("TMonth", nMonth);
                cmd.Parameters.AddWithValue("WeekNo", nWeek);
                cmd.Parameters.AddWithValue("SalesPersonID", nSalesPersonID);

                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }
        public bool CheckPlanExecutiveLeadTarget(int nVersionNo, int nCustomerID, int nYear, int nMonth, int nWeek, int nSalesPersonID, int nChannel, int nMAGID, int nBrand, int nTargetType)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "Select * From t_PlanExecutiveLeadTarget where VersionNo =? and CustomerID= ? " +
                                  "and TYear = ? and TMonth = ? and WeekNo = ? and SalesPersonID = ? and Channel = ? and " +
                                  "MAGID = ? and BrandID = ? and TargetType = ? ";

                cmd.Parameters.AddWithValue("VersionNo", nVersionNo);
                cmd.Parameters.AddWithValue("CustomerID", nCustomerID);
                cmd.Parameters.AddWithValue("TYear", nYear);
                cmd.Parameters.AddWithValue("TMonth", nMonth);
                cmd.Parameters.AddWithValue("WeekNo", nWeek);
                cmd.Parameters.AddWithValue("SalesPersonID", nSalesPersonID);
                cmd.Parameters.AddWithValue("Channel", nChannel);
                cmd.Parameters.AddWithValue("MAGID", nMAGID);
                cmd.Parameters.AddWithValue("BrandID", nBrand);
                cmd.Parameters.AddWithValue("TargetType", nTargetType);

                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }

        public bool CheckPlanMAGWeekTargetQty(int nVersionNo, int nCustomerID, int nYear, int nMonth, int nWeek, int nMAGID, int nBrandID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "Select * From t_PlanMAGWeekTargetQty where VersionNo =? and CustomerID= ? and TYear = ? and TMonth = ? and WeekNo = ? and MAGID = ? and BrandID = ? ";
                cmd.Parameters.AddWithValue("VersionNo", nVersionNo);
                cmd.Parameters.AddWithValue("CustomerID", nCustomerID);
                cmd.Parameters.AddWithValue("TYear", nYear);
                cmd.Parameters.AddWithValue("TMonth", nMonth);
                cmd.Parameters.AddWithValue("WeekNo", nWeek);
                cmd.Parameters.AddWithValue("MAGID", nMAGID);
                cmd.Parameters.AddWithValue("BrandID", nBrandID);

                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }
        public bool CheckSalesLeadNo(string sLeadNo, int nWarehouseID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "Select *From t_SalesLeadManagement Where LeadNo = '" + sLeadNo + "' and WarehouseID = " + nWarehouseID + "";

                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }

        public bool CheckSalesLeadHistory(int nHistoryID, int nWarehouseID, string sLeadNo)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "Select *From t_SalesLeadManagementHistory Where HistoryID = ? and WarehouseID = ? and LeadNo = ?";
                cmd.Parameters.AddWithValue("HistoryID", nHistoryID);
                cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);
                cmd.Parameters.AddWithValue("LeadNo", sLeadNo);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }

        public bool CheckPotentialCustomerID(int nID, int nOutletID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "Select * From t_PotentialCustomerList Where ID = ? and Outlet = ?";
                cmd.Parameters.AddWithValue("ID", nID);
                cmd.Parameters.AddWithValue("Outlet", nOutletID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }

        public bool CheckCustomerTempID(int nCustomerID, int nWarehouseID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "Select * From t_CustomerTemp Where CustomerID = ? and WarehouseID = ?";
                cmd.Parameters.AddWithValue("CustomerID", nCustomerID);
                cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }
        public bool CheckInvoiceReverseID(int nReverseID, int nWarehouseID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "Select * From t_InvoiceReverse Where ReverseID = ? and WarehouseID = ?";
                cmd.Parameters.AddWithValue("ReverseID", nReverseID);
                cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }

        public bool CheckExchangeOfferMRNo(string sMRNo)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "SELECT * FROM t_ExchangeOfferMR where MoneyReceiptNo= ? ";
                cmd.Parameters.AddWithValue("MoneyReceiptNo", sMRNo);

                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }

        public bool CheckEOVenderTranForMR(string sTranNo)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "SELECT * FROM t_ExchangeOfferVenderTran where VenderTranNo= ? ";
                cmd.Parameters.AddWithValue("VenderTranNo", sTranNo);

                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }

        public bool CheckOutletDisplayPosition(int nDisplayPositionID, int nWHID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "Select * From dbo.t_OutletDisplayPosition where DisplayPositionID = ? and WHID = ? ";
                cmd.Parameters.AddWithValue("DisplayPositionID", nDisplayPositionID);
                cmd.Parameters.AddWithValue("WHID", nWHID);

                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }
        public bool CheckOutletDisplayPositionHistory(int nDisplayPositionID, int nHistoryID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "Select * From dbo.t_OutletDisplayPositionHistory where DisplayPositionID = ? and HistoryID = ? ";
                cmd.Parameters.AddWithValue("DisplayPositionID", nDisplayPositionID);
                cmd.Parameters.AddWithValue("HistoryID", nHistoryID);

                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }

        #endregion

        #region Update Transfer Information

        /// <summary>
        ///  Stock Requisition
        /// </summary>
        /// 
        public void UpdateStockRequisitionInfo(DSRequisition oDSRequisition, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Stock Requisition Info Update

            try
            {
                foreach (DSRequisition.StockRequisitionRow oStockRequisitionRow in oDSRequisition.StockRequisition)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = " + (int)Dictionary.IsDownload.No + "  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", (int)Dictionary.IsDownload.Yes);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_StockRequisition");
                    cmd.Parameters.AddWithValue("DataID", oStockRequisitionRow.StockRequisitionID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }

        /// <summary>
        ///  Consumer Transfer Information
        /// </summary>
        /// 
        /// 
        public void UpdateConsumerTransferInfo(DSRetailConsumer oDSRetailConsumer, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Customer Transfer Info Update

            try
            {
                foreach (DSRetailConsumer.RetailConsumerRow oRetailConsumerRow in oDSRetailConsumer.RetailConsumer)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", (int)Dictionary.IsDownload.Yes);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_RetailConsumer");
                    cmd.Parameters.AddWithValue("DataID", oRetailConsumerRow.ConsumerID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();

                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }


        /// <summary>
        ///  Product Transfer Information
        /// </summary>
        /// <param name="oDSProductDetail"></param>
        /// 
        public void UpdateProductTransferInfo(DSProduct oDSProduct, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Product Transfer Info Update

            try
            {
                foreach (DSProduct.ProductRow oProductRow in oDSProduct.Product)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_Product");
                    cmd.Parameters.AddWithValue("DataID", oProductRow.ProductID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }

        public void UpdateProductTransferInfoFactory(DSProduct oDSProduct, int nLocationID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Product Transfer Info Update

            try
            {
                foreach (DSProduct.ProductRow oProductRow in oDSProduct.Product)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransferFactory SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and LocationID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_Product");
                    cmd.Parameters.AddWithValue("DataID", oProductRow.ProductID);
                    cmd.Parameters.AddWithValue("LocationID", nLocationID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }

        public void UpdateProductFeatureTypeTransferInfo(DSProduct oDSProductFeatureType, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Product Feature Type Transfer Info Update

            try
            {
                foreach (DSProduct.ProductFeatureTypeRow oProductFeatureTypeRow in oDSProductFeatureType.ProductFeatureType)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_ProductFeatureType");
                    cmd.Parameters.AddWithValue("DataID", oProductFeatureTypeRow.FeatureTypeID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }

        public void UpdateNewVatActivationInfo(DSBasicData oDSNewVatActivation, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// New Vat Activation Info Update

            try
            {
                foreach (DSBasicData.NewVatActivationRow oNewVatActivationRow in oDSNewVatActivation.NewVatActivation)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_NewVatActivation");
                    cmd.Parameters.AddWithValue("DataID", oNewVatActivationRow.ID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }

        public void UpdateBankGuarentyInfo(DSBank oDSBankGuarenty, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Bank Guarenty

            try
            {
                foreach (DSBank.BankGuarantyRow oBankGuarantyRow in oDSBankGuarenty.BankGuaranty)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_CustomerBankGuaranty");
                    cmd.Parameters.AddWithValue("DataID", oBankGuarantyRow.BGID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }

        public void UpdateCustomerAccountInfo(DSCustomer oDSCustomerAccount, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Customer Account

            try
            {
                foreach (DSCustomer.CustomerRow oCustomerRow in oDSCustomerAccount.Customer)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_CustomerAccount");
                    cmd.Parameters.AddWithValue("DataID", oCustomerRow.CustomerID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }

        public void UpdateTDActivationInfo(DSBasicData oDSTDActivation, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Customer Account

            try
            {
                foreach (DSBasicData.TDActivationRow oTDActivationRow in oDSTDActivation.TDActivation)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_TDActivation");
                    cmd.Parameters.AddWithValue("DataID", oTDActivationRow.ActivationID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }

        public void UpdateoDSPettyCashExpenseHeadInfo(DSBasicData oDSPettyCashExpenseHead, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Customer Account

            try
            {
                foreach (DSBasicData.PettyCashExpenseHeadRow oPettyCashExpenseHeadRow in oDSPettyCashExpenseHead.PettyCashExpenseHead)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_PettyCashExpenseHead");
                    cmd.Parameters.AddWithValue("DataID", oPettyCashExpenseHeadRow.ExpenseHeadID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }
        public void UpdatePromoDiscountSpecialAuthority(DSBasicData oDSPromoDiscountSpecialAuthority, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Promo Discount Special Authority

            try
            {
                foreach (DSBasicData.PromoDiscountSpecialAuthorityRow oPromoDiscountSpecialAuthorityRow in oDSPromoDiscountSpecialAuthority.PromoDiscountSpecialAuthority)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_PromoDiscountSpecialAuthority");
                    cmd.Parameters.AddWithValue("DataID", oPromoDiscountSpecialAuthorityRow.AuthorityID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }

        public void UpdatePromoDiscountAllData(DSPromotion oDSTDActivation, int nWarehouseID, string sTableName)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            try
            {
                foreach (DSPromotion.PromoDiscountRow oPromoDiscountRow in oDSTDActivation.PromoDiscount)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);
                    cmd.Parameters.AddWithValue("TableName", sTableName);
                    cmd.Parameters.AddWithValue("DataID", oPromoDiscountRow.DiscountID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }

        /// <summary>
        ///  Product Transfer Information
        /// </summary>
        /// <param name="oDSProductDetail"></param>
        /// 
        public void UpdateTPVatProductTransferInfo(DSTPVatProduct oDSTPVatProduct, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            ///TP Vat Product Transfer Info Update

            try
            {
                foreach (DSTPVatProduct.TPVatProductRow oTPVatProductRow in oDSTPVatProduct.TPVatProduct)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_TPVatProduct");
                    cmd.Parameters.AddWithValue("DataID", oTPVatProductRow.ProductID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }


        /// <summary>
        ///  Product PriceTransfer Information
        /// </summary>
        /// <param name="oDSProductDetail"></param>
        /// 
        public void UpdateProductPriceTransferInfo(DSFinishedGoodsPrice oDSFinishedGoodsPrice, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Product Price Transfer Info Update

            try
            {
                foreach (DSFinishedGoodsPrice.PriceRow oPriceRow in oDSFinishedGoodsPrice.Price)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_FinishedGoodsPrice");
                    cmd.Parameters.AddWithValue("DataID", oPriceRow.PriceID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }

        public void UpdateCustomerCreditLimit(DSCustomer oDSCustomerCreditLimit, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            try
            {
                foreach (DSCustomer.CustomerCreditLimitRow oCustomerCreditLimitRow in oDSCustomerCreditLimit.CustomerCreditLimit)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();
                    string dt = DateTime.Now.ToString("dd-MMM-yyyy");
                    sSql = "UPDATE t_DataTransfer SET IsDownload=2, UpdateDate='" + dt + "'  WHERE TableName='t_CustomerCreditLimit' and DataID=" + oCustomerCreditLimitRow.CreditLimitID + " and WarehouseID=" + nWarehouseID + " and IsDownload = 1";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    //cmd.Parameters.AddWithValue("IsDownload", 2);
                    //cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);
                    //cmd.Parameters.AddWithValue("DataID", oCustomerCreditLimitRow.CreditLimitID);
                    //cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }

        /// <summary>
        ///  Gift Product Group Transfer Information
        /// </summary>
        /// <param name="oDSProductDetail"></param>
        /// 
        public void UpdateProductGroupTransferInfo(DSProductGroups oDSProductGroups, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Product Group Transfer Info Update

            try
            {
                foreach (DSProductGroups.ProductGroupRow oProductGroupRow in oDSProductGroups.ProductGroup)
                {

                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_ProductGroup");
                    cmd.Parameters.AddWithValue("DataID", oProductGroupRow.PdtGroupId);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }

        /// <summary>
        ///  Gift Product Group Transfer Information
        /// </summary>
        /// <param name="oDSProductDetail"></param>
        /// 
        public void UpdateProductBrandTransferInfo(DSBrand oDSBrand, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Product Group Transfer Info Update

            try
            {
                foreach (DSBrand.BrandRow oBrandRow in oDSBrand.Brand)
                {

                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_Brand");
                    cmd.Parameters.AddWithValue("DataID", oBrandRow.BrandID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }
        /// <summary>
        ///  Update This System info
        /// </summary>
        /// 
        public void UpdateThisSystemInfo(DSThisSystem oDSThisSystem, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Product Group Transfer Info Update

            try
            {
                foreach (DSThisSystem.ThisSystemRow oThisSystemRow in oDSThisSystem.ThisSystem)
                {

                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_ThisSystem");
                    cmd.Parameters.AddWithValue("DataID", 1);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }
        /// <summary>
        ///  Product Transfer Information
        /// </summary>
        /// <param name="oDSProductDetail"></param>
        /// 
        public void UpdateEmployeeTransferInfo(DSEmployee oDSEmployee, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Employee Transfer Info Update

            try
            {
                foreach (DSEmployee.EmployeeRow oEmployeeRow in oDSEmployee.Employee)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "v_EmployeeDetails");
                    cmd.Parameters.AddWithValue("DataID", oEmployeeRow.EmployeeID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }

        /// <summary>
        ///  Warehouse Transfer Information
        /// </summary>
        /// <param name="oDSProductDetail"></param>
        /// 
        public void UpdateWarehouseTransferInfo(DSWarehouse oDSWarehouse, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Employee Transfer Info Update

            try
            {
                foreach (DSWarehouse.WarehouseRow oWarehouseRow in oDSWarehouse.Warehouse)
                {

                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_Warehouse");
                    cmd.Parameters.AddWithValue("DataID", oWarehouseRow.WarehouseID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }

        /// <summary>
        ///  Promotion Transfer Information
        /// </summary>
        /// <param name="oDSProductDetail"></param>
        /// 
        public void UpdatePromotionTransferInfo(DSPromotion oDSPromotion, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Promotion Transfer Info Update

            try
            {
                foreach (DSPromotion.SalesPromotionRow oSalesPromotionRow in oDSPromotion.SalesPromotion)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_SalesPromo");
                    cmd.Parameters.AddWithValue("DataID", oSalesPromotionRow.SalesPromotionID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }

        public void UpdatePromotionTransferInfoNew(DSPromotion oDSPromotion, int nWarehouseID, string sTableName, string sXMLFileName)
        {
            if (!DBController.Instance.CheckConnection())
            {
                DBController.Instance.OpenNewConnection();
            }
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Promotion Transfer Info Update

            try
            {
                foreach (DSPromotion.PromoRow oSalesPromotionRow in oDSPromotion.Promo)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?, XMLFileName = ?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);
                    cmd.Parameters.AddWithValue("XMLFileName", sXMLFileName);

                    cmd.Parameters.AddWithValue("TableName", sTableName);
                    cmd.Parameters.AddWithValue("DataID", oSalesPromotionRow.ConsumerPromoID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }
        

        /// <summary>
        ///  Bank Transfer Information
        /// </summary>
        /// 
        public void UpdateBankTransferInfo(DSBank oDSBank, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";


            try
            {
                foreach (DSBank.BankRow oBankRow in oDSBank.Bank)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", (int)Dictionary.IsDownload.Yes);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_Bank");
                    cmd.Parameters.AddWithValue("DataID", oBankRow.BankID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }

        /// <summary>
        ///  Bank Transfer Information
        /// </summary>
        /// 
        public void UpdateUnsoldDefectiveInfo(DSUnsoldDefectiveProduct oDSUnsoldDefectiveProduct, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";


            try
            {
                foreach (DSUnsoldDefectiveProduct.UnsoldDefectiveProductRow oUnsoldDefectiveProductRow in oDSUnsoldDefectiveProduct.UnsoldDefectiveProduct)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = ?  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", (int)Dictionary.IsDownload.Yes);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_UnsoldDefectiveProduct");
                    cmd.Parameters.AddWithValue("DataID", oUnsoldDefectiveProductRow.DefectiveID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);
                    cmd.Parameters.AddWithValue("IsDownload", (int)Dictionary.IsDownload.No);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }

        public void UpdateUnsoldDefectiveInfoNew(DSUnsoldDefectiveProduct oDSUnsoldDefectiveProduct, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";


            try
            {
                foreach (DSUnsoldDefectiveProduct.UnsoldDefectiveProductRow oUnsoldDefectiveProductRow in oDSUnsoldDefectiveProduct.UnsoldDefectiveProduct)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = ?  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", (int)Dictionary.IsDownload.Yes);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_UnsoldDefectiveProductNew");
                    cmd.Parameters.AddWithValue("DataID", oUnsoldDefectiveProductRow.DefectiveID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);
                    cmd.Parameters.AddWithValue("IsDownload", (int)Dictionary.IsDownload.No);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }
        /// <summary>
        ///  Showroom Transfer Information
        /// </summary>
        /// 
        public void UpdateShowroomTransferInfo(DSShowroom oDSShowroom, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";


            try
            {
                foreach (DSShowroom.ShowroomRow oShowroomRow in oDSShowroom.Showroom)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", (int)Dictionary.IsDownload.Yes);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_Showroom");
                    cmd.Parameters.AddWithValue("DataID", oShowroomRow.ShowroomID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }
        /// <summary>
        ///  Payment Mode Transfer Information
        /// </summary>
        /// 
        public void UpdatePaymentModeTransferInfo(DSPaymentMode oDSPaymentMode, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";


            try
            {
                foreach (DSPaymentMode.PaymentModeRow oPaymentModeRow in oDSPaymentMode.PaymentMode)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", (int)Dictionary.IsDownload.Yes);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_PaymentMode");
                    cmd.Parameters.AddWithValue("DataID", oPaymentModeRow.PaymentModeID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }
        /// <summary>
        ///  Sales Promotion Type Transfer Information
        /// </summary>
        /// 
        public void UpdateSalesPromotionTransferInfo(DSSalesPromotionType oDSSalesPromotionType, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";


            try
            {
                foreach (DSSalesPromotionType.SalesPromotionTypeRow oSalesPromotionTypeRow in oDSSalesPromotionType.SalesPromotionType)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", (int)Dictionary.IsDownload.Yes);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_SalesPromotionType");
                    cmd.Parameters.AddWithValue("DataID", oSalesPromotionTypeRow.SalesPromotionTypeID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }
        /// <summary>
        ///  Discount Reason Transfer Information
        /// </summary>
        /// 
        public void UpdateDiscountReasonTransferInfo(DSDiscountReason oDSDiscountReason, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";


            try
            {
                foreach (DSDiscountReason.DiscountReasonRow oDiscountReasonRow in oDSDiscountReason.DiscountReason)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", (int)Dictionary.IsDownload.Yes);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_DiscountReason");
                    cmd.Parameters.AddWithValue("DataID", oDiscountReasonRow.DiscountReasonID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }
        /// <summary>
        ///  Barcode Transfer Information
        /// </summary>
        /// <param name="oDSProductDetail"></param>
        /// 
        public void UpdateBarcodeTransferInfo(DSBarcode oDSBarcode, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Barcode Transfer Info Update

            try
            {
                foreach (DSBarcode.BarcodeRow oBarcodeRow in oDSBarcode.Barcode)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_ProductBarCodeDetail SET IsDownload=?, UpdateDate=?  WHERE  WarehouseID=? and ProductID=? and Barcode=? and IsDownload = 1 ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("WarehouseID", oBarcodeRow.WarehouseID);
                    cmd.Parameters.AddWithValue("ProductID", oBarcodeRow.ProductID);
                    cmd.Parameters.AddWithValue("Barcode", oBarcodeRow.Barcode);


                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }

        /// <summary>
        ///  Warranty Transfer Information
        /// </summary>
        /// <param name="oDSProductDetail"></param>
        /// 
        public void UpdateWarrantyTransferInfo(DSWarranty oDSWarranty, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Barcode Transfer Info Update

            try
            {
                foreach (DSWarranty.WarrantyParamRow oWarrantyParamRow in oDSWarranty.WarrantyParam)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=?  and IsDownload = 1 ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", (int)Dictionary.IsDownload.Yes);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_WarrantyParam");
                    cmd.Parameters.AddWithValue("DataID", oWarrantyParamRow.WarrantyParamID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }


        /// <summary>
        ///  Product Stock Transaction
        /// </summary>
        /// 
        /// 
        public void UpdateProductTranTypeInfo(DSProductTransactionType oDSProductTransactionType, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// product stock transaction

            try
            {
                foreach (DSProductTransactionType.ProductStockTranTypeRow oProductStockTranTypeRow in oDSProductTransactionType.ProductStockTranType)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=?  and IsDownload = 1 ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_ProductStockTranType");
                    cmd.Parameters.AddWithValue("DataID", oProductStockTranTypeRow.TranTypeID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }

        /// <summary>
        ///  Product Stock Transaction
        /// </summary>
        /// 
        /// 
        public void UpdateProductTranInfo(DSProductTransaction oDSProductTransaction, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// product stock transaction

            try
            {
                foreach (DSProductTransaction.ProductStockTranRow oProductStockTranRow in oDSProductTransaction.ProductStockTran)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_ProductStockTran");
                    cmd.Parameters.AddWithValue("DataID", oProductStockTranRow.TranId);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }

        public void UpdateTDDeliveryShipmentInfo(DSBasicData oDSTDDeliveryShipment, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// product stock transaction

            try
            {
                foreach (DSBasicData.TDDeliveryShipmentRow oTDDeliveryShipmentRow in oDSTDDeliveryShipment.TDDeliveryShipment)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_TDDeliveryShipment");
                    cmd.Parameters.AddWithValue("DataID", oTDDeliveryShipmentRow.ShipmentID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }

        public void UpdatePettyCashExpenseInfo(DSPettyCash oDSPettyCashExpense, int nWarehouseID)
        {
            // DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            if (!DBController.Instance.CheckConnection())
            {
                DBController.Instance.OpenNewConnection();
            }

            /// product stock transaction

            try
            {
                foreach (DSPettyCash.PettyCashExpenseRow oPettyCashExpenseRow in oDSPettyCashExpense.PettyCashExpense)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_PettyCashExpense");
                    cmd.Parameters.AddWithValue("DataID", oPettyCashExpenseRow.ID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                // DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }
        public void UpdateExchangeOfferInfo(DSPromoExchangeOffer oDSPromoExchangeOffer, int nWarehouseID)
        {
            // DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            if (!DBController.Instance.CheckConnection())
            {
                DBController.Instance.OpenNewConnection();
            }

            /// product stock transaction

            try
            {
                foreach (DSPromoExchangeOffer.PromoExchangeOfferRow oDSPromoExchgangeOfferRow in oDSPromoExchangeOffer.PromoExchangeOffer)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_PromoExchangeOffers");
                    cmd.Parameters.AddWithValue("DataID", oDSPromoExchgangeOfferRow.OfferId);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                // DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }
        public void UpdatePromoWarrantyInfo(DSPromoWarranty oDSPromoWarranty, int nWarehouseID)
        {
            // DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            if (!DBController.Instance.CheckConnection())
            {
                DBController.Instance.OpenNewConnection();
            }

            /// product stock transaction

            try
            {
                foreach (DSPromoWarranty.PromoWarrantyRow oDSPromoWarrantyRow in oDSPromoWarranty.PromoWarranty)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_PromoWarranty");
                    cmd.Parameters.AddWithValue("DataID", oDSPromoWarrantyRow.WarrantyId);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                // DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }

        public void UpdateDMSSalesOrder(DSSalesOrder oDSSalesOrder, int nWarehouseID)
        {
            // DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            if (!DBController.Instance.CheckConnection())
            {
                DBController.Instance.OpenNewConnection();
            }

            /// product stock transaction

            try
            {
                foreach (DSSalesOrder.DMSSecondarySalesOrderRow oDMSSecondarySalesOrderRow in oDSSalesOrder.DMSSecondarySalesOrder)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_DMSSecondarySalesOrder");
                    cmd.Parameters.AddWithValue("DataID", oDMSSecondarySalesOrderRow.OrderID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                // DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }


        public void UpdatePettyCashExpenceInfo(DSPettyCash oDSPettyCash, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Petty Cash Expense

            try
            {
                foreach (DSPettyCash.PettyCashExpenseRow oPettyCashExpenseRow in oDSPettyCash.PettyCashExpense)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_PettyCashExpense");
                    cmd.Parameters.AddWithValue("DataID", oPettyCashExpenseRow.ID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }

        ///
        // Update Office Tran Detail
        ///
        public void UpdateOfficeItemTran(DSOfficeItemTran oDSOfficeItemTran)
        {
            /// Insert Office Item Tran
            DSOfficeItemTran oDSOfficeItemTranDetail;

            try
            {
                foreach (DSOfficeItemTran.OfficeItemTranRow oOfficeItemTranRow in oDSOfficeItemTran.OfficeItemTran)
                {
                    OfficeItemTran oOfficeItemTran = new OfficeItemTran();

                    oOfficeItemTran.TranDate = oOfficeItemTranRow.TranDate;
                    oOfficeItemTran.CreateUserID = oOfficeItemTranRow.CreateUserID;
                    oOfficeItemTran.TranTypeID = oOfficeItemTranRow.TranTypeID;
                    oOfficeItemTran.CompanyID = oOfficeItemTranRow.CompanyID;
                    oOfficeItemTran.DepartmentID = oOfficeItemTranRow.DepartmentID;
                    oOfficeItemTran.EmployeeID = oOfficeItemTranRow.EmployeeID;
                    oOfficeItemTran.Remarks = oOfficeItemTranRow.Remarks;
                    oOfficeItemTran.Terminal = oOfficeItemTranRow.Terminal;
                    oOfficeItemTran.WarehouseID = oOfficeItemTranRow.WarehouseID;
                    oOfficeItemTran.Status = oOfficeItemTranRow.Status;
                    oOfficeItemTran.ApprovedDate = oOfficeItemTranRow.ApprovedDate;
                    oOfficeItemTran.AuthorizeUserID = oOfficeItemTranRow.AuthorizeUserID;
                    oOfficeItemTran.TranNo = oOfficeItemTranRow.TranNo;
                    oOfficeItemTran.TranID = oOfficeItemTranRow.TranID;

                    oOfficeItemTran.EditForWEB();

                    DataRow[] oDR = oDSOfficeItemTran.OfficeItemTranDetail.Select(" TranID= " + oOfficeItemTranRow.TranID + " and  WarehouseID= " + oOfficeItemTranRow.WarehouseID + "");
                    oDSOfficeItemTranDetail = new DSOfficeItemTran();
                    oDSOfficeItemTranDetail.Merge(oDR);
                    oDSOfficeItemTranDetail.OfficeItemTranDetail.AcceptChanges();
                    OfficeItemTranDetail OOfficeItemTranDetail = new OfficeItemTranDetail();
                    OOfficeItemTranDetail.TranID = oOfficeItemTranRow.TranID;
                    OOfficeItemTranDetail.WarehouseID = oOfficeItemTranRow.WarehouseID;
                    OOfficeItemTranDetail.Delete();
                    foreach (DSOfficeItemTran.OfficeItemTranDetailRow oOfficeItemTranDetailRow in oDSOfficeItemTranDetail.OfficeItemTranDetail)
                    {

                        OfficeItemTranDetail oOITD = new OfficeItemTranDetail();
                        oOITD.TranID = oOfficeItemTranRow.TranID;
                        oOITD.WarehouseID = oOfficeItemTranRow.WarehouseID;
                        oOITD.ID = oOfficeItemTranDetailRow.ID;
                        oOITD.RequisitionQty = oOfficeItemTranDetailRow.RequisitionQty;
                        oOITD.AuthorizeQty = oOfficeItemTranDetailRow.AuthorizeQty;
                        oOITD.Add(oOITD.TranID);

                    }

                }
            }
            catch (Exception ex)
            {
                throw (ex);
            }
        }

        /// <summary>
        ///  Update User
        /// </summary>
        /// 
        /// 
        public void UpdateUserTransferInfo(DSUser oDSUser, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            try
            {
                foreach (DSUser.UserRow oUserRow in oDSUser.User)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_User");
                    cmd.Parameters.AddWithValue("DataID", int.Parse(oUserRow.UserID.ToString()));
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }

        /// <summary>
        ///  Update Customer Tran
        /// </summary>
        /// 
        /// 
        public void UpdateCustomerTranInfo(DSCustomerTransaction oDSCustomerTransaction, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            try
            {
                foreach (DSCustomerTransaction.CustomerTranRow oCustomerTranRow in oDSCustomerTransaction.CustomerTran)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_CustomerTran");
                    cmd.Parameters.AddWithValue("DataID", int.Parse(oCustomerTranRow.TranID.ToString()));
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }

        /// <summary>
        ///  Update Customer Tran
        /// </summary>
        /// 
        /// 
        public void UpdateCustomerInfo(DSCustomer oDSCustomer, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            try
            {
                foreach (DSCustomer.CustomerRow oCustomerRow in oDSCustomer.Customer)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_Customer");
                    cmd.Parameters.AddWithValue("DataID", int.Parse(oCustomerRow.CustomerID.ToString()));
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }


        public void UpdateCustomerTypeInfo(DSCustomerType oDSCustomerType, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            try
            {
                foreach (DSCustomerType.CustomerTypeRow oCustomerRow in oDSCustomerType.CustomerType)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_CustomerType");
                    cmd.Parameters.AddWithValue("DataID", int.Parse(oCustomerRow.CustTypeID.ToString()));
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }
        /// <summary>
        ///  Product Transfer Information
        /// </summary>
        /// <param name="oDSProductDetail"></param>
        /// 
        public void UpdateOfficeItemTransferInfo(DSOfficeItem oDSOfficeItem, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Product Transfer Info Update

            try
            {
                foreach (DSOfficeItem.OfficeItemRow oOfficeItemRow in oDSOfficeItem.OfficeItem)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_OfficeItems");
                    cmd.Parameters.AddWithValue("DataID", oOfficeItemRow.ID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }
        /// <summary>
        ///  Product Transfer Information
        /// </summary>
        /// <param name="oDSProductDetail"></param>
        /// 
        public void UpdateOfficeItemTranDetailInfo(DSOfficeItemTran oDSOfficeItemTran, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Product Transfer Info Update

            try
            {
                foreach (DSOfficeItemTran.OfficeItemTranRow oOfficeItemTranRow in oDSOfficeItemTran.OfficeItemTran)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", (int)Dictionary.IsDownload.Yes);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_OfficeItemTran");
                    cmd.Parameters.AddWithValue("DataID", oOfficeItemTranRow.TranID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }
        /// <summary>
        ///  Credit Approval Information
        /// </summary>
        /// 
        public void UpdateCreditApprovalInfo(DSCustmerCreditApprval oDSCustmerCreditApprval, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Product Transfer Info Update

            try
            {
                foreach (DSCustmerCreditApprval.CustomerCreditApprovalRow oCustomerCreditApprovalRow in oDSCustmerCreditApprval.CustomerCreditApproval)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = " + (int)Dictionary.IsDownload.No + "  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", (int)Dictionary.IsDownload.Yes);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_CustomerCreditApproval");
                    cmd.Parameters.AddWithValue("DataID", oCustomerCreditApprovalRow.ID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }


        /// <summary>
        ///  Update Calendar Week Info
        /// </summary>
        /// <param name="oDSProductDetail"></param>
        /// 
        public void UpdateCalendarWeekInfo(DSCalendarWeek oDSCalendarWeek, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Product Transfer Info Update

            try
            {
                foreach (DSCalendarWeek.CalendarWeekRow oCalendarWeekRow in oDSCalendarWeek.CalendarWeek)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_CalendarWeek");
                    cmd.Parameters.AddWithValue("DataID", oCalendarWeekRow.CalendarID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }


        /// <summary>
        ///  Update PlanCustomer Target Info
        /// </summary>
        /// <param name="oDSProductDetail"></param>
        /// 
        public void UpdatePlanCustomerTargetInfo(DSPlanCustomerTarget oDSPlanCustomerTarget, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            try
            {
                foreach (DSPlanCustomerTarget.PlanCustomerTargetRow oPlanCustomerTargetRow in oDSPlanCustomerTarget.PlanCustomerTarget)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_PlanCustomerTarget");
                    cmd.Parameters.AddWithValue("DataID", oPlanCustomerTargetRow.VersionNo);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }

        /// <summary>
        ///  Update PlanCustomer Target Info
        /// </summary>
        /// <param name="oDSProductDetail"></param>
        /// 
        public void UpdatePlanExecutiveWeekTargetInfo(DSPlanExecutiveWeekTarget oDSPlanExecutiveWeekTarget, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            try
            {
                foreach (DSPlanExecutiveWeekTarget.PlanExecutiveWeekTargetRow oPlanExecutiveWeekTargetRow in oDSPlanExecutiveWeekTarget.PlanExecutiveWeekTarget)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_PlanExecutiveWeekTarget");
                    cmd.Parameters.AddWithValue("DataID", oPlanExecutiveWeekTargetRow.VersionNo);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }

        /// <summary>
        /// UpdatePlanExecutiveLeadTargetInfo
        /// </summary>
        /// <param name="oDSProductDetail"></param>
        /// 
        public void UpdatePlanExecutiveLeadTargetInfo(DSPlanExecutiveWeekTarget oDSPlanExecutiveWeekTarget, int nWarehouseID, string sXMLFileName)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            try
            {
                foreach (DSPlanExecutiveWeekTarget.PlanExecutiveWeekTargetRow oPlanExecutiveWeekTargetRow in oDSPlanExecutiveWeekTarget.PlanExecutiveWeekTarget)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?, XMLFileName=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);
                    cmd.Parameters.AddWithValue("XMLFileName", sXMLFileName);

                    cmd.Parameters.AddWithValue("TableName", "t_PlanExecutiveLeadTarget");
                    cmd.Parameters.AddWithValue("DataID", oPlanExecutiveWeekTargetRow.VersionNo);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }

        /// <summary>
        ///  Update PlanCustomer Target Info
        /// </summary>
        /// <param name="oDSProductDetail"></param>
        /// 
        public void UpdatePlanMAGWeekTargetInfo(DSPlanMAGWeekTargetQty oDSPlanMAGWeekTargetQty, int nWarehouseID, string sXMLFileName)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            try
            {
                foreach (DSPlanMAGWeekTargetQty.PlanMAGWeekTargetQtyRow oPlanMAGWeekTargetQtyRow in oDSPlanMAGWeekTargetQty.PlanMAGWeekTargetQty)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?, XMLFileName=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);
                    cmd.Parameters.AddWithValue("XMLFileName", sXMLFileName);

                    cmd.Parameters.AddWithValue("TableName", "t_PlanMAGWeekTargetQty");
                    cmd.Parameters.AddWithValue("DataID", oPlanMAGWeekTargetQtyRow.VersionNo);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }


        /// <summary>
        ///  Update PlanCustomer Target Info
        /// </summary>
        /// 
        public void UpdateOutletDisplayPositionInfo(DSOutletDisplayPosition oDSOutletDisplayPosition, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            try
            {
                foreach (DSOutletDisplayPosition.OutletDisplayPositionRow oOutletDisplayPositionRow in oDSOutletDisplayPosition.OutletDisplayPosition)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_OutletDisplayPosition");
                    cmd.Parameters.AddWithValue("DataID", oOutletDisplayPositionRow.DisplayPositionID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }

        /// <summary>
        ///  Update Temp Customer Tran
        /// </summary>
        /// 
        public void UpdateTempCustomerTran(DSCustomerTemp oDSCustomerTemp, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";


            try
            {
                foreach (DSCustomerTemp.CustomerTempRow oCustomerTempRow in oDSCustomerTemp.CustomerTemp)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", (int)Dictionary.IsDownload.Yes);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_CustomerTemp");
                    cmd.Parameters.AddWithValue("DataID", oCustomerTempRow.CustomerID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }

        /// <summary>
        ///  Update Invoice Reverse Tran
        /// </summary>
        /// 
        public void UpdateInvoiceReverseTran(DSInvoiceReverse oDSInvoiceReverse, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";
            try
            {
                foreach (DSInvoiceReverse.InvoiceReverseRow oInvoiceReverseRow in oDSInvoiceReverse.InvoiceReverse)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", (int)Dictionary.IsDownload.Yes);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_InvoiceReverse");
                    cmd.Parameters.AddWithValue("DataID", oInvoiceReverseRow.ReverseID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }


        public void UpdateExchangeOfferMRInfo(DSExchangeOfferMR oDSExchangeOfferMR, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";
            try
            {
                foreach (DSExchangeOfferMR.ExchangeOfferMRRow oExchangeOfferMRRow in oDSExchangeOfferMR.ExchangeOfferMR)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", (int)Dictionary.IsDownload.Yes);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_ExchangeOfferMR");
                    cmd.Parameters.AddWithValue("DataID", oExchangeOfferMRRow.MoneyReceiptID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }
        /// <summary>
        ///  UpdateExchangeOfferVender
        /// </summary>
        /// 
        public void UpdateExchangeOfferVender(DSExchangeOfferVender oDSExchangeOfferVender, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";
            try
            {
                foreach (DSExchangeOfferVender.ExchangeOfferVenderRow oExchangeOfferVenderRow in oDSExchangeOfferVender.ExchangeOfferVender)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", (int)Dictionary.IsDownload.Yes);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_ExchangeOfferVender");
                    cmd.Parameters.AddWithValue("DataID", oExchangeOfferVenderRow.VenderID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }

        /// <summary>
        ///  UpdateExchangeOfferVenderTran
        /// </summary>
        /// 
        public void UpdateExchangeOfferVenderTran(DSExchangeOfferVenderTran oDSExchangeOfferVenderTran, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";
            try
            {
                foreach (DSExchangeOfferVenderTran.ExchangeOfferVenderTranRow oExchangeOfferVenderTranRow in oDSExchangeOfferVenderTran.ExchangeOfferVenderTran)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", (int)Dictionary.IsDownload.Yes);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_ExchangeOfferVenderTran");
                    cmd.Parameters.AddWithValue("DataID", oExchangeOfferVenderTranRow.VenderTranID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }

        /// <summary>
        ///  Product Transfer Information
        /// </summary>
        /// <param name="oDSProductDetail"></param>
        /// 
        public void UpdateExchangeOfferJobInfo(DSExchangeOfferJob oDSExchangeOfferJob, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Product Transfer Info Update

            try
            {
                foreach (DSExchangeOfferJob.ExchangeOfferJobRow oExchangeOfferJobRow in oDSExchangeOfferJob.ExchangeOfferJob)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", (int)Dictionary.IsDownload.Yes);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_ExchangeOfferJob");
                    cmd.Parameters.AddWithValue("DataID", oExchangeOfferJobRow.JobID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }

        public void UpdateSalesInvoiceEcommerceInfo(DSSalesInvoiceEcommerce oDSSalesInvoiceEcommerce, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            try
            {
                foreach (DSSalesInvoiceEcommerce.SalesInvoiceEcommerceRow oSalesInvoiceEcommerceRow in oDSSalesInvoiceEcommerce.SalesInvoiceEcommerce)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", (int)Dictionary.IsDownload.Yes);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_SalesInvoiceEcommerce");
                    cmd.Parameters.AddWithValue("DataID", oSalesInvoiceEcommerceRow.EComOrderID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }

        public void UpdateSalesLeadInfo(DSSalesLead oDSSalesLead, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";


            try
            {
                foreach (DSSalesLead.SalesLeadRow oSalesLeadRow in oDSSalesLead.SalesLead)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", (int)Dictionary.IsDownload.Yes);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_SalesLeadManagement");
                    cmd.Parameters.AddWithValue("DataID", oSalesLeadRow.LeadID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }
        public void UpdateSalesLeadHistoryInfo(DSSalesLead oDSSalesLead, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";


            try
            {
                foreach (DSSalesLead.SalesLeadRow oSalesLeadRow in oDSSalesLead.SalesLead)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", (int)Dictionary.IsDownload.Yes);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_SalesLeadManagementHistory");
                    cmd.Parameters.AddWithValue("DataID", oSalesLeadRow.HistoryID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }
        public int GetWarehouseWiseStock(string sWarehouseCode, string sProductCode)
        {
            int nStockQty = 0;
            try
            {
                DBController.Instance.OpenNewConnection();
                OleDbCommand cmd = DBController.Instance.GetCommand();

                //cmd.CommandText = "Select isnull(isnull(CurrentStock,0)-isnull(DDStock,0),0) as CurrentStock From t_ProductStock a " +
                //                "inner join t_Warehouse b on a.WarehouseID = b.WarehouseID " +
                //                "left outer join " +
                //                "( " +
                //                "Select WarehouseID, DataID as ProductID, count(Field1) DDStock " +
                //                "From TELSYSDB.DBO.t_DataMonitoring where TableName = 't_ProductStockSerial' " +
                //                "and Field1 in (Select BarcodeSL From t_UnsoldDefectiveProduct " +
                //                "union All " +
                //                "Select ProductSerialNo From t_OutletDisplayPosition) " +
                //                "group by WarehouseID,DataID " +
                //                ") c on a.WarehouseID = b.WarehouseID and a.ProductID = c.ProductID " +
                //                "inner join t_Product d on a.ProductID = d.ProductID " +
                //                "where ShortCode = '" + sWarehouseCode + "' and ProductCode = '" + sProductCode + "'";


                cmd.CommandText = "Select isnull(CurrentStock,0) as CurrentStock From t_ProductStock a " +
                                "inner join t_Warehouse b on a.WarehouseID = b.WarehouseID " +
                                "inner join t_Product d on a.ProductID = d.ProductID " +
                                "where ShortCode = '" + sWarehouseCode + "' and ProductCode = '" + sProductCode + "'";
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                if (reader.Read())
                {
                    nStockQty = Convert.ToInt32(reader["CurrentStock"]);
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Warehouse & product wise Stock for e-commerce site");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting Warehouse & product wise Stock for e-commerce site /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();
            return nStockQty;
        }
        #endregion

        public InvoiceReverse GetDataForInvoiceReverse(InvoiceReverse oInvoiceReverse, DSInvoiceReverse.InvoiceReverseRow oInvoiceReverseRow, DSInvoiceReverse oDSInvoiceReverse)
        {
            DSSalesInvoice oDSSalesInvoiceDetail = new DSSalesInvoice();

            oInvoiceReverse = new InvoiceReverse();

            oInvoiceReverse.ReverseID = oInvoiceReverseRow.ReverseID;
            oInvoiceReverse.WarehouseID = oInvoiceReverseRow.WarehouseID;
            oInvoiceReverse.InvoiceNo = oInvoiceReverseRow.InvoiceNo;
            oInvoiceReverse.Reason = oInvoiceReverseRow.Reason;
            oInvoiceReverse.CreateDate = oInvoiceReverseRow.CreateDate;
            oInvoiceReverse.CreateUserID = oInvoiceReverseRow.CreateUserID;
            if (oInvoiceReverseRow.IsUpdateDateNull())
                oInvoiceReverse.UpdateDate = null;
            else oInvoiceReverse.UpdateDate = oInvoiceReverseRow.UpdateDate;
            if (oInvoiceReverseRow.IsUpdateUserIDNull())
                oInvoiceReverse.UpdateUserID = -1;
            else oInvoiceReverse.UpdateUserID = oInvoiceReverseRow.UpdateUserID;
            oInvoiceReverse.Status = oInvoiceReverseRow.Status;


            DataRow[] oDR = oDSInvoiceReverse.InvoiceReverseDetail.Select(" ReverseID= '" + oInvoiceReverseRow.ReverseID + "'");
            oDSInvoiceReverse.Merge(oDR);
            oDSInvoiceReverse.AcceptChanges();

            foreach (DSInvoiceReverse.InvoiceReverseDetailRow oInvoiceReverseDetailRow in oDSInvoiceReverse.InvoiceReverseDetail)
            {
                InvoiceReverseDetail _oInvoiceReverseDetail = new InvoiceReverseDetail();

                _oInvoiceReverseDetail.ID = oInvoiceReverseDetailRow.ID;
                _oInvoiceReverseDetail.ReverseID = oInvoiceReverseDetailRow.ReverseID;
                _oInvoiceReverseDetail.WarehouseID = oInvoiceReverseDetailRow.WarehouseID;
                _oInvoiceReverseDetail.ProductID = oInvoiceReverseDetailRow.ProductID;
                _oInvoiceReverseDetail.ProductSerial = oInvoiceReverseDetailRow.ProductSerial;
                _oInvoiceReverseDetail.StockType = oInvoiceReverseDetailRow.StockType;
                _oInvoiceReverseDetail.DefectiveType = oInvoiceReverseDetailRow.DefectiveType;
                if (oInvoiceReverseDetailRow.IsFaultDescriptionNull())
                    oInvoiceReverseDetailRow.FaultDescription = null;
                else _oInvoiceReverseDetail.FaultDesc = oInvoiceReverseDetailRow.FaultDescription;
                if (oInvoiceReverseDetailRow.IsFaultRemarksNull())
                    oInvoiceReverseDetailRow.FaultRemarks = null;
                else _oInvoiceReverseDetail.FaultRemarks = oInvoiceReverseDetailRow.FaultRemarks;
                if (oInvoiceReverseDetailRow.IsReasonNull())
                    oInvoiceReverseDetailRow.Reason = null;
                else _oInvoiceReverseDetail.Reason = oInvoiceReverseDetailRow.Reason;
                if (oInvoiceReverseDetailRow.IsJobNoNull())
                    oInvoiceReverseDetailRow.JobNo = null;
                else _oInvoiceReverseDetail.JobNo = oInvoiceReverseDetailRow.JobNo;

                oInvoiceReverse.Add(_oInvoiceReverseDetail);
            }
            return oInvoiceReverse;
        }

        //public void InsertExtendedWarranty(DSExtendedWarranty oDSExtendedWarranty)
        //{

        //    OleDbCommand cmd = DBController.Instance.GetCommand();
        //    string sSql = "";

        //    /// ExtendedWarranty Insert
        //    foreach (DSExtendedWarranty.ExtendedWarrantyRow oExtendedWarrantyRow in oDSExtendedWarranty.ExtendedWarranty)
        //    {
        //        if (CheckExtendedWarranty(oExtendedWarrantyRow.ID, oExtendedWarrantyRow.WarehouseID))
        //        {
        //            if (!DBController.Instance.CheckConnection())
        //            {
        //                DBController.Instance.OpenNewConnection();
        //            }
        //            cmd.Dispose();

        //            cmd = DBController.Instance.GetCommand();

        //            //sSql = "SELECT MAX([ID]) FROM t_ExtendedWarranty";
        //            //cmd.CommandText = sSql;
        //            //object maxID = cmd.ExecuteScalar();
        //            //if (maxID == DBNull.Value)
        //            //{
        //            //    nMaxID = 1;
        //            //}
        //            //else
        //            //{
        //            //    nMaxID = Convert.ToInt32(maxID) + 1;
        //            //}


        //            sSql = "INSERT INTO t_ExtendedWarranty (ID, WarehouseID, SmartWarrantyID, ConsumerID, IssueDate, ProductID, ProductSerialNo, CertificateNo, InvoiceNo, InvoiceDate, ExtendedWarrantyStartDate, ExtendedWarrantyEndDate, PaymentModeID, Amount, BankID, CardType, POSMachineID, InstrumentNo, InstrumentDate, CardCategory, ApprovalNo, CreateDate, CreateUserID) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
        //            try
        //            {
        //                cmd.CommandText = sSql;
        //                cmd.CommandType = CommandType.Text;

        //                cmd.Parameters.AddWithValue("ID", oExtendedWarrantyRow.ID);
        //                cmd.Parameters.AddWithValue("WarehouseID", oExtendedWarrantyRow.WarehouseID);
        //                cmd.Parameters.AddWithValue("SmartWarrantyID", oExtendedWarrantyRow.SmartWarrantyID);
        //                cmd.Parameters.AddWithValue("ConsumerID", oExtendedWarrantyRow.ConsumerID);
        //                cmd.Parameters.AddWithValue("IssueDate", oExtendedWarrantyRow.IssueDate);
        //                cmd.Parameters.AddWithValue("ProductID", oExtendedWarrantyRow.ProductID);
        //                cmd.Parameters.AddWithValue("ProductSerialNo", oExtendedWarrantyRow.ProductSerialNo);
        //                cmd.Parameters.AddWithValue("CertificateNo", oExtendedWarrantyRow.CertificateNo);
        //                cmd.Parameters.AddWithValue("InvoiceNo", oExtendedWarrantyRow.InvoiceNo);
        //                cmd.Parameters.AddWithValue("InvoiceDate", oExtendedWarrantyRow.InvoiceDate);
        //                cmd.Parameters.AddWithValue("ExtendedWarrantyStartDate", oExtendedWarrantyRow.ExtendedWarrantyStartDate);
        //                cmd.Parameters.AddWithValue("ExtendedWarrantyEndDate", oExtendedWarrantyRow.ExtendedWarrantyEndDate);
        //                cmd.Parameters.AddWithValue("PaymentModeID", oExtendedWarrantyRow.PaymentModeID);
        //                cmd.Parameters.AddWithValue("Amount", oExtendedWarrantyRow.Amount);
        //                if (oExtendedWarrantyRow["BankID"] != DBNull.Value)
        //                    cmd.Parameters.AddWithValue("BankID", oExtendedWarrantyRow.BankID);
        //                else cmd.Parameters.AddWithValue("BankID", null);
        //                if (oExtendedWarrantyRow["CardType"] != DBNull.Value)
        //                    cmd.Parameters.AddWithValue("CardType", oExtendedWarrantyRow.CardType);
        //                else cmd.Parameters.AddWithValue("CardType", null);
        //                if (oExtendedWarrantyRow["POSMachineID"] != DBNull.Value)
        //                    cmd.Parameters.AddWithValue("POSMachineID", oExtendedWarrantyRow.POSMachineID);
        //                else cmd.Parameters.AddWithValue("POSMachineID", null);
        //                if (oExtendedWarrantyRow["InstrumentNo"] != DBNull.Value)
        //                    cmd.Parameters.AddWithValue("InstrumentNo", oExtendedWarrantyRow.InstrumentNo);
        //                else cmd.Parameters.AddWithValue("InstrumentNo", null);
        //                if (oExtendedWarrantyRow["InstrumentDate"] != DBNull.Value)
        //                    cmd.Parameters.AddWithValue("InstrumentDate", oExtendedWarrantyRow.InstrumentDate);
        //                else cmd.Parameters.AddWithValue("InstrumentDate", null);
        //                if (oExtendedWarrantyRow["CardCategory"] != DBNull.Value)
        //                    cmd.Parameters.AddWithValue("CardCategory", oExtendedWarrantyRow.CardCategory);
        //                else cmd.Parameters.AddWithValue("CardCategory", null);
        //                if (oExtendedWarrantyRow["ApprovalNo"] != DBNull.Value)
        //                    cmd.Parameters.AddWithValue("ApprovalNo", oExtendedWarrantyRow.ApprovalNo);
        //                else cmd.Parameters.AddWithValue("ApprovalNo", null);
        //                cmd.Parameters.AddWithValue("CreateDate", oExtendedWarrantyRow.CreateDate);
        //                cmd.Parameters.AddWithValue("CreateUserID", oExtendedWarrantyRow.CreateUserID);


        //                cmd.ExecuteNonQuery();
        //                cmd.Dispose();

        //            }
        //            catch (Exception ex)
        //            {
        //                DBController.Instance.RollbackTransaction();
        //                throw (ex);
        //            }
        //        }
        //        else
        //        {
        //            try
        //            {
        //                if (!DBController.Instance.CheckConnection())
        //                {
        //                    DBController.Instance.OpenNewConnection();
        //                }

        //                cmd.Dispose();
        //                cmd = DBController.Instance.GetCommand();

        //                sSql = "UPDATE t_ExtendedWarranty SET  SmartWarrantyID = ?, ConsumerID = ?, IssueDate = ?, ProductID = ?, ProductSerialNo = ?, CertificateNo = ?, InvoiceNo = ?, InvoiceDate = ?, ExtendedWarrantyStartDate = ?, ExtendedWarrantyEndDate = ?, PaymentModeID = ?, Amount = ?, BankID = ?, CardType = ?, POSMachineID = ?, InstrumentNo = ?, InstrumentDate = ?, CardCategory = ?, ApprovalNo = ?, CreateDate = ?, CreateUserID = ? WHERE ID = ? and WarehouseID = ?";

        //                cmd.CommandText = sSql;
        //                cmd.CommandType = CommandType.Text;

        //                cmd.Parameters.AddWithValue("SmartWarrantyID", oExtendedWarrantyRow.SmartWarrantyID);
        //                cmd.Parameters.AddWithValue("ConsumerID", oExtendedWarrantyRow.ConsumerID);
        //                cmd.Parameters.AddWithValue("IssueDate", oExtendedWarrantyRow.IssueDate);
        //                cmd.Parameters.AddWithValue("ProductID", oExtendedWarrantyRow.ProductID);
        //                cmd.Parameters.AddWithValue("ProductSerialNo", oExtendedWarrantyRow.ProductSerialNo);
        //                cmd.Parameters.AddWithValue("CertificateNo", oExtendedWarrantyRow.CertificateNo);
        //                cmd.Parameters.AddWithValue("InvoiceNo", oExtendedWarrantyRow.InvoiceNo);
        //                cmd.Parameters.AddWithValue("InvoiceDate", oExtendedWarrantyRow.InvoiceDate);
        //                cmd.Parameters.AddWithValue("ExtendedWarrantyStartDate", oExtendedWarrantyRow.ExtendedWarrantyStartDate);
        //                cmd.Parameters.AddWithValue("ExtendedWarrantyEndDate", oExtendedWarrantyRow.ExtendedWarrantyEndDate);
        //                cmd.Parameters.AddWithValue("PaymentModeID", oExtendedWarrantyRow.PaymentModeID);
        //                cmd.Parameters.AddWithValue("Amount", oExtendedWarrantyRow.Amount);
        //                if (oExtendedWarrantyRow["BankID"] != DBNull.Value)
        //                    cmd.Parameters.AddWithValue("BankID", oExtendedWarrantyRow.BankID);
        //                else cmd.Parameters.AddWithValue("BankID", null);
        //                if (oExtendedWarrantyRow["CardType"] != DBNull.Value)
        //                    cmd.Parameters.AddWithValue("CardType", oExtendedWarrantyRow.CardType);
        //                else cmd.Parameters.AddWithValue("CardType", null);
        //                if (oExtendedWarrantyRow["POSMachineID"] != DBNull.Value)
        //                    cmd.Parameters.AddWithValue("POSMachineID", oExtendedWarrantyRow.POSMachineID);
        //                else cmd.Parameters.AddWithValue("POSMachineID", null);
        //                if (oExtendedWarrantyRow["InstrumentNo"] != DBNull.Value)
        //                    cmd.Parameters.AddWithValue("InstrumentNo", oExtendedWarrantyRow.InstrumentNo);
        //                else cmd.Parameters.AddWithValue("InstrumentNo", null);
        //                if (oExtendedWarrantyRow["InstrumentDate"] != DBNull.Value)
        //                    cmd.Parameters.AddWithValue("InstrumentDate", oExtendedWarrantyRow.InstrumentDate);
        //                else cmd.Parameters.AddWithValue("InstrumentDate", null);
        //                if (oExtendedWarrantyRow["CardCategory"] != DBNull.Value)
        //                    cmd.Parameters.AddWithValue("CardCategory", oExtendedWarrantyRow.CardCategory);
        //                else cmd.Parameters.AddWithValue("CardCategory", null);
        //                if (oExtendedWarrantyRow["ApprovalNo"] != DBNull.Value)
        //                    cmd.Parameters.AddWithValue("ApprovalNo", oExtendedWarrantyRow.ApprovalNo);
        //                else cmd.Parameters.AddWithValue("ApprovalNo", null);
        //                cmd.Parameters.AddWithValue("CreateDate", oExtendedWarrantyRow.CreateDate);
        //                cmd.Parameters.AddWithValue("CreateUserID", oExtendedWarrantyRow.CreateUserID);

        //                cmd.Parameters.AddWithValue("ID", oExtendedWarrantyRow.ID);
        //                cmd.Parameters.AddWithValue("WarehouseID", oExtendedWarrantyRow.WarehouseID);


        //                int nCount = cmd.ExecuteNonQuery();
        //                cmd.Dispose();

        //            }
        //            catch (Exception ex)
        //            {
        //                DBController.Instance.RollbackTransaction();
        //                throw (ex);
        //            }
        //        }


        //    }

        //    DBController.Instance.CommitTransaction();
        //}

        //public DSExtendedWarranty GetExtendedWarrantyData(DSExtendedWarranty oDSExtendedWarranty, int nWarehouseID)
        //{
        //    oDSExtendedWarranty = new DSExtendedWarranty();
        //    try
        //    {
        //        if (!DBController.Instance.CheckConnection())
        //        {
        //            DBController.Instance.OpenNewConnection();
        //        }

        //        OleDbCommand cmd = DBController.Instance.GetCommand();
        //        cmd.CommandText = "Select a.* from t_ExtendedWarranty a " +
        //                        " inner join t_DataTransfer b on b.DataID=a.ID " +
        //                        " where b.TableName='t_ExtendedWarranty' and  " +
        //                        " b.IsDownload=1 and b.WarehouseID= " + nWarehouseID + "";


        //        cmd.CommandType = CommandType.Text;
        //        IDataReader reader = cmd.ExecuteReader();
        //        while (reader.Read())
        //        {
        //            DSExtendedWarranty.ExtendedWarrantyRow oExtendedWarrantyRow = oDSExtendedWarranty.ExtendedWarranty.NewExtendedWarrantyRow();

        //            oExtendedWarrantyRow.ID = (int)reader["ID"];
        //            oExtendedWarrantyRow.WarehouseID = (int)reader["WarehouseID"];
        //            oExtendedWarrantyRow.SmartWarrantyID = (int)reader["SmartWarrantyID"];
        //            oExtendedWarrantyRow.ConsumerID = (int)reader["ConsumerID"];
        //            oExtendedWarrantyRow.IssueDate = Convert.ToDateTime(reader["IssueDate"].ToString());
        //            oExtendedWarrantyRow.ProductID = (int)reader["ProductID"];
        //            oExtendedWarrantyRow.ProductSerialNo = (string)reader["ProductSerialNo"];
        //            oExtendedWarrantyRow.CertificateNo = (string)reader["CertificateNo"];
        //            oExtendedWarrantyRow.InvoiceNo = (string)reader["InvoiceNo"];
        //            oExtendedWarrantyRow.InvoiceDate = Convert.ToDateTime(reader["InvoiceDate"].ToString());
        //            oExtendedWarrantyRow.ExtendedWarrantyStartDate = Convert.ToDateTime(reader["ExtendedWarrantyStartDate"].ToString());
        //            oExtendedWarrantyRow.ExtendedWarrantyEndDate = Convert.ToDateTime(reader["ExtendedWarrantyEndDate"].ToString());
        //            oExtendedWarrantyRow.PaymentModeID = (int)reader["PaymentModeID"];
        //            oExtendedWarrantyRow.Amount = Convert.ToDouble(reader["Amount"].ToString());
        //            oExtendedWarrantyRow.BankID = (int)reader["BankID"];
        //            oExtendedWarrantyRow.CardType = (int)reader["CardType"];
        //            oExtendedWarrantyRow.POSMachineID = (int)reader["POSMachineID"];
        //            oExtendedWarrantyRow.InstrumentNo = (string)reader["InstrumentNo"];
        //            oExtendedWarrantyRow.InstrumentDate = Convert.ToDateTime(reader["InstrumentDate"].ToString());
        //            oExtendedWarrantyRow.CardCategory = (int)reader["CardCategory"];
        //            oExtendedWarrantyRow.ApprovalNo = (string)reader["ApprovalNo"];
        //            oExtendedWarrantyRow.CreateDate = Convert.ToDateTime(reader["CreateDate"].ToString());
        //            oExtendedWarrantyRow.CreateUserID = (int)reader["CreateUserID"];


        //            oDSExtendedWarranty.ExtendedWarranty.AddExtendedWarrantyRow(oExtendedWarrantyRow);
        //            oDSExtendedWarranty.AcceptChanges();
        //        }
        //        reader.Close();
        //        AppLogger.LogInfo("Successfully Get Extended Warranty");
        //    }
        //    catch (Exception ex)
        //    {
        //        AppLogger.LogError("Error Getting Extended Warranty /" + ex.Message);
        //        throw (ex);
        //    }
        //    DBController.Instance.CloseConnection();
        //    return oDSExtendedWarranty;
        //}
        public DSExtendedWarranty InsertExtendedWarranty(DSExtendedWarranty oDSExtendedWarranty, int nWHID)
        {
            if (!DBController.Instance.CheckConnection())
            {
                DBController.Instance.OpenNewConnection();
            }

            ExtendedWarranty oExtendedWarranty;
            /// Insert Customer Temp Data

            foreach (DSExtendedWarranty.ExtendedWarrantyRow oExtendedWarrantyRow in oDSExtendedWarranty.ExtendedWarranty)
            {
                oExtendedWarranty = new ExtendedWarranty();
                oExtendedWarranty = GetDataForExtendedWarranty(oExtendedWarranty, oExtendedWarrantyRow, oDSExtendedWarranty);

                if (CheckExtendedWarranty(Convert.ToInt32(oExtendedWarrantyRow.ID), nWHID))
                {
                    try
                    {

                        oExtendedWarranty.AddForWeb();
                        AppLogger.LogInfo("Successfully Add Extended Warranty (ID=" + oExtendedWarrantyRow.ID + " and WareHouseID=" + oExtendedWarrantyRow.WarehouseID + ")");
                    }
                    catch (Exception ex)
                    {
                        AppLogger.LogError("Error Add Extended Warranty (ID=" + oExtendedWarrantyRow.ID + " and WareHouseID=" + oExtendedWarrantyRow.WarehouseID + ") /" + ex.Message);
                        DBController.Instance.RollbackTransaction();
                        throw (ex);
                    }

                }
                else
                {
                    AppLogger.LogInfo("Successfully Add Extended Warranty (ID=" + oExtendedWarrantyRow.ID + " and WareHouseID=" + oExtendedWarrantyRow.WarehouseID + ")");
                }
            }
            DBController.Instance.CommitTransaction();
            DBController.Instance.CloseConnection();


            return oDSExtendedWarranty;

        }

        public ExtendedWarranty GetDataForExtendedWarranty(ExtendedWarranty oExtendedWarranty, DSExtendedWarranty.ExtendedWarrantyRow oExtendedWarrantyRow, DSExtendedWarranty oDSExtendedWarranty)
        {
            oExtendedWarranty = new ExtendedWarranty();

            oExtendedWarranty.ID = oExtendedWarrantyRow.ID;
            oExtendedWarranty.WarehouseID = oExtendedWarrantyRow.WarehouseID;
            oExtendedWarranty.SmartWarrantyID = oExtendedWarrantyRow.SmartWarrantyID;
            oExtendedWarranty.ConsumerID = oExtendedWarrantyRow.ConsumerID;
            oExtendedWarranty.IssueDate = oExtendedWarrantyRow.IssueDate;
            oExtendedWarranty.ProductID = oExtendedWarrantyRow.ProductID;
            oExtendedWarranty.ProductSerialNo = oExtendedWarrantyRow.ProductSerialNo;
            oExtendedWarranty.CertificateNo = oExtendedWarrantyRow.CertificateNo;
            oExtendedWarranty.InvoiceNo = oExtendedWarrantyRow.InvoiceNo;
            oExtendedWarranty.InvoiceDate = oExtendedWarrantyRow.InvoiceDate;
            oExtendedWarranty.ExtendedWarrantyStartDate = oExtendedWarrantyRow.ExtendedWarrantyStartDate;
            oExtendedWarranty.ExtendedWarrantyEndDate = oExtendedWarrantyRow.ExtendedWarrantyEndDate;
            oExtendedWarranty.PaymentModeID = oExtendedWarrantyRow.PaymentModeID;
            oExtendedWarranty.Amount = oExtendedWarrantyRow.Amount;
            oExtendedWarranty.BankID = oExtendedWarrantyRow.BankID;
            oExtendedWarranty.CardType = oExtendedWarrantyRow.CardType;
            oExtendedWarranty.POSMachineID = oExtendedWarrantyRow.POSMachineID;
            oExtendedWarranty.InstrumentNo = oExtendedWarrantyRow.InstrumentNo;
            oExtendedWarranty.InstrumentDate = oExtendedWarrantyRow.InstrumentDate;
            oExtendedWarranty.CardCategory = oExtendedWarrantyRow.CardCategory;
            oExtendedWarranty.ApprovalNo = oExtendedWarrantyRow.ApprovalNo;

            //if (oExtendedWarrantyRow["BankID"] != DBNull.Value)
            //    cmd.Parameters.AddWithValue("BankID", oExtendedWarrantyRow.BankID);
            //else cmd.Parameters.AddWithValue("BankID", null);
            //if (oExtendedWarrantyRow["CardType"] != DBNull.Value)
            //    cmd.Parameters.AddWithValue("CardType", oExtendedWarrantyRow.CardType);
            //else cmd.Parameters.AddWithValue("CardType", null);
            //if (oExtendedWarrantyRow["POSMachineID"] != DBNull.Value)
            //    cmd.Parameters.AddWithValue("POSMachineID", oExtendedWarrantyRow.POSMachineID);
            //else cmd.Parameters.AddWithValue("POSMachineID", null);
            //if (oExtendedWarrantyRow["InstrumentNo"] != DBNull.Value)
            //    cmd.Parameters.AddWithValue("InstrumentNo", oExtendedWarrantyRow.InstrumentNo);
            //else cmd.Parameters.AddWithValue("InstrumentNo", null);
            //if (oExtendedWarrantyRow["InstrumentDate"] != DBNull.Value)
            //    cmd.Parameters.AddWithValue("InstrumentDate", oExtendedWarrantyRow.InstrumentDate);
            //else cmd.Parameters.AddWithValue("InstrumentDate", null);
            //if (oExtendedWarrantyRow["CardCategory"] != DBNull.Value)
            //    cmd.Parameters.AddWithValue("CardCategory", oExtendedWarrantyRow.CardCategory);
            //else cmd.Parameters.AddWithValue("CardCategory", null);
            //if (oExtendedWarrantyRow["ApprovalNo"] != DBNull.Value)
            //    cmd.Parameters.AddWithValue("ApprovalNo", oExtendedWarrantyRow.ApprovalNo);
            //else cmd.Parameters.AddWithValue("ApprovalNo", null);

            oExtendedWarranty.CreateDate = oExtendedWarrantyRow.CreateDate;
            oExtendedWarranty.CreateUserID = oExtendedWarrantyRow.CreateUserID;

            
            
            return oExtendedWarranty;
        }
        public bool CheckExtendedWarranty(int nID, int nWHID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "Select * From t_ExtendedWarranty where ID = ? and WarehouseID=?";
                cmd.Parameters.AddWithValue("ID", nID);
                cmd.Parameters.AddWithValue("WarehouseID", nWHID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }

        //public void UpdateExtendedWarranty(DSExtendedWarranty oDSExtendedWarranty, int nWarehouseID)
        //{
        //    DBController.Instance.BeginNewTransaction();
        //    OleDbCommand cmd = DBController.Instance.GetCommand();
        //    string sSql = "";
        //    try
        //    {
        //        foreach (DSExtendedWarranty.ExtendedWarrantyRow oExtendedWarrantyRow in oDSExtendedWarranty.ExtendedWarranty)
        //        {
        //            cmd.Dispose();
        //            cmd = DBController.Instance.GetCommand();

        //            sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
        //            cmd.CommandText = sSql;
        //            cmd.CommandType = CommandType.Text;

        //            cmd.Parameters.AddWithValue("IsDownload", (int)Dictionary.IsDownload.Yes);
        //            cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

        //            cmd.Parameters.AddWithValue("TableName", "t_ExtendedWarranty");
        //            cmd.Parameters.AddWithValue("DataID", oExtendedWarrantyRow.ID);
        //            cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

        //            cmd.ExecuteNonQuery();
        //            cmd.Dispose();
        //        }
        //        DBController.Instance.CommitTransaction();
        //    }
        //    catch (Exception ex)
        //    {
        //        DBController.Instance.RollbackTransaction();
        //        throw (ex);
        //    }
        //}

        public void InsertExtendedWarrantyItem(DSFinishedGoodsPrice oDSExtendedWarrantyItem)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Product Price Insert

            foreach (DSFinishedGoodsPrice.PriceRow oPriceRow in oDSExtendedWarrantyItem.Price)
            {

                if (CheckExtendedWarrantyItem(oPriceRow.PriceID))
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();
                    sSql = "INSERT INTO t_ExtendedWarrantyItem (SmartWarrantyID,ProductID,SmartWarrantyTenure,NetPrice,Commission,EffectiveDate,Remarks,CreateDate, "
                               + " CreateUserID,UpdateDate,UpdateUserID,IsCurrent) VALUES(?,?,?,?,?,?,?,?,?,?,?,?)";

                    try
                    {

                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("SmartWarrantyID", oPriceRow.PriceID);
                        cmd.Parameters.AddWithValue("ProductID", oPriceRow.ProductID);
                        cmd.Parameters.AddWithValue("SmartWarrantyTenure", oPriceRow.SmartWarrantyTenure);
                        if (oPriceRow.NetPrice != -1)
                            cmd.Parameters.AddWithValue("NetPrice", oPriceRow.NetPrice);
                        else cmd.Parameters.AddWithValue("NetPrice", null);

                        cmd.Parameters.AddWithValue("Commission", oPriceRow.Commission);
                        cmd.Parameters.AddWithValue("EffectiveDate", oPriceRow.EffectiveDate);
                        cmd.Parameters.AddWithValue("Remarks", oPriceRow.Remarks);

                        cmd.Parameters.AddWithValue("CreateDate", oPriceRow.CreateDate);
                        cmd.Parameters.AddWithValue("CreateUserID", oPriceRow.EntryUserID);

                        cmd.Parameters.AddWithValue("UpdateDate", null);
                        cmd.Parameters.AddWithValue("UpdateUserID", null);
                        if (oPriceRow.IsCurrent != -1)
                            cmd.Parameters.AddWithValue("IsCurrent", oPriceRow.IsCurrent);
                        else cmd.Parameters.AddWithValue("IsCurrent", null);

                        cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }
                else
                {
                    try
                    {
                        cmd.Dispose();
                        cmd = DBController.Instance.GetCommand();

                        sSql = "Update  t_ExtendedWarrantyItem Set ProductID=?,SmartWarrantyTenure=?,NetPrice=?,Commission=?,EffectiveDate=?,Remarks=?,CreateDate=?,CreateUserID=?,UpdateDate=?,UpdateUserID=?, "
                               + " IsCurrent=?  Where SmartWarrantyID=?";

                        cmd.CommandText = sSql;
                        cmd.CommandType = CommandType.Text;

                        cmd.Parameters.AddWithValue("ProductID", oPriceRow.ProductID);
                        cmd.Parameters.AddWithValue("SmartWarrantyTenure", oPriceRow.SmartWarrantyTenure);
                        cmd.Parameters.AddWithValue("NetPrice", oPriceRow.NetPrice);
                        cmd.Parameters.AddWithValue("Commission", oPriceRow.Commission);
                        cmd.Parameters.AddWithValue("EffectiveDate", oPriceRow.EffectiveDate);
                        cmd.Parameters.AddWithValue("Remarks", oPriceRow.Remarks);
                        cmd.Parameters.AddWithValue("CreateDate", oPriceRow.CreateDate);
                        cmd.Parameters.AddWithValue("CreateUserID", oPriceRow.EntryUserID);
                        cmd.Parameters.AddWithValue("UpdateDate", null);
                        cmd.Parameters.AddWithValue("UpdateUserID", null);
                        if (oPriceRow.IsCurrent != -1)
                            cmd.Parameters.AddWithValue("IsCurrent", oPriceRow.IsCurrent);
                        else cmd.Parameters.AddWithValue("IsCurrent", null);


                        cmd.Parameters.AddWithValue("SmartWarrantyID", oPriceRow.PriceID);

                        int nCount = cmd.ExecuteNonQuery();
                        cmd.Dispose();

                    }
                    catch (Exception ex)
                    {
                        throw (ex);
                    }
                }

                ProductDetail oProductDetail = new ProductDetail();
                int nMaxSmartWarrantyID = oProductDetail.GetMaxSmartWarrantyID(oPriceRow.ProductID, oPriceRow.SmartWarrantyTenure);

                //Max Price ID Is Not Current
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                sSql = " Update t_ExtendedWarrantyItem SET IsCurrent=" + (int)Dictionary.YesOrNoStatus.NO + " Where ProductID = " + oPriceRow.ProductID + " and SmartWarrantyTenure = " + oPriceRow.SmartWarrantyTenure + " and SmartWarrantyID <> " + nMaxSmartWarrantyID + "";

                cmd.CommandText = sSql;
                cmd.CommandType = CommandType.Text;
                cmd.ExecuteNonQuery();
                cmd.Dispose();
                //Max Price ID Is Current
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();

                sSql = " Update t_ExtendedWarrantyItem SET IsCurrent=" + (int)Dictionary.YesOrNoStatus.YES + " Where ProductID = " + oPriceRow.ProductID + " and SmartWarrantyTenure = " + oPriceRow.SmartWarrantyTenure + " and SmartWarrantyID = " + nMaxSmartWarrantyID + "";

                cmd.CommandText = sSql;
                cmd.CommandType = CommandType.Text;
                cmd.ExecuteNonQuery();
                cmd.Dispose();
            }
        }

        public bool CheckExtendedWarrantyItem(int nSmartWarrantyID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "SELECT * FROM t_ExtendedWarrantyItem where SmartWarrantyID =?";
                cmd.Parameters.AddWithValue("SmartWarrantyID", nSmartWarrantyID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }

        public DSFinishedGoodsPrice GetExtendedWarrantyItem(DSFinishedGoodsPrice oDSExtendedWarrantyItem, int nWarehouseID)
        {
            oDSExtendedWarrantyItem = new DSFinishedGoodsPrice();
            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }

                OleDbCommand cmd = DBController.Instance.GetCommand();
                cmd.CommandText = "select * from t_ExtendedWarrantyItem a inner join t_DataTransfer b on b.DataID=a.SmartWarrantyID "
                              + "  where b.TableName='t_ExtendedWarrantyItem' and "
                              + "  b.IsDownload=1 and WarehouseID= '" + nWarehouseID + "' ";


                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSFinishedGoodsPrice.PriceRow oPriceRow = oDSExtendedWarrantyItem.Price.NewPriceRow();

                    oPriceRow.PriceID = (int)reader["SmartWarrantyID"];
                    oPriceRow.ProductID = (int)reader["ProductID"];
                    oPriceRow.SmartWarrantyTenure = (int)reader["SmartWarrantyTenure"];
                    oPriceRow.NetPrice = (double)reader["NetPrice"];
                    oPriceRow.Commission = (double)reader["Commission"];
                    oPriceRow.EffectiveDate = (DateTime)reader["EffectiveDate"];
                    oPriceRow.Remarks = reader["Remarks"].ToString();
                    oPriceRow.CreateDate = Convert.ToDateTime(reader["CreateDate"].ToString());
                    oPriceRow.EntryUserID = (int)reader["CreateUserID"];

                    if (reader["IsCurrent"] != DBNull.Value)
                        oPriceRow.IsCurrent = int.Parse(reader["IsCurrent"].ToString());
                    else oPriceRow.IsCurrent = -1;

                    oDSExtendedWarrantyItem.Price.AddPriceRow(oPriceRow);
                    oDSExtendedWarrantyItem.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Extended Warranty Item ");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting  Extended Warranty Item /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();

            return oDSExtendedWarrantyItem;
        }

        public void UpdateExtendedWarrantyItemInfo(DSFinishedGoodsPrice oDSExtendedWarrantyItem, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Product Price Transfer Info Update

            try
            {
                foreach (DSFinishedGoodsPrice.PriceRow oPriceRow in oDSExtendedWarrantyItem.Price)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_ExtendedWarrantyItem");
                    cmd.Parameters.AddWithValue("DataID", oPriceRow.PriceID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }

        public DSDayPlan InsertDSDayPlanData(DSDayPlan oDSDayPlan, int nWHID)
        {
            if (!DBController.Instance.CheckConnection())
            {
                DBController.Instance.OpenNewConnection();
            }

            DayPlan oDayPlan;

            foreach (DSDayPlan.DayPlanRow oDayPlanRow in oDSDayPlan.DayPlan)
            {
                oDayPlan = new DayPlan();
                oDayPlan = GetDataForDayPlan(oDayPlan, oDayPlanRow, oDSDayPlan);

                if (!CheckDayPlanID(Convert.ToInt32(oDayPlanRow.PlanId), nWHID))
                {
                    try
                    {

                        oDayPlan.AddForWeb();
                        oDayPlanRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                        AppLogger.LogInfo("Successfully Add Day Plan Appalication (PlanId=" + oDayPlanRow.PlanId + ")");
                    }
                    catch (Exception ex)
                    {
                        oDayPlanRow.IsDownload = (int)Dictionary.YesOrNoStatus.NO;
                        AppLogger.LogError("Error Add Day Plan Appalication (PlanId=" + oDayPlanRow.PlanId + ") /" + ex.Message);
                        DBController.Instance.RollbackTransaction();
                        throw (ex);
                    }

                }
                else
                {
                    oDayPlanRow.IsDownload = (int)Dictionary.YesOrNoStatus.YES;
                    AppLogger.LogInfo("Successfully Add Day Plan  (PlanId=" + oDayPlanRow.PlanId + ")");
                }
            }
            DBController.Instance.CommitTransaction();
            DBController.Instance.CloseConnection();


            return oDSDayPlan;

        }

        public DayPlan GetDataForDayPlan(DayPlan oDayPlan, DSDayPlan.DayPlanRow oDayPlanRow, DSDayPlan oDSDayPlan)
        {
            DSSalesInvoice oDSSalesInvoiceDetail = new DSSalesInvoice();

            oDayPlan = new DayPlan();

            oDayPlan.PlanId = oDayPlanRow.PlanId;
            oDayPlan.PlanNo = oDayPlanRow.PlanNo;
            oDayPlan.EmployeeId = oDayPlanRow.EmployeeId;
            oDayPlan.LocationId = oDayPlanRow.LocationId;
            oDayPlan.Status = oDayPlanRow.Status;
            oDayPlan.CreateUserId = oDayPlanRow.CreateUserId;
            oDayPlan.CreateDate = oDayPlanRow.CreateDate;
            if (oDayPlanRow.IsUpdateUserIdNull())
                oDayPlan.UpdateUserId = -1;
            else oDayPlan.UpdateUserId = oDayPlanRow.UpdateUserId;
            if (oDayPlanRow.IsUpdateDateNull())
                oDayPlan.UpdateDate = null;
            else oDayPlan.UpdateDate = oDayPlanRow.UpdateDate;

            oDayPlan.Status = oDayPlanRow.Status;


            DataRow[] oDR = oDSDayPlan.DayPlanDetails.Select(" PlanId= '" + oDayPlanRow.PlanId + "'");
            oDSDayPlan.Merge(oDR);
            oDSDayPlan.AcceptChanges();

            foreach (DSDayPlan.DayPlanDetailsRow oDayPlanDetailsRow in oDSDayPlan.DayPlanDetails)
            {
                DayPlanDetails _oDayPlanDetails = new DayPlanDetails();

                _oDayPlanDetails.ID = oDayPlanDetailsRow.ID;
                _oDayPlanDetails.DayPlanID = oDayPlanDetailsRow.PlanId;
                _oDayPlanDetails.PlanDate = oDayPlanDetailsRow.PlanDate;
                _oDayPlanDetails.TimeFrom = oDayPlanDetailsRow.TimeFrom;
                _oDayPlanDetails.TimeTo = oDayPlanDetailsRow.TimeTo;
                _oDayPlanDetails.PlanTo = oDayPlanDetailsRow.PlanTo;
                _oDayPlanDetails.PurposeId = oDayPlanDetailsRow.PurposeId;
                _oDayPlanDetails.ActionStatusId = oDayPlanDetailsRow.ActionStatus;
                _oDayPlanDetails.Address = oDayPlanDetailsRow.Address;
                _oDayPlanDetails.CustomerId = oDayPlanDetailsRow.CustomerId;
                _oDayPlanDetails.Remarks = oDayPlanDetailsRow.Remarks;

                oDayPlan.Add(_oDayPlanDetails);
            }
            return oDayPlan;
        }
        public DSDayPlan GetDayPlanPurpose(DSDayPlan oDSDayPlan, int nWarehouseID)
        {
            oDSDayPlan = new DSDayPlan();
            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }

                OleDbCommand cmd = DBController.Instance.GetCommand();
                cmd.CommandText = "select * from t_DayPlanPurpose";


                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSDayPlan.DayPlanPurposeRow oDayPlanPurposeRow = oDSDayPlan.DayPlanPurpose.NewDayPlanPurposeRow();

                    oDayPlanPurposeRow.PurposeID = (int)reader["PurposeID"];
                    oDayPlanPurposeRow.Description = reader["Description"].ToString();
                    oDayPlanPurposeRow.IsActive = (bool)reader["IsActive"];
                    oDayPlanPurposeRow.Sort = (int)reader["Sort"];


                    oDSDayPlan.DayPlanPurpose.AddDayPlanPurposeRow(oDayPlanPurposeRow);
                    oDSDayPlan.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Day Plan Purpose ");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting  Day Plan Purpose /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();

            return oDSDayPlan;
        }
        public bool CheckDayPlanID(int nPlanID, int nWarehouseID)
        {
            int nCount = 0;
            OleDbCommand cmd = DBController.Instance.GetCommand();
            try
            {
                cmd.CommandText = "Select * From t_DayPlan Where PlanId = ? ";
                cmd.Parameters.AddWithValue("PlanId", nPlanID);
                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    nCount++;
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            if (nCount == 0)
                return true;
            else return false;
        }
        public void InsertDayPlanPurpose(DSDayPlan oDSDayPlan)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Product Price Insert

            foreach (DSDayPlan.DayPlanPurposeRow oDayPlanPurposeRow in oDSDayPlan.DayPlanPurpose)
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();
                sSql = "INSERT INTO t_DayPlanPurpose (PurposeID,Description,IsActive,Sort) VALUES(?,?,?,?)";

                try
                {

                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("PurposeID", oDayPlanPurposeRow.PurposeID);
                    cmd.Parameters.AddWithValue("Description", oDayPlanPurposeRow.Description);
                    cmd.Parameters.AddWithValue("IsActive", oDayPlanPurposeRow.IsActive);
                    cmd.Parameters.AddWithValue("Sort", oDayPlanPurposeRow.Sort);


                    cmd.ExecuteNonQuery();
                    cmd.Dispose();

                }
                catch (Exception ex)
                {
                    throw (ex);
                }
            }

        }

        public void UpdateDayPlanPurposeInfo(DSDayPlan oDSDayPlan, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Product Price Transfer Info Update

            try
            {
                foreach (DSDayPlan.DayPlanPurposeRow oDayPlanPurposeRow in oDSDayPlan.DayPlanPurpose)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_DayPlanPurpose");
                    cmd.Parameters.AddWithValue("DataID", oDayPlanPurposeRow.PurposeID);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }
        public void InsertVisitPlanType(DSDayPlan oDSDayPlan)
        {
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Product Price Insert

            foreach (DSDayPlan.VisitPlanTypeRow oVisitPlanTypeRow in oDSDayPlan.VisitPlanType)
            {
                cmd.Dispose();
                cmd = DBController.Instance.GetCommand();
                sSql = "INSERT INTO t_VisitPlanType (PlanId,PlanDescription,CreatedBy,CreatedDate,PlanTypeId,Sort) VALUES(?,?,?,?,?,?)";

                try
                {

                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("PlanId", oVisitPlanTypeRow.PlanId);
                    cmd.Parameters.AddWithValue("PlanDescription", oVisitPlanTypeRow.PlanDescription);
                    cmd.Parameters.AddWithValue("CreatedBy", oVisitPlanTypeRow.CreatedBy);
                    cmd.Parameters.AddWithValue("CreatedDate", oVisitPlanTypeRow.CreatedDate);
                    cmd.Parameters.AddWithValue("PlanTypeId", oVisitPlanTypeRow.PlanTypeId);
                    cmd.Parameters.AddWithValue("Sort", oVisitPlanTypeRow.Sort);


                    cmd.ExecuteNonQuery();
                    cmd.Dispose();

                }
                catch (Exception ex)
                {
                    throw (ex);
                }
            }

        }
        public DSDayPlan GetDayVisitPlanType(DSDayPlan oDSDayPlan, int nWarehouseID)
        {
            oDSDayPlan = new DSDayPlan();
            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }

                OleDbCommand cmd = DBController.Instance.GetCommand();
                cmd.CommandText = "select * from t_VisitPlanType";


                cmd.CommandType = CommandType.Text;
                IDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    DSDayPlan.VisitPlanTypeRow oVisitPlanTypeRow = oDSDayPlan.VisitPlanType.NewVisitPlanTypeRow();

                    oVisitPlanTypeRow.PlanId = (int)reader["PlanId"];
                    oVisitPlanTypeRow.PlanDescription = reader["PlanDescription"].ToString();
                    oVisitPlanTypeRow.CreatedBy = (int)reader["CreatedBy"];
                    oVisitPlanTypeRow.CreatedDate = Convert.ToDateTime(reader["CreatedDate"]);
                    oVisitPlanTypeRow.PlanTypeId = (int)reader["PlanTypeId"];
                    oVisitPlanTypeRow.Sort = (int)reader["Sort"];


                    oDSDayPlan.VisitPlanType.AddVisitPlanTypeRow(oVisitPlanTypeRow);
                    oDSDayPlan.AcceptChanges();
                }
                reader.Close();
                AppLogger.LogInfo("Successfully Get Visit Plan Type ");
            }
            catch (Exception ex)
            {
                AppLogger.LogError("Error Getting  Visit Plan Type /" + ex.Message);
                throw (ex);
            }
            DBController.Instance.CloseConnection();

            return oDSDayPlan;
        }
        public void UpdateVisitPlanTypeInfo(DSDayPlan oDSDayPlan, int nWarehouseID)
        {
            DBController.Instance.BeginNewTransaction();
            OleDbCommand cmd = DBController.Instance.GetCommand();
            string sSql = "";

            /// Product Price Transfer Info Update

            try
            {
                foreach (DSDayPlan.VisitPlanTypeRow oVisitPlanTypeRow in oDSDayPlan.VisitPlanType)
                {
                    cmd.Dispose();
                    cmd = DBController.Instance.GetCommand();

                    sSql = "UPDATE t_DataTransfer SET IsDownload=?, UpdateDate=?  WHERE TableName=? and DataID=? and WarehouseID=? and IsDownload = 1  ";
                    cmd.CommandText = sSql;
                    cmd.CommandType = CommandType.Text;

                    cmd.Parameters.AddWithValue("IsDownload", 2);
                    cmd.Parameters.AddWithValue("UpdateDate", DateTime.Now);

                    cmd.Parameters.AddWithValue("TableName", "t_VisitPlanType");
                    cmd.Parameters.AddWithValue("DataID", oVisitPlanTypeRow.PlanId);
                    cmd.Parameters.AddWithValue("WarehouseID", nWarehouseID);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                DBController.Instance.CommitTransaction();
            }
            catch (Exception ex)
            {
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }

        public DSPromotion GetScratchCardOffer(DSPromotion oDSPromotion, int nWarehouseID, string sTableName)
        {

            DSPromotion oDSPromo = new DSPromotion();
            DSPromotion oDSPromoProductFor = new DSPromotion();
            DSPromotion oDSPromoWarehouse = new DSPromotion();
            DSPromotion oDSPromoSalesType = new DSPromotion();
            string sPromoID = "";
            try
            {
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }
                ConsumerPromotions oConsumerPromotions = new ConsumerPromotions();
                oConsumerPromotions.GetScratchCardOfferByWH(nWarehouseID, sTableName);
                AppLogger.LogInfo("Successfully Get All header data Scratch Card Offer (" + sTableName + ") and WarehouseID=" + nWarehouseID + "");
                oDSPromotion = new DSPromotion();

                foreach (ConsumerPromotion oConsumerPromotion in oConsumerPromotions)
                {
                    int nPromoID = 0;
                    DSPromotion.PromoRow oPromoRow = oDSPromo.Promo.NewPromoRow();
                    oPromoRow.ConsumerPromoID = oConsumerPromotion.ConsumerPromoID;
                    if (oConsumerPromotion.TransferType == (int)Dictionary.DataTransferType.Add)
                    {
                        if (sPromoID == "")
                            sPromoID = oPromoRow.ConsumerPromoID.ToString();
                        else sPromoID = sPromoID + "," + oPromoRow.ConsumerPromoID;
                    }
                    nPromoID = oConsumerPromotion.ConsumerPromoID;
                    oPromoRow.ConsumerPromoNo = oConsumerPromotion.ConsumerPromoNo;
                    oPromoRow.ConsumerPromoName = oConsumerPromotion.ConsumerPromoName;
                    oPromoRow.FromDate = oConsumerPromotion.FromDate;
                    oPromoRow.ToDate = oConsumerPromotion.ToDate;
                    oPromoRow.CreateDate = oConsumerPromotion.CreateDate;
                    oPromoRow.CreateUserID = oConsumerPromotion.CreateUserID;
                    oPromoRow.Remarks = oConsumerPromotion.Remarks;
                    oPromoRow.IsActive = oConsumerPromotion.IsActive;
                    oPromoRow.UpdateUserID = oConsumerPromotion.UpdateUserID;
                    oPromoRow.Status = oConsumerPromotion.Status;
                    if (oConsumerPromotion.UpdateDate != null)
                    {
                        oPromoRow.UpdateDate = Convert.ToDateTime(oConsumerPromotion.UpdateDate).Date;
                    }
                    oPromoRow.ApprovedUserID = oConsumerPromotion.ApprovedUserID;
                    if (oConsumerPromotion.ApprovedDate != null)
                    {
                        oPromoRow.ApprovedDate = Convert.ToDateTime(oConsumerPromotion.ApprovedDate).Date;
                    }
                    oPromoRow.TransferType = oConsumerPromotion.TransferType;
                    oPromoRow.OfferType = oConsumerPromotion.OfferType;
                    
                    oDSPromo.Promo.AddPromoRow(oPromoRow);
                    oDSPromo.AcceptChanges();
                }
            }
            catch (Exception ex)
            {
                AppLogger.LogInfo("Error Getting Scratch Card Offer (" + sTableName + ") and WarehouseID=" + nWarehouseID + "" + ex.Message);
                throw (ex);
            }
            try
            {
                if (sPromoID == "")
                {
                    oDSPromotion.Merge(oDSPromo);
                    oDSPromotion.Merge(oDSPromoProductFor);
                    oDSPromotion.Merge(oDSPromoWarehouse);
                    oDSPromotion.Merge(oDSPromoSalesType);
                    oDSPromotion.AcceptChanges();

                    return oDSPromotion;
                }
                //For Product
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }
                ConsumerPromotionProductFors oConsumerPromotionProductFors = new ConsumerPromotionProductFors();
                oConsumerPromotionProductFors.GetScratchCardForProduct(sPromoID, sTableName);
                AppLogger.LogInfo("Successfully Get Scratch Card Offer Product For (" + sTableName + ") and WarehouseID=" + nWarehouseID + "");
                foreach (ConsumerPromotionProductFor oConsumerPromotionProductFor in oConsumerPromotionProductFors)
                {
                    DSPromotion.PromoProductForRow oPromoProductForRow = oDSPromoProductFor.PromoProductFor.NewPromoProductForRow();

                    oPromoProductForRow.ConsumerPromoID = oConsumerPromotionProductFor.ConsumerPromoID;
                    
                    if (sTableName == "t_ScratchCardOffer")
                    {
                        oPromoProductForRow.ProductID = oConsumerPromotionProductFor.ProductID;
                    }
                    oDSPromoProductFor.PromoProductFor.AddPromoProductForRow(oPromoProductForRow);
                    oDSPromoProductFor.AcceptChanges();
                }
            }
            catch (Exception ex)
            {
                AppLogger.LogInfo("Error Getting Scratch Card Offer Product For (" + sTableName + ") and WarehouseID=" + nWarehouseID + "" + ex.Message);
                throw (ex);
            }
            try
            {
                //Warehouse
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }
                ConsumerPromotions oPromoWarehouse = new ConsumerPromotions();
                oPromoWarehouse.GetScratchCardOfferWH(sPromoID, sTableName, nWarehouseID);
                AppLogger.LogInfo("Successfully Get Scratch Card Offer Warehouse  (" + sTableName + ") and WarehouseID=" + nWarehouseID + "");
                foreach (ConsumerPromotion oPromoWH in oPromoWarehouse)
                {
                    DSPromotion.PromoWarehouseRow oPromoWarehouseRow = oDSPromoWarehouse.PromoWarehouse.NewPromoWarehouseRow();
                    oPromoWarehouseRow.ConsumerPromoID = oPromoWH.ConsumerPromoID;
                    oPromoWarehouseRow.WarehouseID = oPromoWH.WarehouseID;
                    oDSPromoWarehouse.PromoWarehouse.AddPromoWarehouseRow(oPromoWarehouseRow);
                    oDSPromoWarehouse.AcceptChanges();
                }
            }
            catch (Exception ex)
            {
                AppLogger.LogInfo("Error Getting Scratch Card Offer Warehouse  (" + sTableName + ") and WarehouseID=" + nWarehouseID + "" + ex.Message);
                throw (ex);
            }
            try
            {
                //Sales Type
                if (!DBController.Instance.CheckConnection())
                {
                    DBController.Instance.OpenNewConnection();
                }
                SPChannels oPromoSalesTypes = new SPChannels();
                oPromoSalesTypes.GetScratchCardOfferSalesType(sPromoID, sTableName);
                AppLogger.LogInfo("Successfully Get Scratch Card Offer SalesType  (" + sTableName + ") and WarehouseID=" + nWarehouseID + "");
                foreach (SPChannel oSPChannel in oPromoSalesTypes)
                {
                    DSPromotion.PromoSalesTypeRow oPromoSalesTypeRow = oDSPromoSalesType.PromoSalesType.NewPromoSalesTypeRow();

                    oPromoSalesTypeRow.ConsumerPromoID = oSPChannel.SalesPromotionID;
                    oPromoSalesTypeRow.SalesType = oSPChannel.ChannelID;
                    oPromoSalesTypeRow.CustomerType = oSPChannel.CustType;
                    oDSPromoSalesType.PromoSalesType.AddPromoSalesTypeRow(oPromoSalesTypeRow);
                    oDSPromoSalesType.AcceptChanges();
                }
            }
            catch (Exception ex)
            {
                AppLogger.LogInfo("Error Getting Scratch Card Offer SalesType  (" + sTableName + ") and WarehouseID=" + nWarehouseID + "" + ex.Message);
                throw (ex);
            }
            
            oDSPromotion.Merge(oDSPromo);
            oDSPromotion.Merge(oDSPromoProductFor);
            oDSPromotion.Merge(oDSPromoWarehouse);
            oDSPromotion.Merge(oDSPromoSalesType);
            oDSPromotion.AcceptChanges();

            return oDSPromotion;
        }


        public void InsertScratchCardOffer(DSPromotion oDSPromotion, string sTableName, int WHID)
        {
            try
            {
                foreach (DSPromotion.PromoRow oPromoRow in oDSPromotion.Promo)
                {
                    if (CheckScratchCardOffer(oPromoRow.ConsumerPromoID, sTableName))
                    {
                        ConsumerPromotion _oConsumerPromotion = new ConsumerPromotion();
                        _oConsumerPromotion.ConsumerPromoID = oPromoRow.ConsumerPromoID;
                        _oConsumerPromotion.ConsumerPromoName = oPromoRow.ConsumerPromoName;
                        _oConsumerPromotion.ConsumerPromoNo = oPromoRow.ConsumerPromoNo;
                        _oConsumerPromotion.FromDate = oPromoRow.FromDate;
                        _oConsumerPromotion.ToDate = oPromoRow.ToDate;
                        _oConsumerPromotion.CreateDate = oPromoRow.CreateDate;
                        _oConsumerPromotion.CreateUserID = oPromoRow.CreateUserID;
                        _oConsumerPromotion.Remarks = oPromoRow.Remarks;
                        _oConsumerPromotion.IsActive = oPromoRow.IsActive;
                        _oConsumerPromotion.OfferType = oPromoRow.OfferType;
                       
                        if (oPromoRow.IsUpdateDateNull())
                        {
                            _oConsumerPromotion.UpdateDate = null;
                        }
                        else
                        {
                            _oConsumerPromotion.UpdateDate = oPromoRow.UpdateDate;
                        }

                        _oConsumerPromotion.UpdateUserID = oPromoRow.UpdateUserID;
                        _oConsumerPromotion.Status = oPromoRow.Status;
                        _oConsumerPromotion.ApprovedUserID = oPromoRow.ApprovedUserID;
                        if (oPromoRow.IsApprovedDateNull())
                        {
                            _oConsumerPromotion.ApprovedDate = null;
                        }
                        else
                        {
                            _oConsumerPromotion.ApprovedDate = oPromoRow.ApprovedDate;
                        }
                        try
                        {
                            _oConsumerPromotion.UpdateScratchCardOffer(sTableName);
                            if (sTableName == "t_ScratchCardOffer")
                            {
                                AppLogger.LogInfo("Successfully Update Scratch Card Offer (t_ScratchCardOffer)(ScratchCardOfferID=" + _oConsumerPromotion.ConsumerPromoID + " and WHID=" + WHID + ")");
                            }
                           
                        }
                        catch (Exception ex)
                        {
                            if (sTableName == "t_ScratchCardOffer")
                            {
                                AppLogger.LogInfo("Error Update Scratch Card Offer (t_ScratchCardOffer)(ScratchCardOfferID=" + _oConsumerPromotion.ConsumerPromoID + " and WHID=" + WHID + ")");
                            }
                          
                            DBController.Instance.RollbackTransaction();
                            throw (ex);

                        }

                    }
                    else
                    {
                        ConsumerPromotion _oConsumerPromotion = new ConsumerPromotion();
                        _oConsumerPromotion.ConsumerPromoID = oPromoRow.ConsumerPromoID;
                        _oConsumerPromotion.ConsumerPromoName = oPromoRow.ConsumerPromoName;
                        _oConsumerPromotion.ConsumerPromoNo = oPromoRow.ConsumerPromoNo;
                        _oConsumerPromotion.FromDate = oPromoRow.FromDate;
                        _oConsumerPromotion.ToDate = oPromoRow.ToDate;
                        _oConsumerPromotion.CreateDate = oPromoRow.CreateDate;
                        _oConsumerPromotion.CreateUserID = oPromoRow.CreateUserID;
                        _oConsumerPromotion.Remarks = oPromoRow.Remarks;
                        _oConsumerPromotion.IsActive = oPromoRow.IsActive;
                        if (oPromoRow.IsUpdateDateNull())
                        {
                            _oConsumerPromotion.UpdateDate = null;
                        }
                        else
                        {
                            _oConsumerPromotion.UpdateDate = oPromoRow.UpdateDate;
                        }

                        _oConsumerPromotion.UpdateUserID = oPromoRow.UpdateUserID;
                        _oConsumerPromotion.Status = oPromoRow.Status;
                        _oConsumerPromotion.ApprovedUserID = oPromoRow.ApprovedUserID;
                        _oConsumerPromotion.OfferType = oPromoRow.OfferType;
                        
                        if (oPromoRow.IsApprovedDateNull())
                        {
                            _oConsumerPromotion.ApprovedDate = null;
                        }
                        else
                        {
                            _oConsumerPromotion.ApprovedDate = oPromoRow.ApprovedDate;
                        }
                        try
                        {
                            _oConsumerPromotion.InsertScratchCardOffer(sTableName);
                            if (sTableName == "t_ScratchCardOffer")
                            {
                                AppLogger.LogInfo("Successfully Add Scratch Card Offer (t_ScratchCardOffer)(ScratchCardOfferID=" + _oConsumerPromotion.ConsumerPromoID + " and WHID=" + WHID + ")");
                            }
                          
                        }
                        catch (Exception ex)
                        {
                            if (sTableName == "t_ScratchCardOffer")
                            {
                                AppLogger.LogInfo("Error Adding Scratch Card Offer (t_ScratchCardOffer)(ScratchCardOfferID=" + _oConsumerPromotion.ConsumerPromoID + " and WHID=" + WHID + ")");
                            }
                            
                            DBController.Instance.RollbackTransaction();
                            throw (ex);

                        }

                        ///Product For
                        DSPromotion oDSPromoProductFor = new DSPromotion();
                        if (sTableName == "t_ScratchCardOffer")
                        {
                            DataRow[] oDR = oDSPromotion.PromoProductFor.Select(" ConsumerPromoID= '" + oPromoRow.ConsumerPromoID + "'");

                            oDSPromoProductFor.Merge(oDR);
                            oDSPromoProductFor.PromoProductFor.AcceptChanges();
                        }
                       
                        try
                        {
                            foreach (DSPromotion.PromoProductForRow oPromoProductForRow in oDSPromoProductFor.PromoProductFor)
                            {
                                ConsumerPromotionProductFor oConsumerPromotionProductFor = new ConsumerPromotionProductFor();
                                if (sTableName == "t_ScratchCardOffer")
                                {
                                    oConsumerPromotionProductFor.ConsumerPromoID = oPromoProductForRow.ConsumerPromoID;
                                    
                                    oConsumerPromotionProductFor.ProductID = oPromoProductForRow.ProductID;


                                    oConsumerPromotionProductFor.InsertScratchCardOfferProductForWEB();

                                }

                            }
                            if (sTableName == "t_ScratchCardOffer")
                            {
                                AppLogger.LogInfo("Successfully Add Scratch Card Offer (t_ScratchCardOfferProductFor)(ScratchCardOfferID=" + _oConsumerPromotion.ConsumerPromoID + ")");
                            }
                            
                        }
                        catch (Exception ex)
                        {
                            if (sTableName == "t_ScratchCardOffer")
                            {
                                AppLogger.LogInfo("Error Adding Scratch Card Offer (t_ScratchCardOfferProductFor)(ScratchCardOfferID=" + _oConsumerPromotion.ConsumerPromoID + " and WHID=" + WHID + ")");
                            }
                           
                            DBController.Instance.RollbackTransaction();
                            throw (ex);

                        }


                        ///Sales Type
                        DSPromotion oDSPromoSalesType = new DSPromotion();
                        if (sTableName == "t_ScratchCardOffer")
                        {
                            DataRow[] oDRSalesType = oDSPromotion.PromoSalesType.Select(" ConsumerPromoID= '" + oPromoRow.ConsumerPromoID + "'");
                            oDSPromoSalesType.Merge(oDRSalesType);
                            oDSPromoSalesType.PromoSalesType.AcceptChanges();
                        }
                       
                        try
                        {
                            foreach (DSPromotion.PromoSalesTypeRow oPromoSalesTypeRow in oDSPromoSalesType.PromoSalesType)
                            {
                                SPChannel oConsumerPromotionSalesType = new SPChannel();
                                if (sTableName == "t_ScratchCardOffer")
                                {
                                    oConsumerPromotionSalesType.SalesPromotionID = oPromoSalesTypeRow.ConsumerPromoID;
                                    oConsumerPromotionSalesType.ChannelID = oPromoSalesTypeRow.SalesType;
                                    oConsumerPromotionSalesType.CustType = oPromoSalesTypeRow.CustomerType;
                                    oConsumerPromotionSalesType.InsertScratchCardOfferChannel();
                                }
                               

                            }
                            if (sTableName == "t_ScratchCardOffer")
                            {
                                AppLogger.LogInfo("Successfully Add Scratch Card Offer  (t_ScratchCardOfferSalesType)(ScratchCardOfferID=" + _oConsumerPromotion.ConsumerPromoID + " and WHID=" + WHID + ")");
                            }
                           
                        }
                        catch (Exception ex)
                        {
                            if (sTableName == "t_ScratchCardOffer")
                            {
                                AppLogger.LogInfo("Error Adding  Scratch Card Offer  (t_ScratchCardOfferSalesType)(ScratchCardOfferID=" + _oConsumerPromotion.ConsumerPromoID + " and WHID=" + WHID + ")");
                            }
                           
                            DBController.Instance.RollbackTransaction();
                            throw (ex);

                        }
                        
                        ///Warehouse
                        DSPromotion oDSPromoWarehouse = new DSPromotion();
                        if (sTableName == "t_ScratchCardOffer")
                        {
                            DataRow[] oDRWarehouse = oDSPromotion.PromoWarehouse.Select(" ConsumerPromoID= '" + oPromoRow.ConsumerPromoID + "'");
                            oDSPromoWarehouse.Merge(oDRWarehouse);
                            oDSPromoWarehouse.PromoWarehouse.AcceptChanges();
                        }
                        
                        try
                        {
                            foreach (DSPromotion.PromoWarehouseRow oPromoWarehouseRow in oDSPromoWarehouse.PromoWarehouse)
                            {
                                SPWarehouse oConsumerWarehouse = new SPWarehouse();
                                if (sTableName == "t_ScratchCardOffer")
                                {
                                    oConsumerWarehouse.SalesPromotionID = oPromoWarehouseRow.ConsumerPromoID;
                                    oConsumerWarehouse.WarehouseID = oPromoWarehouseRow.WarehouseID;
                                    oConsumerWarehouse.InsertScratchCardOfferWarehouse();
                                }
                               

                            }
                            if (sTableName == "t_ScratchCardOffer")
                            {
                                AppLogger.LogInfo("Successfully Add Scratch Card Offer (t_ScratchCardOfferWarehouse)(ScratchCardOfferID=" + _oConsumerPromotion.ConsumerPromoID + " and WHID=" + WHID + ")");
                            }
                            
                        }
                        catch (Exception ex)
                        {
                            if (sTableName == "t_ScratchCardOffer")
                            {
                                AppLogger.LogInfo("Error Adding Scratch Card Offer (t_ScratchCardOfferWarehouse)(ScratchCardOfferID=" + _oConsumerPromotion.ConsumerPromoID + " and WHID=" + WHID + ")");
                            }
                           
                            DBController.Instance.RollbackTransaction();
                            throw (ex);

                        }
                        

                    }

                }
            }
            catch (Exception ex)
            {
                throw (ex);
                if (sTableName == "t_ScratchCardOffer")
                {
                    AppLogger.LogInfo("Error Adding Scratch Card Offer");
                }
                
                DBController.Instance.RollbackTransaction();
                throw (ex);
            }
        }

        

    }



}
